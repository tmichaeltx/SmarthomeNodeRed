[{"id":"2b2a4010.a6b5e","type":"tab","label":"Triggerable Flows","disabled":false,"info":""},{"id":"54cae49c.6ee04c","type":"tab","label":"Recurring Flow Triggers","disabled":false,"info":""},{"id":"98a6e865.a02ea8","type":"tab","label":"Automation Flows","disabled":false,"info":""},{"id":"1a0aa13a.9d7b8f","type":"tab","label":"Fake Radar","disabled":false,"info":""},{"id":"5b6a6e66.a3209","type":"tab","label":"Make Common View of Z2M","disabled":false,"info":""},{"id":"9d262d68.d01aa","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"d0bc7968.d150a8","type":"tab","label":"Flow 2","disabled":false,"info":""},{"id":"21d3abd9.0eac04","type":"tab","label":"Tshoot monitor Homebridge","disabled":false,"info":""},{"id":"ae9f4368.0ac45","type":"tab","label":"Placeholder for Homebridge Config nodes","disabled":false,"info":""},{"id":"1dc4f0f5.2a52bf","type":"tab","label":"Simplified HB","disabled":false,"info":""},{"id":"99fd6336.0f977","type":"tab","label":"Simplified Z2M","disabled":false,"info":""},{"id":"db3a486d.c20478","type":"subflow","name":"Dimmer Settings","info":"","category":"","in":[{"x":400,"y":80,"wires":[{"id":"f2650446.2a56d8"}]}],"out":[{"x":620,"y":80,"wires":[{"id":"f2650446.2a56d8","port":0}]}],"env":[{"name":"Step","type":"num","value":"30"}],"color":"#3FADB5","icon":"node-red/cog.svg"},{"id":"711cdb94.5b9a04","type":"subflow","name":"Decide Quality of Ping","info":"","category":"Abandoned Subflows","in":[{"x":40,"y":100,"wires":[{"id":"5117f3ab.9484cc"}]}],"out":[],"env":[],"color":"#FDF0C2"},{"id":"76e3605b.0e6e7","type":"subflow","name":"Process Ping Results To Local Files","info":"","category":"Mike Subflows","in":[{"x":20,"y":140,"wires":[{"id":"7c6b7df4.a02714"}]}],"out":[],"env":[],"color":"#0cad0c"},{"id":"aba876af.3a45e8","type":"subflow","name":"Ping, Write Down to Google and send Result to Process Ping Results","info":"","category":"Mike Subflows","in":[{"x":20,"y":100,"wires":[{"id":"81b5485a.3abc58"}]}],"out":[],"env":[],"color":"#C7E9C0","status":{"x":1220,"y":520,"wires":[{"id":"ffcbe690.d32758","port":0}]}},{"id":"c3686304.f6d31","type":"subflow","name":"Backup all 4 Hubitats using Bash Script","info":"","category":"Mike Subflows","in":[{"x":60,"y":80,"wires":[{"id":"dae3700e.3752"}]}],"out":[],"env":[],"color":"#0cad0c"},{"id":"a73af62e.c418b8","type":"subflow","name":"Monitor All Hubitat Devices","info":"","category":"Mike Subflows","in":[{"x":40,"y":40,"wires":[{"id":"7ec6233c.30bd0c"}]}],"out":[],"env":[],"color":"#FDF0C2","status":{"x":2060,"y":1280,"wires":[{"id":"377f4ebf.3750b2","port":0}]}},{"id":"f9a34738.f12c28","type":"subflow","name":"Old Monitor All Homebridge Native Devices","info":"","category":"Mike Subflows","in":[{"x":60,"y":40,"wires":[{"id":"4f285b5d.c38f54"}]}],"out":[],"env":[],"color":"#FDF0C2","status":{"x":3590,"y":440,"wires":[{"id":"e648e029.afc3a","port":0}]}},{"id":"d8750012.11f37","type":"subflow","name":"Send Data to InfluxDB","info":"","category":"","in":[{"x":50,"y":30,"wires":[{"id":"ab91d8ac.6e4a78"}]}],"out":[],"env":[],"color":"#DDAA99"},{"id":"72970ac0.70cf94","type":"subflow","name":"Lookup Data from Excel","info":"","category":"","in":[{"x":50,"y":80,"wires":[{"id":"957294dc.580f68"}]}],"out":[{"x":590,"y":67,"wires":[{"id":"957294dc.580f68","port":0}]},{"x":650,"y":80,"wires":[{"id":"957294dc.580f68","port":1}]},{"x":710,"y":97,"wires":[{"id":"957294dc.580f68","port":2}]}],"env":[],"color":"#DDAA99","inputLabels":["Info for Lookup"],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"f14b69ba.8b2da8","type":"subflow","name":"Monitor Zigbee2MQTT Devices","info":"","category":"Mike Subflows","in":[{"x":40,"y":40,"wires":[{"id":"1263d8e6.0b9287"},{"id":"d17934c7.820378"}]}],"out":[],"env":[],"color":"#FDF0C2","status":{"x":1500,"y":760,"wires":[{"id":"e90820c6.94152","port":0}]}},{"id":"ca5ba022.63ec4","type":"subflow","name":"Lookup Data from Excel KV Input Object Output","info":"","category":"","in":[{"x":50,"y":80,"wires":[{"id":"3a09b091.66244"}]}],"out":[{"x":590,"y":67,"wires":[{"id":"3a09b091.66244","port":0}]},{"x":650,"y":80,"wires":[{"id":"3a09b091.66244","port":1}]},{"x":710,"y":97,"wires":[{"id":"3a09b091.66244","port":2}]}],"env":[],"color":"#DDAA99","inputLabels":["Info for Lookup"],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"32252d88.e55b52","type":"subflow","name":"Read Spreadsheet For Details","info":"# **Preconditions**\nMake sure that the credentials for the read input from GSheet node are for an account that has access to the spreadsheets that will be passed to the subflow.\n## **Inputs**\nThe subflow takes as inputs in 3 ways.\n### **Default Environment Variables**\nThese are used if neither of the other options turn on their override variable. It is important to realize however the configuration is only for the authors own spreadsheet so it is unlikely that you will have access to this spreadsheet and so must at a minimum update the spreadsheet id to your own spreadsheet. Changing these values from within the subnode impacts all uses of the subnode when not overridden. In general it is better to use options 2 (Passed Environment Variables) or 3 (Passed Msg properties) to prevent unexpected behavior in flows not being edited.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables by default set to false as it wouldn't make sense for the default to say override the defaults.\n### **Passed Environment Variables**\nThese are used when the subflow's environment variable are specified in the calling flow at build time.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables is a key variable as it tells the subflow to ignore the subflow's global defaults and instead use those specified here.\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n## **Outputs**\n### **Output1: Error**\nPasses any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default.\n### **Output 2: Last Populated Row**\nPasses the number of the last row within the requested range that had at least 1 cell populated.\n### **Output 3: First Empty Row**\nPasses the number for the row following the last populated row. Note, while it is in theory the first empty row, if the last populated row was the last row of the input range, this subflow does not guarantee the row returned really is empty as it has not been examined.\n### **Output 4: Last Populated Column**\nPasses the letter(s) of the last column within the requested range that had at least 1 cell populated.\n### **Output 5: First Empty Column**\nPasses the letter(s) for the column following the last populated column. Note, while it is in theory the first empty column, if the last populated column was the last column of the input range, this subflow does not guarantee the column returned really is empty as it has not been examined.\n### **Output 6: Full Data**\nPasses the array that contains the data retrieved from the Google Sheet.\n### **Output 7: Full Data with Inputs**\nReturns same information as Option 6, but does so without removing the msg properties that drove the retrieval process.","category":"Mike Subflows","in":[{"x":40,"y":20,"wires":[{"id":"b36306d5.1140f8"}]}],"out":[{"x":1060,"y":60,"wires":[{"id":"6b34896c.b7c258","port":0}]},{"x":1060,"y":140,"wires":[{"id":"19295ae9.4a7b45","port":0}]},{"x":1060,"y":220,"wires":[{"id":"2427fd2f.a3a022","port":0}]},{"x":1060,"y":300,"wires":[{"id":"77f0a296.84470c","port":0}]},{"x":1060,"y":380,"wires":[{"id":"17bd8e89.be33f1","port":0}]},{"x":1060,"y":460,"wires":[{"id":"d2a14166.06197","port":0}]},{"x":1060,"y":540,"wires":[{"id":"aa6d1a78.1abaa8","port":0}]},{"x":1060,"y":620,"wires":[{"id":"5d994f24.7baba","port":0}]}],"env":[{"name":"Spreadsheet ID","type":"str","value":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","ui":{"icon":"font-awesome/fa-file-excel-o","type":"input","opts":{"types":["str"]}}},{"name":"TabName","type":"str","value":"Devices","ui":{"icon":"font-awesome/fa-table","label":{"en-US":"Tab"},"type":"input","opts":{"types":["str"]}}},{"name":"ColStart","type":"str","value":"A","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]}}},{"name":"ColEnd","type":"str","value":"Z","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]}}},{"name":"MinRow","type":"num","value":"1","ui":{"icon":"font-awesome/fa-window-minimize","type":"input","opts":{"types":["num"]}}},{"name":"MaxRow","type":"num","value":"1000","ui":{"icon":"font-awesome/fa-window-maximize","type":"input","opts":{"types":["num"]}}},{"name":"OverrideEnvVariables","type":"bool","value":"false"}],"color":"#0cad0c","outputLabels":["Error","Last Populated Row","First Empty Row","Last Populated Column","First Empty Column","Spreadsheet Array","Full Data","Full Data with Inputs"],"icon":"font-awesome/fa-file-excel-o"},{"id":"809a2e43.861b6","type":"subflow","name":"Read Spreadsheet For Details (2)","info":"# **Preconditions**\nMake sure that the credentials for the read input from GSheet node are for an account that has access to the spreadsheets that will be passed to the subflow.\n## **Inputs**\nThe subflow takes as inputs in 3 ways.\n### **Default Environment Variables**\nThese are used if neither of the other options turn on their override variable. It is important to realize however the configuration is only for the authors own spreadsheet so it is unlikely that you will have access to this spreadsheet and so must at a minimum update the spreadsheet id to your own spreadsheet. Changing these values from within the subnode impacts all uses of the subnode when not overridden. In general it is better to use options 2 (Passed Environment Variables) or 3 (Passed Msg properties) to prevent unexpected behavior in flows not being edited.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables by default set to false as it wouldn't make sense for the default to say override the defaults.\n### **Passed Environment Variables**\nThese are used when the subflow's environment variable are specified in the calling flow at build time.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables is a key variable as it tells the subflow to ignore the subflow's global defaults and instead use those specified here.\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n## **Outputs**\n### **Output1: Error**\nPasses any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default.\n### **Output 2: Last Populated Row**\nPasses the number of the last row within the requested range that had at least 1 cell populated.\n### **Output 3: First Empty Row**\nPasses the number for the row following the last populated row. Note, while it is in theory the first empty row, if the last populated row was the last row of the input range, this subflow does not guarantee the row returned really is empty as it has not been examined.\n### **Output 4: Last Populated Column**\nPasses the letter(s) of the last column within the requested range that had at least 1 cell populated.\n### **Output 5: First Empty Column**\nPasses the letter(s) for the column following the last populated column. Note, while it is in theory the first empty column, if the last populated column was the last column of the input range, this subflow does not guarantee the column returned really is empty as it has not been examined.\n### **Output 6: Full Data**\nPasses the array that contains the data retrieved from the Google Sheet.\n### **Output 7: Full Data with Inputs**\nReturns same information as Option 6, but does so without removing the msg properties that drove the retrieval process.","category":"Mike Subflows","in":[{"x":40,"y":20,"wires":[{"id":"9d08adeb.8b976"}]}],"out":[{"x":1060,"y":60,"wires":[{"id":"3ccf56cb.4c037a","port":0}]},{"x":1060,"y":140,"wires":[{"id":"d8658c5a.0a5ce","port":0}]},{"x":1060,"y":220,"wires":[{"id":"8b790e84.fc65e","port":0}]},{"x":1060,"y":300,"wires":[{"id":"1efad89c.adecf7","port":0}]},{"x":1060,"y":380,"wires":[{"id":"1fc02d15.67a363","port":0}]},{"x":1060,"y":460,"wires":[{"id":"f17df7e0.9c87e8","port":0}]},{"x":1060,"y":540,"wires":[{"id":"115f090d.01a1c7","port":0}]},{"x":1060,"y":620,"wires":[{"id":"71231cd6.a786c4","port":0}]}],"env":[{"name":"Spreadsheet ID","type":"str","value":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","ui":{"icon":"font-awesome/fa-file-excel-o","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"TabName","type":"str","value":"Devices","ui":{"icon":"font-awesome/fa-table","label":{"en-US":"Tab"},"type":"input","opts":{"types":["str"]}}},{"name":"ColStart","type":"str","value":"A","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"ColEnd","type":"str","value":"Z","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"MinRow","type":"num","value":"1","ui":{"icon":"font-awesome/fa-window-minimize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"MaxRow","type":"num","value":"1000","ui":{"icon":"font-awesome/fa-window-maximize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"OverrideEnvVariables","type":"bool","value":"false"}],"color":"#0cad0c","outputLabels":["Error","Last Populated Row","First Empty Row","Last Populated Column","First Empty Column","Spreadsheet Array","Full Data","Full Data with Inputs"],"icon":"font-awesome/fa-file-excel-o"},{"id":"d078e2a6.ea488","type":"subflow","name":"Lookup Desired Data","info":"# Preconditions\nThis subflow is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows. There are multiple levels of caching within this subflow.\n\nFirst it looks to see if the exact same combination of search key value pairs and desired lookup keys have been found in the last 5 seconds. If so it just copies the search results.\n\nThe second level of caching is that the lookup is attempted against a locally cached set of the data. The data is cached in a memory global variable, so if Node-Red is restarted this cache will be empty. Additionally, any flow can delete the global variable. This level is valuable because memory lookup is much faster than a call to Google Sheets which may not even be available in case of internet outage.\n\nFinally, if the data is not locally, then this subflow will use the provided inputs to pull the data from its ultimate storage site (a Google Sheets spreadsheet).\n\nThis subflow assumes that the format will come in with the sorts of inputs show in the examples of preformatted inputs.\n\nThis flow requires the read spreadsheet for details subflow node exists and ....\n\n\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\n\n\n\n\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the subflow has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nFor the subflow, this is intended to be informational. This says the subflow will be trying to load the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nFor the subflow, this output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure.","category":"Mike Subflows","in":[{"x":50,"y":80,"wires":[{"id":"4ca5af11.b84a7"}]}],"out":[{"x":480,"y":67,"wires":[{"id":"4ca5af11.b84a7","port":0}]},{"x":540,"y":79,"wires":[{"id":"4ca5af11.b84a7","port":1}]},{"x":600,"y":91,"wires":[{"id":"4ca5af11.b84a7","port":2}]}],"env":[],"color":"#0cad0c","inputLabels":["Info for Lookup"],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"88b1bb66.b78488","type":"subflow","name":"Read Spreadsheet For Details (3)","info":"# **Preconditions**\nMake sure that the credentials for the read input from GSheet node are for an account that has access to the spreadsheets that will be passed to the subflow.\n## **Inputs**\nThe subflow takes as inputs in 3 ways.\n### **Default Environment Variables**\nThese are used if neither of the other options turn on their override variable. It is important to realize however the configuration is only for the authors own spreadsheet so it is unlikely that you will have access to this spreadsheet and so must at a minimum update the spreadsheet id to your own spreadsheet. Changing these values from within the subnode impacts all uses of the subnode when not overridden. In general it is better to use options 2 (Passed Environment Variables) or 3 (Passed Msg properties) to prevent unexpected behavior in flows not being edited.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables by default set to false as it wouldn't make sense for the default to say override the defaults.\n### **Passed Environment Variables**\nThese are used when the subflow's environment variable are specified in the calling flow at build time.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables is a key variable as it tells the subflow to ignore the subflow's global defaults and instead use those specified here.\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n## **Outputs**\n### **Output1: Error**\nPasses any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default.\n### **Output 2: Last Populated Row**\nPasses the number of the last row within the requested range that had at least 1 cell populated.\n### **Output 3: First Empty Row**\nPasses the number for the row following the last populated row. Note, while it is in theory the first empty row, if the last populated row was the last row of the input range, this subflow does not guarantee the row returned really is empty as it has not been examined.\n### **Output 4: Last Populated Column**\nPasses the letter(s) of the last column within the requested range that had at least 1 cell populated.\n### **Output 5: First Empty Column**\nPasses the letter(s) for the column following the last populated column. Note, while it is in theory the first empty column, if the last populated column was the last column of the input range, this subflow does not guarantee the column returned really is empty as it has not been examined.\n### **Output 6: Full Data**\nPasses the array that contains the data retrieved from the Google Sheet.\n### **Output 7: Full Data with Inputs**\nReturns same information as Option 6, but does so without removing the msg properties that drove the retrieval process.","category":"Mike Subflows","in":[{"x":40,"y":20,"wires":[{"id":"2d499f0.10a2b62"}]}],"out":[{"x":1060,"y":60,"wires":[{"id":"56c3aeb2.ff1f4","port":0}]},{"x":1060,"y":140,"wires":[{"id":"c7139127.7efa8","port":0}]},{"x":1060,"y":220,"wires":[{"id":"e336bdeb.a1ed4","port":0}]},{"x":1060,"y":300,"wires":[{"id":"ddb445f3.4541d8","port":0}]},{"x":1060,"y":380,"wires":[{"id":"89a29d6e.b7516","port":0}]},{"x":1060,"y":460,"wires":[{"id":"dc118d10.32edb","port":0}]},{"x":1060,"y":540,"wires":[{"id":"d1e7b582.91d168","port":0}]},{"x":1060,"y":620,"wires":[{"id":"c2f995a2.54ffd8","port":0}]}],"env":[{"name":"Spreadsheet ID","type":"str","value":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","ui":{"icon":"font-awesome/fa-file-excel-o","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"TabName","type":"str","value":"Devices","ui":{"icon":"font-awesome/fa-table","label":{"en-US":"Tab"},"type":"input","opts":{"types":["str"]}}},{"name":"ColStart","type":"str","value":"A","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"ColEnd","type":"str","value":"Z","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"MinRow","type":"num","value":"1","ui":{"icon":"font-awesome/fa-window-minimize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"MaxRow","type":"num","value":"1000","ui":{"icon":"font-awesome/fa-window-maximize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"OverrideEnvVariables","type":"bool","value":"false"}],"color":"#0cad0c","outputLabels":["Error","Last Populated Row","First Empty Row","Last Populated Column","First Empty Column","Spreadsheet Array","Full Data","Full Data with Inputs"],"icon":"font-awesome/fa-file-excel-o"},{"id":"2a6ce360.19688c","type":"subflow","name":"Lookup Desired Data (2)","info":"# Preconditions\nThis subflow is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows. There are multiple levels of caching within this subflow.\n\nFirst it looks to see if the exact same combination of search key value pairs and desired lookup keys have been found in the last 5 seconds. If so it just copies the search results.\n\nThe second level of caching is that the lookup is attempted against a locally cached set of the data. The data is cached in a memory global variable, so if Node-Red is restarted this cache will be empty. Additionally, any flow can delete the global variable. This level is valuable because memory lookup is much faster than a call to Google Sheets which may not even be available in case of internet outage.\n\nFinally, if the data is not locally, then this subflow will use the provided inputs to pull the data from its ultimate storage site (a Google Sheets spreadsheet).\n\nThis subflow assumes that the format will come in with the sorts of inputs show in the examples of preformatted inputs.\n\nThis flow requires the read spreadsheet for details subflow node exists and ....\n\n\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\n\n\n\n\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the subflow has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nFor the subflow, this is intended to be informational. This says the subflow will be trying to load the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nFor the subflow, this output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure.","category":"Mike Subflows","in":[{"x":50,"y":80,"wires":[{"id":"e81b20c8.9dbf5"}]}],"out":[{"x":480,"y":67,"wires":[{"id":"e81b20c8.9dbf5","port":0}]},{"x":540,"y":79,"wires":[{"id":"e81b20c8.9dbf5","port":1}]},{"x":600,"y":91,"wires":[{"id":"e81b20c8.9dbf5","port":2}]}],"env":[],"color":"#FDF0C2","inputLabels":["Info for Lookup"],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"c5ccb11d.87221","type":"subflow","name":"Read Spreadsheet For Details (4)","info":"# **Preconditions**\nMake sure that the credentials for the read input from GSheet node are for an account that has access to the spreadsheets that will be passed to the subflow.\n## **Inputs**\nThe subflow takes as inputs in 3 ways.\n### **Default Environment Variables**\nThese are used if neither of the other options turn on their override variable. It is important to realize however the configuration is only for the authors own spreadsheet so it is unlikely that you will have access to this spreadsheet and so must at a minimum update the spreadsheet id to your own spreadsheet. Changing these values from within the subnode impacts all uses of the subnode when not overridden. In general it is better to use options 2 (Passed Environment Variables) or 3 (Passed Msg properties) to prevent unexpected behavior in flows not being edited.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables by default set to false as it wouldn't make sense for the default to say override the defaults.\n### **Passed Environment Variables**\nThese are used when the subflow's environment variable are specified in the calling flow at build time.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables is a key variable as it tells the subflow to ignore the subflow's global defaults and instead use those specified here.\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n## **Outputs**\n### **Output1: Error**\nPasses any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default.\n### **Output 2: Last Populated Row**\nPasses the number of the last row within the requested range that had at least 1 cell populated.\n### **Output 3: First Empty Row**\nPasses the number for the row following the last populated row. Note, while it is in theory the first empty row, if the last populated row was the last row of the input range, this subflow does not guarantee the row returned really is empty as it has not been examined.\n### **Output 4: Last Populated Column**\nPasses the letter(s) of the last column within the requested range that had at least 1 cell populated.\n### **Output 5: First Empty Column**\nPasses the letter(s) for the column following the last populated column. Note, while it is in theory the first empty column, if the last populated column was the last column of the input range, this subflow does not guarantee the column returned really is empty as it has not been examined.\n### **Output 6: Full Data**\nPasses the array that contains the data retrieved from the Google Sheet.\n### **Output 7: Full Data with Inputs**\nReturns same information as Option 6, but does so without removing the msg properties that drove the retrieval process.","category":"Mike Subflows","in":[{"x":40,"y":20,"wires":[{"id":"74eef5f0.8ccdbc"}]}],"out":[{"x":1060,"y":60,"wires":[{"id":"64cd2a10.a267c4","port":0}]},{"x":1060,"y":140,"wires":[{"id":"99ff283b.587b38","port":0}]},{"x":1060,"y":220,"wires":[{"id":"5d7a9aee.af6c34","port":0}]},{"x":1060,"y":300,"wires":[{"id":"2fa1add7.1958f2","port":0}]},{"x":1060,"y":380,"wires":[{"id":"5b88e253.4c4f2c","port":0}]},{"x":1060,"y":460,"wires":[{"id":"e965d93a.aff398","port":0}]},{"x":1060,"y":540,"wires":[{"id":"b383d4a7.b31098","port":0}]},{"x":1060,"y":620,"wires":[{"id":"4a364e2.bc44db","port":0}]}],"env":[{"name":"Spreadsheet ID","type":"str","value":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","ui":{"icon":"font-awesome/fa-file-excel-o","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"TabName","type":"str","value":"Devices","ui":{"icon":"font-awesome/fa-table","label":{"en-US":"Tab"},"type":"input","opts":{"types":["str"]}}},{"name":"ColStart","type":"str","value":"A","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"ColEnd","type":"str","value":"Z","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"MinRow","type":"num","value":"1","ui":{"icon":"font-awesome/fa-window-minimize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"MaxRow","type":"num","value":"1000","ui":{"icon":"font-awesome/fa-window-maximize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"OverrideEnvVariables","type":"bool","value":"false"}],"color":"#0cad0c","outputLabels":["Error","Last Populated Row","First Empty Row","Last Populated Column","First Empty Column","Spreadsheet Array","Full Data","Full Data with Inputs"],"icon":"font-awesome/fa-file-excel-o"},{"id":"20c22900.896628","type":"subflow","name":"Lookup Desired Data (3)","info":"# Preconditions\nThis subflow is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows. There are multiple levels of caching within this subflow.\n\nFirst it looks to see if the exact same combination of search key value pairs and desired lookup keys have been found in the last 5 seconds. If so it just copies the search results.\n\nThe second level of caching is that the lookup is attempted against a locally cached set of the data. The data is cached in a memory global variable, so if Node-Red is restarted this cache will be empty. Additionally, any flow can delete the global variable. This level is valuable because memory lookup is much faster than a call to Google Sheets which may not even be available in case of internet outage.\n\nFinally, if the data is not locally, then this subflow will use the provided inputs to pull the data from its ultimate storage site (a Google Sheets spreadsheet).\n\nThis subflow assumes that the format will come in with the sorts of inputs show in the examples of preformatted inputs.\n\nThis flow requires the read spreadsheet for details subflow node exists and ....\n\n\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\n\n\n\n\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the subflow has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nFor the subflow, this is intended to be informational. This says the subflow will be trying to load the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nFor the subflow, this output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure.","category":"Mike Subflows","in":[{"x":50,"y":80,"wires":[{"id":"dbf60bd1.e6d018"}]}],"out":[{"x":480,"y":67,"wires":[{"id":"dbf60bd1.e6d018","port":0}]},{"x":540,"y":79,"wires":[{"id":"dbf60bd1.e6d018","port":1}]},{"x":600,"y":91,"wires":[{"id":"dbf60bd1.e6d018","port":2}]}],"env":[],"color":"#FDF0C2","inputLabels":["Info for Lookup"],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"d663491c.25a828","type":"subflow","name":"Read Spreadsheet For Details (4) (2)","info":"# **Preconditions**\nMake sure that the credentials for the read input from GSheet node are for an account that has access to the spreadsheets that will be passed to the subflow.\n## **Inputs**\nThe subflow takes as inputs in 3 ways.\n### **Default Environment Variables**\nThese are used if neither of the other options turn on their override variable. It is important to realize however the configuration is only for the authors own spreadsheet so it is unlikely that you will have access to this spreadsheet and so must at a minimum update the spreadsheet id to your own spreadsheet. Changing these values from within the subnode impacts all uses of the subnode when not overridden. In general it is better to use options 2 (Passed Environment Variables) or 3 (Passed Msg properties) to prevent unexpected behavior in flows not being edited.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables by default set to false as it wouldn't make sense for the default to say override the defaults.\n### **Passed Environment Variables**\nThese are used when the subflow's environment variable are specified in the calling flow at build time.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables is a key variable as it tells the subflow to ignore the subflow's global defaults and instead use those specified here.\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n## **Outputs**\n### **Output1: Error**\nPasses any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default.\n### **Output 2: Last Populated Row**\nPasses the number of the last row within the requested range that had at least 1 cell populated.\n### **Output 3: First Empty Row**\nPasses the number for the row following the last populated row. Note, while it is in theory the first empty row, if the last populated row was the last row of the input range, this subflow does not guarantee the row returned really is empty as it has not been examined.\n### **Output 4: Last Populated Column**\nPasses the letter(s) of the last column within the requested range that had at least 1 cell populated.\n### **Output 5: First Empty Column**\nPasses the letter(s) for the column following the last populated column. Note, while it is in theory the first empty column, if the last populated column was the last column of the input range, this subflow does not guarantee the column returned really is empty as it has not been examined.\n### **Output 6: Full Data**\nPasses the array that contains the data retrieved from the Google Sheet.\n### **Output 7: Full Data with Inputs**\nReturns same information as Option 6, but does so without removing the msg properties that drove the retrieval process.","category":"Mike Subflows","in":[{"x":40,"y":20,"wires":[{"id":"ab6529c.1531ed8"}]}],"out":[{"x":1060,"y":60,"wires":[{"id":"4d8a4132.a5994","port":0}]},{"x":1060,"y":140,"wires":[{"id":"33c4567d.d9c6ca","port":0}]},{"x":1060,"y":220,"wires":[{"id":"1aa4aac9.9051a5","port":0}]},{"x":1060,"y":300,"wires":[{"id":"b6ba033f.ff1c7","port":0}]},{"x":1060,"y":380,"wires":[{"id":"c4235ad0.b726a8","port":0}]},{"x":1060,"y":460,"wires":[{"id":"c4d8e16c.be2b1","port":0}]},{"x":1060,"y":540,"wires":[{"id":"4d35b8ed.52e478","port":0}]},{"x":1060,"y":620,"wires":[{"id":"a4266569.899ef8","port":0}]}],"env":[{"name":"Spreadsheet ID","type":"str","value":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","ui":{"icon":"font-awesome/fa-file-excel-o","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"TabName","type":"str","value":"Devices","ui":{"icon":"font-awesome/fa-table","label":{"en-US":"Tab"},"type":"input","opts":{"types":["str"]}}},{"name":"ColStart","type":"str","value":"A","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"ColEnd","type":"str","value":"Z","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"MinRow","type":"num","value":"1","ui":{"icon":"font-awesome/fa-window-minimize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"MaxRow","type":"num","value":"1000","ui":{"icon":"font-awesome/fa-window-maximize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"OverrideEnvVariables","type":"bool","value":"false"}],"color":"#0cad0c","outputLabels":["Error","Last Populated Row","First Empty Row","Last Populated Column","First Empty Column","Spreadsheet Array","Full Data","Full Data with Inputs"],"icon":"font-awesome/fa-file-excel-o"},{"id":"cddaccaf.e0a04","type":"subflow","name":"Lookup Desired Data (3) (2)","info":"# Preconditions\nThis subflow is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows. There are multiple levels of caching within this subflow.\n\nFirst it looks to see if the exact same combination of search key value pairs and desired lookup keys have been found in the last 5 seconds. If so it just copies the search results.\n\nThe second level of caching is that the lookup is attempted against a locally cached set of the data. The data is cached in a memory global variable, so if Node-Red is restarted this cache will be empty. Additionally, any flow can delete the global variable. This level is valuable because memory lookup is much faster than a call to Google Sheets which may not even be available in case of internet outage.\n\nFinally, if the data is not locally, then this subflow will use the provided inputs to pull the data from its ultimate storage site (a Google Sheets spreadsheet).\n\nThis subflow assumes that the format will come in with the sorts of inputs show in the examples of preformatted inputs.\n\nThis flow requires the read spreadsheet for details subflow node exists and ....\n\n\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\n\n\n\n\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the subflow has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nFor the subflow, this is intended to be informational. This says the subflow will be trying to load the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nFor the subflow, this output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure.","category":"Mike Subflows","in":[{"x":50,"y":80,"wires":[{"id":"1e91ae7e.712612"}]}],"out":[{"x":480,"y":67,"wires":[{"id":"1e91ae7e.712612","port":0}]},{"x":540,"y":79,"wires":[{"id":"1e91ae7e.712612","port":1}]},{"x":600,"y":91,"wires":[{"id":"1e91ae7e.712612","port":2}]}],"env":[],"color":"#FDF0C2","inputLabels":["Info for Lookup"],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"ff6040a4.0af3a","type":"subflow","name":"Monitor All Homebridge Native Devices","info":"","category":"Mike Subflows","in":[{"x":60,"y":40,"wires":[{"id":"4acb0da3.b878e4"}]}],"out":[],"env":[],"color":"#FDF0C2","status":{"x":2940,"y":2900,"wires":[{"id":"b0b991e.c80e67","port":0}]}},{"id":"b6874b18.031658","type":"subflow","name":"Read Spreadsheet For Details (final 6/2?)","info":"# **Preconditions**\nMake sure that the credentials for the read input from GSheet node are for an account that has access to the spreadsheets that will be passed to the subflow.\n## **Inputs**\nThe subflow takes as inputs in 3 ways.\n### **Default Environment Variables**\nThese are used if neither of the other options turn on their override variable. It is important to realize however the configuration is only for the authors own spreadsheet so it is unlikely that you will have access to this spreadsheet and so must at a minimum update the spreadsheet id to your own spreadsheet. Changing these values from within the subnode impacts all uses of the subnode when not overridden. In general it is better to use options 2 (Passed Environment Variables) or 3 (Passed Msg properties) to prevent unexpected behavior in flows not being edited.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables by default set to false as it wouldn't make sense for the default to say override the defaults.\n### **Passed Environment Variables**\nThese are used when the subflow's environment variable are specified in the calling flow at build time.\n - Spreadsheet ID for the spreadsheet\n - TabName for the tab within that spreadsheet\n - ColStart for the letter(s) of the leftmost column\n - ColEnd for the letter(s) of rightmost column\n - MinRow for the number of the first row\n - MaxRow for the number of the last row\n - OverrideEnvVariables is a key variable as it tells the subflow to ignore the subflow's global defaults and instead use those specified here.\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n## **Outputs**\n### **Output1: Error**\nPasses any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default.\n### **Output 2: Last Populated Row**\nPasses the number of the last row within the requested range that had at least 1 cell populated.\n### **Output 3: First Empty Row**\nPasses the number for the row following the last populated row. Note, while it is in theory the first empty row, if the last populated row was the last row of the input range, this subflow does not guarantee the row returned really is empty as it has not been examined.\n### **Output 4: Last Populated Column**\nPasses the letter(s) of the last column within the requested range that had at least 1 cell populated.\n### **Output 5: First Empty Column**\nPasses the letter(s) for the column following the last populated column. Note, while it is in theory the first empty column, if the last populated column was the last column of the input range, this subflow does not guarantee the column returned really is empty as it has not been examined.\n### **Output 6: Full Data**\nPasses the array that contains the data retrieved from the Google Sheet.\n### **Output 7: Full Data with Inputs**\nReturns same information as Option 6, but does so without removing the msg properties that drove the retrieval process.","category":"Mike Subflows","in":[{"x":40,"y":20,"wires":[{"id":"daba477c.d0b948"}]}],"out":[{"x":1060,"y":60,"wires":[{"id":"8f22cf12.4d74","port":0}]},{"x":1060,"y":140,"wires":[{"id":"79b3124e.18036c","port":0}]},{"x":1060,"y":220,"wires":[{"id":"56be010e.c2e1e","port":0}]},{"x":1060,"y":300,"wires":[{"id":"1a59a46b.8ee7cc","port":0}]},{"x":1060,"y":380,"wires":[{"id":"1ad4dcad.4bea93","port":0}]},{"x":1060,"y":460,"wires":[{"id":"d23fbda5.934a8","port":0}]},{"x":1060,"y":540,"wires":[{"id":"a801b477.ec11b8","port":0}]},{"x":1060,"y":620,"wires":[{"id":"7c39f16.0e7151","port":0}]}],"env":[{"name":"Spreadsheet ID","type":"str","value":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","ui":{"icon":"font-awesome/fa-file-excel-o","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"TabName","type":"str","value":"Devices","ui":{"icon":"font-awesome/fa-table","label":{"en-US":"Tab"},"type":"input","opts":{"types":["str"]}}},{"name":"ColStart","type":"str","value":"A","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"ColEnd","type":"str","value":"Z","ui":{"icon":"font-awesome/fa-columns","type":"input","opts":{"types":["str"]},"label":{}}},{"name":"MinRow","type":"num","value":"1","ui":{"icon":"font-awesome/fa-window-minimize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"MaxRow","type":"num","value":"1000","ui":{"icon":"font-awesome/fa-window-maximize","type":"input","opts":{"types":["num"]},"label":{}}},{"name":"OverrideEnvVariables","type":"bool","value":"false"}],"color":"#0cad0c","outputLabels":["Error","Last Populated Row","First Empty Row","Last Populated Column","First Empty Column","Spreadsheet Array","Full Data","Full Data with Inputs"],"icon":"font-awesome/fa-file-excel-o"},{"id":"11c4fe96.587e41","type":"subflow","name":"Lookup Desired Data (Final 6/2?)","info":"# Preconditions\nThis subflow is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows. There are multiple levels of caching within this subflow.\n\nFirst it looks to see if the exact same combination of search key value pairs and desired lookup keys have been found in the last 5 seconds. If so it just copies the search results.\n\nThe second level of caching is that the lookup is attempted against a locally cached set of the data. The data is cached in a memory global variable, so if Node-Red is restarted this cache will be empty. Additionally, any flow can delete the global variable. This level is valuable because memory lookup is much faster than a call to Google Sheets which may not even be available in case of internet outage.\n\nFinally, if the data is not locally, then this subflow will use the provided inputs to pull the data from its ultimate storage site (a Google Sheets spreadsheet).\n\nThis subflow assumes that the format will come in with the sorts of inputs show in the examples of preformatted inputs.\n\nThis flow requires the read spreadsheet for details subflow node exists and ....\n\n\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n\n### **Setting Passed as Msg Properties**\nThese are used when the subflow's configuration should be driven by data populated at runtime. The inputs to do this are:\n - msg.IgnoreEnvVar is the boolean that says override the environment variables and use these properties\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\n\n\n\n\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the subflow has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nFor the subflow, this is intended to be informational. This says the subflow will be trying to load the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nFor the subflow, this output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure.","category":"Mike Subflows","in":[{"x":50,"y":80,"wires":[{"id":"36c11796.981068"}]}],"out":[{"x":480,"y":67,"wires":[{"id":"36c11796.981068","port":0}]},{"x":540,"y":79,"wires":[{"id":"36c11796.981068","port":1}]},{"x":600,"y":91,"wires":[{"id":"36c11796.981068","port":2}]}],"env":[],"color":"#FDF0C2","inputLabels":["Info for Lookup"],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"2f23f49.924a10c","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey"}},"site":{"name":"Mike's Production Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"true","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"3ce7ceed.69be02","type":"homekit-bridge","z":"","bridgeName":"Mike","pinCode":"121-01-707","port":"","allowInsecureRequest":true,"manufacturer":"TMS Industries","model":"1","serialNo":"1","customMdnsConfig":false,"mdnsMulticast":true,"mdnsInterface":"","mdnsPort":"","mdnsIp":"","mdnsTtl":"","mdnsLoopback":true,"mdnsReuseAddr":true,"allowMessagePassthrough":true},{"id":"a5bf81ee.27852","type":"mqtt-broker","z":"","name":"MQTT Docker","broker":"192.168.86.3","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"adb4e9b8.8beee8","type":"gauth","z":""},{"id":"430b7850.44c1a8","type":"influxdb","z":"","hostname":"127.0.0.1","port":"8086","protocol":"http","database":"MikeTestFromNR","name":"","usetls":false,"tls":""},{"id":"55e4481a.722098","type":"hubitat config","z":"","name":"Main Hub (110) Maker Production Node Red","usetls":false,"host":"192.168.86.110","port":"80","appId":"646","nodeRedServer":"http://192.168.86.3:1980","webhookPath":"/hubitat/prodwebhook/","autoRefresh":true},{"id":"b862b36a.1a11d","type":"influxdb","z":"","hostname":"127.0.0.1","port":"8086","protocol":"http","database":"MikeTestFromNR","name":"","usetls":false,"tls":""},{"id":"18f340fe.a70a3f","type":"ui_group","z":"","name":"Control","tab":"429e5ab.771c5a4","order":1,"disp":false,"width":"27","collapse":false},{"id":"8abf2e02.5fe9f","type":"ui_group","name":"Group 5","tab":"d5ea0f3.4753bf","order":4,"disp":true,"width":6},{"id":"60c16cd3.e9d974","type":"ui_spacer","name":"spacer","group":"8abf2e02.5fe9f","order":2,"width":1,"height":1},{"id":"9e60bee8.9eb17","type":"ui_spacer","name":"spacer","group":"8abf2e02.5fe9f","order":3,"width":1,"height":1},{"id":"429e5ab.771c5a4","type":"ui_tab","z":"","name":"Radar","icon":"dashboard","order":1,"disabled":false,"hidden":false},{"id":"4baf1468.abb01c","type":"ui_group","z":"","name":"Airport Filters","tab":"429e5ab.771c5a4","order":4,"disp":true,"width":"6","collapse":true},{"id":"9cbb54f5.392db8","type":"ui_group","z":"","name":"Aircraft Filters","tab":"429e5ab.771c5a4","order":5,"disp":true,"width":"6","collapse":true},{"id":"c7810244.5e40a","type":"ui_group","z":"","name":"Map","tab":"429e5ab.771c5a4","order":2,"disp":false,"width":"17","collapse":false},{"id":"a68c0105.e9c7e","type":"ui_tab","z":"","name":"Table Holder","icon":"dashboard","order":6,"disabled":false,"hidden":false},{"id":"e298b809.c3c2f8","type":"ui_group","z":"","name":"Before/After Modification","tab":"a68c0105.e9c7e","order":2,"disp":true,"width":"22","collapse":true},{"id":"1a94010f.a3b71f","type":"ui_tab","z":"","name":"Home","icon":"dashboard","disabled":false,"hidden":false},{"id":"2a128af6.d72c46","type":"ui_group","z":"","name":"After Modification","tab":"a68c0105.e9c7e","order":3,"disp":false,"width":"22","collapse":false},{"id":"602d7c75.e52ed4","type":"ui_group","z":"","name":"Radar Console","tab":"429e5ab.771c5a4","order":3,"disp":true,"width":"6","collapse":false},{"id":"a4570963.5547f8","type":"ui_group","z":"","name":"Group 3","tab":"a68c0105.e9c7e","order":1,"disp":false,"width":"3","collapse":false},{"id":"820d7886.9debb8","type":"ui_spacer","name":"spacer","group":"a4570963.5547f8","order":6,"width":"3","height":"6"},{"id":"5455b6b3.8080f8","type":"ui_spacer","name":"spacer","group":"602d7c75.e52ed4","order":3,"width":"6","height":1},{"id":"df59aa47.b26148","type":"hb-conf","z":"","username":"121-01-707"},{"id":"577b1b11.27d264","type":"influxdb","z":"","hostname":"127.0.0.1","port":"8086","protocol":"http","database":"MikeTest","name":"","usetls":false,"tls":""},{"id":"e95739a9.f90a28","type":"influxdb","z":"","hostname":"192.168.86.3","port":"8086","protocol":"http","database":"MikeTestFromNR","name":"","usetls":false,"tls":""},{"id":"39dac4b7.0333ac","type":"influxdb","z":"","hostname":"192.168.86.3","port":"8086","protocol":"http","database":"MikeTestFromNR","name":"","usetls":false,"tls":""},{"id":"82aca41a.30fed8","type":"influxdb","z":"","hostname":"192.168.86.3","port":"8086","protocol":"http","database":"MikeTestFromNR","name":"","usetls":false,"tls":""},{"id":"f2650446.2a56d8","type":"function","z":"db3a486d.c20478","name":"Step","func":"var x = env.get(\"Step\"); \nflow.set(\"$parent.Step\", x);\n\nmsg.payload = \"Your brightness increment has been set to: \" + x;\n\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":80,"wires":[[]]},{"id":"f9ce45cd.70d568","type":"rbe","z":"76e3605b.0e6e7","name":"Changing Ping?","func":"rbe","gap":"","start":"","inout":"out","property":"PingStatus","x":860,"y":100,"wires":[["23c83a68.f57316"]]},{"id":"54bcf469.64fc1c","type":"file","z":"76e3605b.0e6e7","name":"Append to NetUpPerpetual","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","encoding":"none","x":940,"y":220,"wires":[[]]},{"id":"800cd2f0.7e6fc","type":"simpletime","z":"76e3605b.0e6e7","name":"Populate Time Messages","x":150,"y":240,"wires":[["2224f154.3db68e"]]},{"id":"2224f154.3db68e","type":"change","z":"76e3605b.0e6e7","name":"Create Log Start line with Formated Date","rules":[{"t":"set","p":"payload","pt":"msg","to":"myyear\t&\"-\"&\tmymonthn\t&\"-\"&\tmydom\t&\" \"&\tmyhourpm\t&\":\"&\tmyminute\t&\":\"&\tmysecond\t&\".\"&\tmymillis\t&\" \"&\tmypm\t&\"          Log Start\"","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":440,"y":240,"wires":[["54bcf469.64fc1c","b832f02e.6f68d"]]},{"id":"7b2187a9.5139d8","type":"change","z":"76e3605b.0e6e7","name":"Get dir/file destination from Flow context","rules":[{"t":"set","p":"filename","pt":"msg","to":"$flowContext('OutputDirectory') &\tpingtarget & \".txt\"","tot":"jsonata"},{"t":"set","p":"pingtime","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":580,"y":140,"wires":[["833fda41.17b198","41c7aa38.91a0b4"]]},{"id":"f1a77239.f0493","type":"comment","z":"76e3605b.0e6e7","name":"JSONata Flow context","info":"myyear&\"-\"&mymonthn&\"-\"&mydom&\" \"&myhourpm &\":\"&myminute&\":\"&mysecond&\n\".\"&mymillis\n","x":500,"y":100,"wires":[]},{"id":"38e74b76.ec65d4","type":"change","z":"76e3605b.0e6e7","name":"Failure Start time","rules":[{"t":"set","p":"payload","pt":"msg","to":"","tot":"date"}],"action":"","property":"","from":"","to":"","reg":false,"x":150,"y":960,"wires":[["b89a96f9.f64b88","f6326890.3b8ae8","148d89ae.8a8376"]]},{"id":"c2fdf835.927178","type":"change","z":"76e3605b.0e6e7","name":"Failure End time","rules":[{"t":"set","p":"payload","pt":"msg","to":"","tot":"date"}],"action":"","property":"","from":"","to":"","reg":false,"x":580,"y":1000,"wires":[["b89a96f9.f64b88"]]},{"id":"6b07ffa.4eb28","type":"calculator","z":"76e3605b.0e6e7","name":"Calculate the difference","inputMsgField":"payload","outputMsgField":"payload","operation":"sub","constant":"","x":610,"y":1040,"wires":[["94dfb9b5.59e1a8"]]},{"id":"b89a96f9.f64b88","type":"join","z":"76e3605b.0e6e7","name":"Get start and end times","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":170,"y":1040,"wires":[["6b07ffa.4eb28"]]},{"id":"f6326890.3b8ae8","type":"delay","z":"76e3605b.0e6e7","name":"","pauseType":"random","timeout":"1300","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"milliseconds","drop":false,"x":400,"y":1000,"wires":[["c2fdf835.927178"]]},{"id":"94dfb9b5.59e1a8","type":"calculator","z":"76e3605b.0e6e7","name":"Multiply by -1 to get positive duration","inputMsgField":"payload","outputMsgField":"payload","operation":"mult","constant":"-1","x":210,"y":1080,"wires":[["2ea97499.5a805c"]]},{"id":"2ea97499.5a805c","type":"function","z":"76e3605b.0e6e7","name":"Translate Duration Function","func":"/* \n * Create Variables\n * \n */\n        var milliseconds = msg.payload;\n        var years, weeks, days, hours, minutes, seconds, millis;\n    //creating 2 string versions of each of the durations that can be in the middle of a 1:01:01.001 duration \n    //minstr is the always 2 character one\n    //lminstr is the version that can be 1 or more characers that will be used when that part is the portion of the duration\n        var minstr, secstr, millistr, lminstr, lsecstr, lmillistr;\n        var whichcomponents, readableduration;\n\n/*\n * Calculate the numbers for the subcomponents\n * \n */\n    //by getting the remainder when dividing by 1000\n    //it leaves just the fraction of milliseconds\n        millis = milliseconds % 1000;\n    //the floor function drops the decimal portion\n    //returning the non fractional seconds\n        seconds = Math.floor(milliseconds / 1000);\n    //the floor function drops the decimal portion\n    //returning the non fractional minutes\n        minutes = Math.floor(seconds / 60);\n    //Once the minutes have been calculated, then\n    //the seconds is replaced with those seconds not\n    //accounted for by the minutes\n        seconds = seconds % 60;\n    //The same sequence as used for minutes/seconds\n    //then used to calulate minutes, hours, dayss, weeks, years\n\n        hours = Math.floor(minutes / 60);\n        minutes = minutes % 60;\n        days = Math.floor(hours / 24);\n        hours = hours % 24;\n        weeks = Math.floor(days / 7)\n        days = days % 7;\n        years = Math.floor(days / 365.25)\n        weeks = weeks % 52;\n\n/*\n * Put the subcomponents into msg payloads for easy access by later nodes\n *\n */\n        msg.years = years\n        msg.weeks = weeks\n        msg.days = days\n        msg.hours = hours\n        msg.minutes = minutes\n        msg.seconds = seconds\n        msg.millis = millis\n \n\n/*\n * create the string verssion for the subcomponents\n */\n    //milliseconds\n        lmillistr = millis.toString();\n        //put padding on the milliseconds so that 1 ms shows as .001 and not .1 when concatenated after a decimal\n            millistr = millis.toString().padStart(3, \"0\");\n    //seconds\n        lsecstr = seconds.toString();\n        //put padding on the seconds so that 1 s shows as :01.000 and not :1.000 when concatenated after a dividing :\n            secstr = lsecstr.padStart(2, \"0\");\n    //minutes\n        lminstr = minutes.toString();\n        //put padding on the minutes so that 1 m shows as :01:00.000 and not :1:00.000 when concatenated after a dividing :\n            minstr = lminstr.padStart(2, \"0\");\n\n/*\n * Build output based on largest significant populated unit\n * The general rule is to include in the output the largest unit (years, weeks, days, etc) followed by the next 2\n * smaller units if the happen to be populated\n */\n    readableduration =\"\"\n//years populated\n    if (years !== 0) { \n        if (days !== 0) {\n            if (days === 1) {\n                readableduration = \" \".concat(days.toString(), \" Day\", readableduration)\n            } else {\n                readableduration = \" \".concat(days.toString(), \" Days\", readableduration)\n            }\n        }\n        if (weeks !== 0) {\n            if (weeks === 1) {\n                readableduration = \" \".concat(weeks.toString(), \" Week\", readableduration)\n            } else {\n                readableduration = \" \".concat(weeks.toString(), \" Weeks\", readableduration)\n            }\n        }\n        if (years === 1) {\n            readableduration = years.toString().concat(\" Year\", readableduration)\n        } else {\n            readableduration = years.toString().concat(\" Years\", readableduration)\n        }\n//weeks populated\n    } else if (weeks !== 0) {\n        if (hours !== 0) {\n            if (hours === 1) {\n                readableduration = \" \".concat(hours.toString(), \" Hour\", readableduration)\n            } else {\n                readableduration = \" \".concat(hours.toString(), \" Hours\", readableduration)\n            }\n        }\n        if (days !== 0) {\n            if (weeks === 1) {\n                readableduration = \" \".concat(days.toString(), \" Day\", readableduration)\n            } else {\n                readableduration = \" \".concat(days.toString(), \" Days\", readableduration)\n            }\n        }\n        if (weeks === 1) {\n            readableduration = weeks.toString().concat(\" Week\", readableduration)\n        } else {\n            readableduration = weeks.toString().concat(\" Weeks\", readableduration)\n        }\n//days populated\n    } else if (days !== 0) {\n        if ((minutes !== 0) && (hours !== 0)) { //If both are non-zero then 1:01 format. If only 1 then either 2 hours or 1 minute\n            if (minutes !== 0) {\n                readableduration = \":\".concat(minstr, readableduration)\n            }\n            if (hours !== 0) {\n                readableduration = \" \".concat(hours.toString(), readableduration)\n            } else {\n                readableduration = \" 0\".concat(readableduration)\n            }\n        } else {\n            if (minutes === 1) {\n                readableduration = \" 1 Minute\".concat(readableduration)\n            } else if (minutes > 1) {\n                readableduration = \" \".concat(lminstr,\" Minutes\", readableduration)\n            } else if (hours === 1) {\n                readableduration = \" 1 Hour\".concat(readableduration)\n            } else {\n                if (hours >1) {\n                    readableduration = \" \".concat(hours.toString(),\" Hours\", readableduration)\n                }\n            }\n        }\n        if (days === 1) {\n            readableduration = days.toString().concat(\" Day\", readableduration)\n        } else {\n            readableduration = days.toString().concat(\" Days\", readableduration)\n        }\n//hours populated\n    } else if (hours !== 0) {\n        if ((minutes !== 0) || (seconds !== 0)) { //End result h Hours or h:mm:ss\n            readableduration = hours.toString().concat(\":\", minstr, \":\", secstr, readableduration)\n        } else {\n            if (hours === 1) {\n                readableduration = \"1 Hour\"\n            } else {\n                readableduration = hours.toString().concat(\" Hours\", readableduration)\n            }\n        }\n//minutes populated\n    } else if (minutes !== 0) { //End result m Minutes or mm:ss.MMM\n        if (seconds !== 0 || millis !== 0) { //End result h Hours or h:mm:ss\n            readableduration = lminstr.concat(\":\", secstr, \".\", millistr, readableduration)\n        } else {\n            if (minutes === 1) {\n                readableduration = \"1 Minute\".concat( readableduration)\n            } else {\n                readableduration = lminstr.concat(\" Minutes\", readableduration)\n            }\n        }\n//seconds populated\n    } else if (seconds !== 0) {\n        if (millis !== 0) { //End result s Seconds or s.MMM\n            readableduration = lsecstr.concat(\".\", millistr, \" Seconds\", readableduration)\n        } else {\n            if (seconds === 1) {\n                readableduration = \"1 Second\".concat( readableduration)\n            } else {\n                readableduration = lsecstr.concat(\" Seconds\", readableduration)\n            }\n        }\n//milliseconds populated\n    } else if (millis !== 0) {\n        if (millis !== 1) {\n            readableduration = lmillistr.concat(\" Milliseconds\", readableduration)\n        } else {\n            readableduration = \"1 Millisecond\".concat( readableduration)\n        }\n    } else {\n        readableduration = \"0\"\n    }\n    msg.years = years\n    msg.weeks = weeks\n    msg.days = days\n    msg.hours = hours\n    msg.minutes = minutes\n    msg.seconds = seconds\n    msg.millis = millis\n    msg.payload = readableduration\n    return msg;","outputs":1,"noerr":0,"x":500,"y":1080,"wires":[["82c9edda.537d7"]]},{"id":"408b8df6.b9b044","type":"join","z":"76e3605b.0e6e7","name":"Join the failure start time with the duration for output","mode":"custom","build":"string","property":"payload","propertyType":"msg","key":"topic","joiner":"","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1070,"y":960,"wires":[[]]},{"id":"82c9edda.537d7","type":"function","z":"76e3605b.0e6e7","name":"Pad the text duration to 24 characters","func":"msg.payload = msg.payload.padStart(24)\nreturn msg;","outputs":1,"noerr":0,"x":801,"y":1080,"wires":[["408b8df6.b9b044"]]},{"id":"148d89ae.8a8376","type":"change","z":"76e3605b.0e6e7","name":"Create Log Start line with Formated Date","rules":[{"t":"set","p":"payload","pt":"msg","to":"myyear\t&\"-\"&\tmymonthn\t&\"-\"&\tmydom\t&\" \"&\tmyhourpm\t&\":\"&\tmyminute\t&\":\"&\tmysecond\t&\".\"&\tmymillis\t&\" \"&\tmypm","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":660,"y":960,"wires":[["408b8df6.b9b044"]]},{"id":"6e44be2e.917c7","type":"function","z":"76e3605b.0e6e7","name":"Include Ping Time if Successful","func":"if (isNaN(msg.pingtime)) {\n    msg.payload = msg.CurrentTime.padEnd(28,\" \") + msg.PingStatus.padEnd(20, \" \")\n} else {\nmsg.payload = msg.CurrentTime.padEnd(28,\" \") + msg.PingStatus.padEnd(9, \" \") + msg.pingtime.toString().padEnd(11,\" \") + msg.Min.toString().padEnd(11,\" \") + msg.Max.toString().padEnd(11,\" \") + msg.RollingAverage.toString().padEnd(11,\" \")\n}\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":460,"wires":[["54bcf469.64fc1c"]]},{"id":"23c83a68.f57316","type":"simpletime","z":"76e3605b.0e6e7","name":"Populate Time Messages","x":1070,"y":60,"wires":[["8ac84738.ad8f18"]]},{"id":"8ac84738.ad8f18","type":"change","z":"76e3605b.0e6e7","name":"Formated Date for ping log entry","rules":[{"t":"set","p":"CurrentTime","pt":"msg","to":"myyear\t&\"-\"&\tmymonthn\t&\"-\"&\tmydom\t&\" \"&\tmyhourpm\t&\":\"&\tmyminute\t&\":\"&\tmysecond\t&\".\"&\tmymillis\t&\" \"&\tmypm","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1050,"y":160,"wires":[["6e44be2e.917c7"]]},{"id":"833fda41.17b198","type":"rbe","z":"76e3605b.0e6e7","name":"Only write headers first time process is initiated","func":"rbe","gap":"","start":"","inout":"out","property":"filename","x":220,"y":200,"wires":[["3a6e32fc.4a089e"]]},{"id":"41c7aa38.91a0b4","type":"delay","z":"76e3605b.0e6e7","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":700,"y":60,"wires":[["f9ce45cd.70d568","48434c5b.387c44","e6f86ef9.f3af6"]]},{"id":"7c6b7df4.a02714","type":"function","z":"76e3605b.0e6e7","name":"Update Flow Results Based on Latest Input","func":"var CurrentCount = flow.get(\"Count\")\nif (!isNaN(msg.payload)) {\n    var next = Number(msg.payload)\n    if (next === 0) {\n    } else {\n        var CurrentAvg = flow.get(\"RollingAverage\")\n        var CurrentMax = flow.get(\"Max\")\n        var CurrentMin = flow.get(\"Min\")\n        var OldMax = CurrentMax\n        var OldMin = CurrentMin\n        if (CurrentCount === 0) {\n            CurrentAvg = next;\n            CurrentMin = next;\n            CurrentMax = next;\n            CurrentCount = CurrentCount + 1\n        } else {\n            oldtotal = CurrentAvg * CurrentCount\n            newtotal = next + oldtotal\n            CurrentCount = CurrentCount + 1\n            CurrentAvg = newtotal / CurrentCount\n            CurrentMax = Math.max(next, CurrentMax)\n            if (CurrentMax != OldMax) {\n                msg.NewMax = true\n            }\n            CurrentMin = Math.min(next, CurrentMin)\n            if (CurrentMin != OldMin) {\n                msg.NewMin = true\n            }\n        }\n        flow.set(\"RollingAverage\", CurrentAvg);\n        flow.set(\"Max\", CurrentMax);\n        flow.set(\"Min\", CurrentMin);\n        flow.set(\"Count\", CurrentCount);\n        msg.next = next\n        msg.RollingAverage = CurrentAvg;\n        msg.Max = CurrentMax;\n        msg.Min = CurrentMin;\n        msg.Count = CurrentCount;\n        return msg;\n    }\n}\n","outputs":1,"noerr":0,"x":230,"y":140,"wires":[["7b2187a9.5139d8"]]},{"id":"b832f02e.6f68d","type":"function","z":"76e3605b.0e6e7","name":"--Divider","func":"var a=\"-\"\na=a.padEnd(81,\"-\")\nmsg.payload = a\nreturn msg;","outputs":1,"noerr":0,"x":540,"y":280,"wires":[["54bcf469.64fc1c","11aeda74.2913e6"]]},{"id":"11aeda74.2913e6","type":"function","z":"76e3605b.0e6e7","name":"Send Header","func":"var a=\"\"\na = a + \"Date\".padEnd(28,\" \")+ \"Status\".padEnd(9,\" \")+ \"Roundtrip\".padEnd(11,\" \")+ \"Min\".padEnd(11,\" \")+ \"Max\".padEnd(11,\" \")+ \"Average\".padEnd(11,\" \")\nmsg.payload = a\nreturn msg;","outputs":1,"noerr":0,"x":530,"y":320,"wires":[["54bcf469.64fc1c"]]},{"id":"3a6e32fc.4a089e","type":"function","z":"76e3605b.0e6e7","name":"===Divider","func":"var a=\"=\"\na=a.padEnd(81,\"=\")\nmsg.payload = a\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":200,"wires":[["800cd2f0.7e6fc","54bcf469.64fc1c"]]},{"id":"f97e59e9.764a98","type":"config","z":"76e3605b.0e6e7","name":"Config output directory","properties":[{"p":"OutputDirectory","pt":"flow","to":"/CS/Uptime/","tot":"str"},{"p":"Count","pt":"flow","to":"0","tot":"num"},{"p":"Min","pt":"flow","to":"None","tot":"str"},{"p":"Max","pt":"flow","to":"None","tot":"str"},{"p":"RollingAverage","pt":"flow","to":"None","tot":"str"}],"active":true,"x":140,"y":80,"wires":[],"info":"Note: by having a config node in a subflow, this sets the flow variables for when the subflow is activated. There is no way to use the click ability of a config node in a subflow, but it does do the initial population of the variable each time the subflow is triggered. In this case because the subflow is triggered via 12 different outputs, each of the 12 is a different set of the same variables."},{"id":"81c7815c.892cd","type":"config","z":"711cdb94.5b9a04","name":"Config output directory","properties":[{"p":"OutputDirectory","pt":"flow","to":"/CS/Uptime/","tot":"str"},{"p":"Count","pt":"flow","to":"0","tot":"num"},{"p":"Min","pt":"flow","to":"None","tot":"str"},{"p":"Max","pt":"flow","to":"None","tot":"str"},{"p":"RollingAverage","pt":"flow","to":"None","tot":"str"},{"p":"downcount","pt":"flow","to":"0","tot":"str"},{"p":"calculateandwriteoutage","pt":"flow","to":"false","tot":"bool"}],"active":true,"x":140,"y":240,"wires":[],"info":" * CS 192.168.86.3\r\n * G Wifi 192.168.86.1\r\n * Emby laptop 192.168.86.2\r\n * Lennox 192.168.86.101\r\n * ATT router 192.168.1.254\r\n * Cloudflare 1.1.1.1\r\n * Level 3 4.2.2.2\r\n * Google 8.8.8.8\r\n * OpenDNS 208.67.222.222\r\n * dfw25s26-in-f19.1e100.net 172.217.9.147\r\n * ghs.googlehosted.com 172.217.9.147\r\n * "},{"id":"159589d9.1135c6","type":"GSheet","z":"711cdb94.5b9a04","creds":"adb4e9b8.8beee8","method":"append","action":"","sheet":"1ZKNZWvcBqLcxkkFSrV9JN-BAeXiGoGrDjepUyD-S5Cs","cells":"Sheet1!A2:J1000","name":"","x":1137,"y":500,"wires":[[]]},{"id":"c77a0cee.02f32","type":"function","z":"711cdb94.5b9a04","name":"Examine messages for Internet vs host down","func":"if (msg.internettarget){\n    var downCount = flow.get(\"downcount\")\n    if(!isNaN(downCount)){\n        if(downCount<6){ //it would be better and more elegant to have something count the number of internet targets and pass that in, but for now it is just hardcoded to 6\n            downCount++\n            if(downCount == 6) {\n                flow.set(\"wentdownat\",Date.now())\n                flow.set(\"internetdown\", true)\n            }\n        }\n        \n    }\n    flow.set(\"downcount\", downCount);\n    return msg;}","outputs":1,"noerr":0,"x":710,"y":53,"wires":[[]],"info":"This Node is triggered by a ping response of false (i.e. more than 5 seconds to respond and thus either the network or the target host is offline)\n\n * gets how many consecutive times the ping has shown as down\n * sets internet down as true\n * Makes sure the down count is a number (belt and suspenders that could almost certainly be removed\n * If it is not a number than nothing happens\n * If it is, the it checks to see if the number of down responses has reached 6. The 6 is how many internet hosts are being examined. I assume that if we reach 6 then it is the internet and not just one or more of the total hosts that are down. If it is already at 6 then the system is treating the internet as down aleady and no further action is required.\n * If it is less than 6, then the count is incremented\n * If incrementing it has now made the count 6, it then records (in epoch time) the time the count went from 5 to 6.\n * Finally it saves the count back into a flow variable.\n"},{"id":"2286604.c0f71a","type":"function","z":"711cdb94.5b9a04","name":"Time to report outage?","func":"if (msg.internettarget){\n    var downCount = flow.get(\"downcount\")\n    var originalDownCount = downCount\n    flow.set(\"calculateandwriteoutage\",false)\n    if(!isNaN(downCount)){\n        if(downCount > 0){\n            downCount--\n            if(downCount === 0 && flow.get(\"internetdown\")) {\n                flow.set(\"internetdown\", false)\n                flow.set(\"cameupat\",Date.now())\n                flow.set(\"calculateandwriteoutage\",true)\n            }\n        }\n    }\n    flow.set(\"downcount\", downCount);\n    if(flow.get(\"calculateandwriteoutage\")){\n        return msg;\n        \n    }\n}","outputs":1,"noerr":0,"x":760,"y":100,"wires":[["8a0a15c8.5a92d8"]],"info":"This Node is triggered by a ping response of a number (i.e. between 1 and 4999 milliseconds for a ping response)\n\n * get how many nodes are down\n * save a copy of how many nodes are down\n * Set flow variable for whether to do a calculation and output to false by default\n * Makes sure the down count is a number (belt and suspenders that could almost certainly be removed)\n * Check if the count is greater than zero\n * If it is then decrement the count\n * check if the decremented count is 0 now and that the internetdown flag is true (this flag means the down count reached 6)\n * If it is, then the internet is up enough to then this record this as the time the internet came up and set the internetdown back to false and change the flag for whether to calculated and write the outage to Gsheet to true\n * Record the down count to the flow variable"},{"id":"cfec0785.b80348","type":"switch","z":"711cdb94.5b9a04","name":"","property":"pingtargetnum","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"str"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"},{"t":"eq","v":"4","vt":"str"},{"t":"eq","v":"5","vt":"str"},{"t":"eq","v":"6","vt":"str"},{"t":"eq","v":"7","vt":"str"},{"t":"eq","v":"8","vt":"str"},{"t":"eq","v":"9","vt":"str"},{"t":"eq","v":"10","vt":"str"},{"t":"eq","v":"11","vt":"str"},{"t":"eq","v":"12","vt":"str"}],"checkall":"false","repair":false,"outputs":12,"x":930,"y":240,"wires":[["625ab66.59d0b48"],["c5d470b0.da92f"],["469f91ba.58236"],["6caf4611.732b98"],["59014ce7.0a1b44"],["83e3d76d.17aad8"],["25747400.0795cc"],["2c8b7f98.87f3e"],["8f9ccce1.dd365"],["c8251ad6.9dcaf8"],["f54e3165.fa3b4"],["84a64174.16425"]]},{"id":"2a8bf2f.e6a000e","type":"function","z":"711cdb94.5b9a04","name":"Calculate Duration of Outage","func":"if(flow.get(\"calculateandwriteoutage\")){\n    var duration = flow.get(\"cameupat\") - flow.get(\"wentdownat\")\n    flow.set(\"calculateandwriteoutage\",false)\n    msg.payload = duration\n    return msg;\n} \n","outputs":1,"noerr":0,"x":160,"y":580,"wires":[["9a5ed7f0.5f0c68"]]},{"id":"cd0652f2.24c1b","type":"change","z":"711cdb94.5b9a04","name":"Set Ping Status Down","rules":[{"t":"set","p":"PingStatus","pt":"msg","to":"Down","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":340,"y":53,"wires":[["cfec0785.b80348","c77a0cee.02f32"]]},{"id":"625ab66.59d0b48","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","x":1150,"y":20,"wires":[]},{"id":"c5d470b0.da92f","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":60,"wires":[]},{"id":"469f91ba.58236","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":100,"wires":[]},{"id":"6caf4611.732b98","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":140,"wires":[]},{"id":"59014ce7.0a1b44","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":180,"wires":[]},{"id":"83e3d76d.17aad8","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":220,"wires":[]},{"id":"25747400.0795cc","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":260,"wires":[]},{"id":"2c8b7f98.87f3e","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":300,"wires":[]},{"id":"8f9ccce1.dd365","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":340,"wires":[]},{"id":"c8251ad6.9dcaf8","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":380,"wires":[]},{"id":"f54e3165.fa3b4","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1150,"y":420,"wires":[]},{"id":"84a64174.16425","type":"subflow:76e3605b.0e6e7","z":"711cdb94.5b9a04","name":"","x":1149,"y":460,"wires":[]},{"id":"286de803.dcf568","type":"change","z":"711cdb94.5b9a04","name":"Set Ping Status Good","rules":[{"t":"set","p":"PingStatus","pt":"msg","to":"Good","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":340,"y":100,"wires":[["cfec0785.b80348","2286604.c0f71a"]]},{"id":"3716f3a5.c360dc","type":"change","z":"711cdb94.5b9a04","name":"Set Ping Status Slow","rules":[{"t":"set","p":"PingStatus","pt":"msg","to":"Slow","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":340,"y":140,"wires":[["cfec0785.b80348","2286604.c0f71a"]]},{"id":"9a5ed7f0.5f0c68","type":"function","z":"711cdb94.5b9a04","name":"Translate Duration Function","func":"/* \n * Create Variables\n * \n */\n        var milliseconds = msg.payload;\n        var years, weeks, days, hours, minutes, seconds, millis;\n    //creating 2 string versions of each of the durations that can be in the middle of a 1:01:01.001 duration \n    //minstr is the always 2 character one\n    //lminstr is the version that can be 1 or more characers that will be used when that part is the portion of the duration\n        var minstr, secstr, millistr, lminstr, lsecstr, lmillistr;\n        var whichcomponents, readableduration;\n\n/*\n * Calculate the numbers for the subcomponents\n * \n */\n    //by getting the remainder when dividing by 1000\n    //it leaves just the fraction of milliseconds\n        millis = milliseconds % 1000;\n    //the floor function drops the decimal portion\n    //returning the non fractional seconds\n        seconds = Math.floor(milliseconds / 1000);\n    //the floor function drops the decimal portion\n    //returning the non fractional minutes\n        minutes = Math.floor(seconds / 60);\n    //Once the minutes have been calculated, then\n    //the seconds is replaced with those seconds not\n    //accounted for by the minutes\n        seconds = seconds % 60;\n    //The same sequence as used for minutes/seconds\n    //then used to calulate minutes, hours, dayss, weeks, years\n\n        hours = Math.floor(minutes / 60);\n        minutes = minutes % 60;\n        days = Math.floor(hours / 24);\n        hours = hours % 24;\n        weeks = Math.floor(days / 7)\n        days = days % 7;\n        years = Math.floor(days / 365.25)\n        weeks = weeks % 52;\n\n/*\n * Put the subcomponents into msg payloads for easy access by later nodes\n *\n */\n        msg.years = years\n        msg.weeks = weeks\n        msg.days = days\n        msg.hours = hours\n        msg.minutes = minutes\n        msg.seconds = seconds\n        msg.millis = millis\n \n\n/*\n * create the string verssion for the subcomponents\n */\n    //milliseconds\n        lmillistr = millis.toString();\n        //put padding on the milliseconds so that 1 ms shows as .001 and not .1 when concatenated after a decimal\n            millistr = millis.toString().padStart(3, \"0\");\n    //seconds\n        lsecstr = seconds.toString();\n        //put padding on the seconds so that 1 s shows as :01.000 and not :1.000 when concatenated after a dividing :\n            secstr = lsecstr.padStart(2, \"0\");\n    //minutes\n        lminstr = minutes.toString();\n        //put padding on the minutes so that 1 m shows as :01:00.000 and not :1:00.000 when concatenated after a dividing :\n            minstr = lminstr.padStart(2, \"0\");\n\n/*\n * Build output based on largest significant populated unit\n * The general rule is to include in the output the largest unit (years, weeks, days, etc) followed by the next 2\n * smaller units if the happen to be populated\n */\n    readableduration =\"\"\n//years populated\n    if (years !== 0) { \n        if (days !== 0) {\n            if (days === 1) {\n                readableduration = \" \".concat(days.toString(), \" Day\", readableduration)\n            } else {\n                readableduration = \" \".concat(days.toString(), \" Days\", readableduration)\n            }\n        }\n        if (weeks !== 0) {\n            if (weeks === 1) {\n                readableduration = \" \".concat(weeks.toString(), \" Week\", readableduration)\n            } else {\n                readableduration = \" \".concat(weeks.toString(), \" Weeks\", readableduration)\n            }\n        }\n        if (years === 1) {\n            readableduration = years.toString().concat(\" Year\", readableduration)\n        } else {\n            readableduration = years.toString().concat(\" Years\", readableduration)\n        }\n//weeks populated\n    } else if (weeks !== 0) {\n        if (hours !== 0) {\n            if (hours === 1) {\n                readableduration = \" \".concat(hours.toString(), \" Hour\", readableduration)\n            } else {\n                readableduration = \" \".concat(hours.toString(), \" Hours\", readableduration)\n            }\n        }\n        if (days !== 0) {\n            if (weeks === 1) {\n                readableduration = \" \".concat(days.toString(), \" Day\", readableduration)\n            } else {\n                readableduration = \" \".concat(days.toString(), \" Days\", readableduration)\n            }\n        }\n        if (weeks === 1) {\n            readableduration = weeks.toString().concat(\" Week\", readableduration)\n        } else {\n            readableduration = weeks.toString().concat(\" Weeks\", readableduration)\n        }\n//days populated\n    } else if (days !== 0) {\n        if ((minutes !== 0) && (hours !== 0)) { //If both are non-zero then 1:01 format. If only 1 then either 2 hours or 1 minute\n            if (minutes !== 0) {\n                readableduration = \":\".concat(minstr, readableduration)\n            }\n            if (hours !== 0) {\n                readableduration = \" \".concat(hours.toString(), readableduration)\n            } else {\n                readableduration = \" 0\".concat(readableduration)\n            }\n        } else {\n            if (minutes === 1) {\n                readableduration = \" 1 Minute\".concat(readableduration)\n            } else if (minutes > 1) {\n                readableduration = \" \".concat(lminstr,\" Minutes\", readableduration)\n            } else if (hours === 1) {\n                readableduration = \" 1 Hour\".concat(readableduration)\n            } else {\n                if (hours >1) {\n                    readableduration = \" \".concat(hours.toString(),\" Hours\", readableduration)\n                }\n            }\n        }\n        if (days === 1) {\n            readableduration = days.toString().concat(\" Day\", readableduration)\n        } else {\n            readableduration = days.toString().concat(\" Days\", readableduration)\n        }\n//hours populated\n    } else if (hours !== 0) {\n        if ((minutes !== 0) || (seconds !== 0)) { //End result h Hours or h:mm:ss\n            readableduration = hours.toString().concat(\":\", minstr, \":\", secstr, readableduration)\n        } else {\n            if (hours === 1) {\n                readableduration = \"1 Hour\"\n            } else {\n                readableduration = hours.toString().concat(\" Hours\", readableduration)\n            }\n        }\n//minutes populated\n    } else if (minutes !== 0) { //End result m Minutes or mm:ss.MMM\n        if (seconds !== 0 || millis !== 0) { //End result h Hours or h:mm:ss\n            readableduration = lminstr.concat(\":\", secstr, \".\", millistr, readableduration)\n        } else {\n            if (minutes === 1) {\n                readableduration = \"1 Minute\".concat( readableduration)\n            } else {\n                readableduration = lminstr.concat(\" Minutes\", readableduration)\n            }\n        }\n//seconds populated\n    } else if (seconds !== 0) {\n        if (millis !== 0) { //End result s Seconds or s.MMM\n            readableduration = lsecstr.concat(\".\", millistr, \" Seconds\", readableduration)\n        } else {\n            if (seconds === 1) {\n                readableduration = \"1 Second\".concat( readableduration)\n            } else {\n                readableduration = lsecstr.concat(\" Seconds\", readableduration)\n            }\n        }\n//milliseconds populated\n    } else if (millis !== 0) {\n        if (millis !== 1) {\n            readableduration = lmillistr.concat(\" Milliseconds\", readableduration)\n        } else {\n            readableduration = \"1 Millisecond\".concat( readableduration)\n        }\n    } else {\n        readableduration = \"0\"\n    }\n    msg.years = years\n    msg.weeks = weeks\n    msg.days = days\n    msg.hours = hours\n    msg.minutes = minutes\n    msg.seconds = seconds\n    msg.millis = millis\n    msg.payload = readableduration\n    return msg;","outputs":1,"noerr":0,"x":420,"y":580,"wires":[["533989e6.19aa38"]]},{"id":"5117f3ab.9484cc","type":"switch","z":"711cdb94.5b9a04","name":"Ping Status","property":"payload","propertyType":"msg","rules":[{"t":"false"},{"t":"lt","v":"goodbad","vt":"msg"},{"t":"gte","v":"goodbad","vt":"msg"}],"checkall":"false","repair":false,"outputs":3,"x":150,"y":100,"wires":[["cd0652f2.24c1b"],["286de803.dcf568"],["3716f3a5.c360dc"]]},{"id":"45d73ffd.6779d","type":"join","z":"711cdb94.5b9a04","name":"Assemble all columns and then send to Gsheet","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":847,"y":500,"wires":[["159589d9.1135c6"]]},{"id":"8a0a15c8.5a92d8","type":"change","z":"711cdb94.5b9a04","name":"Build Column A data","rules":[{"t":"set","p":"payload","pt":"msg","to":"Outage","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":360,"y":500,"wires":[["45d73ffd.6779d","faa029b5.b65c28"]]},{"id":"faa029b5.b65c28","type":"simpletime","z":"711cdb94.5b9a04","name":"Populate Time Messages","x":150,"y":540,"wires":[["88071c08.c524"]]},{"id":"88071c08.c524","type":"change","z":"711cdb94.5b9a04","name":"Build Date/Time for Column B","rules":[{"t":"set","p":"payload","pt":"msg","to":"myyear\t&\"-\"&\tmymonthn\t&\"-\"&\tmydom\t&\" \"&\tmyhourpm\t&\":\"&\tmyminute\t&\":\"&\tmysecond\t&\".\"&\tmymillis\t&\" \"&\tmypm","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":410,"y":540,"wires":[["45d73ffd.6779d","2a8bf2f.e6a000e"]]},{"id":"533989e6.19aa38","type":"change","z":"711cdb94.5b9a04","name":"Pass Duration for Column C and send complet to Join","rules":[{"t":"set","p":"complete","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":340,"y":620,"wires":[["45d73ffd.6779d"]]},{"id":"e6f86ef9.f3af6","type":"rbe","z":"76e3605b.0e6e7","name":"New Max?","func":"rbei","gap":"","start":"","inout":"out","property":"Max","x":850,"y":20,"wires":[["23c83a68.f57316"]]},{"id":"48434c5b.387c44","type":"rbe","z":"76e3605b.0e6e7","name":"New Min?","func":"rbei","gap":"","start":"","inout":"out","property":"Min","x":850,"y":60,"wires":[["23c83a68.f57316"]]},{"id":"f6c04470.d3df38","type":"inject","z":"2b2a4010.a6b5e","name":"Start Backup of All 4 Hubitat Hubs","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":220,"y":80,"wires":[["79bd7f0.4778b8"]]},{"id":"dae3700e.3752","type":"exec","z":"c3686304.f6d31","command":"/data/bashscripts/backup4hubitats.sh","addpay":false,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"","x":290,"y":80,"wires":[["8061cf59.05783"],["8061cf59.05783"],["8061cf59.05783"]]},{"id":"8061cf59.05783","type":"debug","z":"c3686304.f6d31","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":550,"y":80,"wires":[]},{"id":"2808c99d.c92d26","type":"adv ping","z":"aba876af.3a45e8","name":"Ping the passed Host","host":"","x":360,"y":100,"wires":[["5992611c.d72ca","34f3f319.96490c"]]},{"id":"67721e37.f8a89","type":"inject","z":"54cae49c.6ee04c","name":"Turn Off Pinging","topic":"","payload":"stop","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":140,"y":100,"wires":[["385c5512.c9ac4a"]]},{"id":"9d8367a6.55abe8","type":"inject","z":"54cae49c.6ee04c","name":"Start Pinging","topic":"","payload":"Ping","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"0","x":130,"y":60,"wires":[["385c5512.c9ac4a"]]},{"id":"81b5485a.3abc58","type":"function","z":"aba876af.3a45e8","name":"Start currentNum","func":"// check to see if the current number (currentNum is equal to the number of hosts being pinged (totalNum)\n    //when it is, reset the current number (currentNum) to the startinng number (startNum)\n    //when it is not, then increment the current number (currentNum)\n    //in both cases record the new value of the current number (currentNum) to the new value (flow.set.....)\nif (flow.get(\"currentNum\") == flow.get(\"totalNum\")){\n    flow.set(\"currentNum\", flow.get(\"startNum\"))\n}else {\n    flow.set(\"currentNum\", Number(flow.get(\"currentNum\"))+1)\n}\n/*\n*   Use the current number (cNum) as the index to get the other data for this round of pings\n*/\nvar cNum = flow.get(\"currentNum\")\n    //set ip address to be used by downstream\nmsg.host = flow.get(\"PT\"+cNum)\n    //set name to be used by downstream\nmsg.pingtarget = flow.get(\"PT\"+cNum+\"Name\")\n    //set target number to be used by downstream\nmsg.pingtargetnum = cNum\n    //set the dividing line between good and bad for the host to be pinged for use by downstream\nmsg.goodbad = flow.get(\"GoodBadPT\"+cNum)\n    //set a boolean for downstream to identify if the current target is an internet host or LAN host to be used by downstream\nmsg.internettarget = flow.get(\"InternetPT\"+cNum)\n    //show via status node which host will be pinged based on the latest output from this node\nnode.status({fill:\"green\",shape:\"dot\",text:\"Ping \"+ flow.get(\"PT\"+flow.get(\"currentNum\")+\"Name\")});\nreturn msg;\n\n/* Before refactoring\n\nif (flow.get(\"currentNum\") == flow.get(\"totalNum\")){\n    flow.set(\"currentNum\", flow.get(\"startNum\"))\n}else {\n    flow.set(\"currentNum\", Number(flow.get(\"currentNum\"))+1)\n}\nmsg.host = flow.get(\"PT\"+flow.get(\"currentNum\"))\nmsg.payload = flow.get(\"currentNum\")\nnode.status({fill:\"green\",shape:\"dot\",text:\"Ping \"+ flow.get(\"PT\"+flow.get(\"currentNum\")+\"Name\")});\nmsg.pingtarget = flow.get(\"PT\"+flow.get(\"currentNum\")+\"Name\")\nmsg.pingtargetnum = flow.get(\"currentNum\")\nmsg.goodbad = flow.get(\"GoodBadPT\"+flow.get(\"currentNum\"))\nmsg.internettarget = flow.get(\"InternetPT\"+flow.get(\"currentNum\"))\nreturn msg;\n*/","outputs":1,"noerr":0,"x":150,"y":100,"wires":[["2808c99d.c92d26"]]},{"id":"385c5512.c9ac4a","type":"trigger","z":"54cae49c.6ee04c","op1":"","op2":"0","op1type":"pay","op2type":"str","duration":"-1","extend":false,"units":"s","reset":"stop","bytopic":"all","name":"Send request every 1s unless turned off","x":460,"y":60,"wires":[["eb8fea44.7fab68"]]},{"id":"eb8fea44.7fab68","type":"subflow:aba876af.3a45e8","z":"54cae49c.6ee04c","name":"","env":[],"x":550,"y":120,"wires":[]},{"id":"3ab1249d.86543c","type":"config","z":"aba876af.3a45e8","name":"Config ping targets","properties":[{"p":"PT1Name","pt":"flow","to":"Central Services","tot":"str"},{"p":"PT1","pt":"flow","to":"192.168.86.3","tot":"str"},{"p":"PT2Name","pt":"flow","to":"Google Wifi","tot":"str"},{"p":"PT2","pt":"flow","to":"192.168.86.1","tot":"str"},{"p":"PT3Name","pt":"flow","to":"Emby","tot":"str"},{"p":"PT3","pt":"flow","to":"192.168.86.2","tot":"str"},{"p":"PT4Name","pt":"flow","to":"Lennox Themostat","tot":"str"},{"p":"PT4","pt":"flow","to":"192.168.86.101","tot":"str"},{"p":"PT5Name","pt":"flow","to":"AT&T router ","tot":"str"},{"p":"PT5","pt":"flow","to":"192.168.1.254","tot":"str"},{"p":"PT6Name","pt":"flow","to":"Cloudflare ","tot":"str"},{"p":"PT6","pt":"flow","to":"1.1.1.1","tot":"str"},{"p":"PT7Name","pt":"flow","to":"Level 3","tot":"str"},{"p":"PT7","pt":"flow","to":"4.2.2.2","tot":"str"},{"p":"PT8Name","pt":"flow","to":"Google","tot":"str"},{"p":"PT8","pt":"flow","to":"8.8.8.8","tot":"str"},{"p":"PT9Name","pt":"flow","to":"OpenDNS","tot":"str"},{"p":"PT9","pt":"flow","to":"208.67.222.222","tot":"str"},{"p":"PT10Name","pt":"flow","to":"dfw25 (near google hosted)","tot":"str"},{"p":"PT10","pt":"flow","to":"172.217.9.147","tot":"str"},{"p":"PT11Name","pt":"flow","to":"ghs.googlehosted.com","tot":"str"},{"p":"PT11","pt":"flow","to":"172.217.9.179","tot":"str"},{"p":"startNum","pt":"flow","to":"1","tot":"str"},{"p":"totalNum","pt":"flow","to":"11","tot":"str"},{"p":"currentNum","pt":"flow","to":"","tot":"str"}],"active":true,"x":110,"y":140,"wires":[],"info":"Note: by having a config node in a subflow, this sets the flow variables for when the subflow is activated. There is no way to use the click ability of a config node in a subflow, but it does do the initial population of the variable each time the subflow is triggered. In this case because the subflow is triggered via 12 different outputs, each of the 12 is a different set of the same variables."},{"id":"ae97e491.065718","type":"config","z":"aba876af.3a45e8","name":"Config Good/Bad Dividing Lines by Ping Target","properties":[{"p":"GoodBadPT1","pt":"flow","to":"1","tot":"num"},{"p":"GoodBadPT2","pt":"flow","to":"500","tot":"num"},{"p":"GoodBadPT3","pt":"flow","to":"500","tot":"num"},{"p":"GoodBadPT4","pt":"flow","to":"4500","tot":"num"},{"p":"GoodBadPT5","pt":"flow","to":"2000","tot":"num"},{"p":"GoodBadPT6","pt":"flow","to":"1000","tot":"num"},{"p":"GoodBadPT7","pt":"flow","to":"1000","tot":"num"},{"p":"GoodBadPT8","pt":"flow","to":"1000","tot":"num"},{"p":"GoodBadPT9","pt":"flow","to":"1000","tot":"num"},{"p":"GoodBadPT10","pt":"flow","to":"1000","tot":"num"},{"p":"GoodBadPT11","pt":"flow","to":"1000","tot":"num"}],"active":true,"x":200,"y":180,"wires":[],"info":"Note: by having a config node in a subflow, this sets the flow variables for when the subflow is activated. There is no way to use the click ability of a config node in a subflow, but it does do the initial population of the variable each time the subflow is triggered. In this case because the subflow is triggered via 12 different outputs, each of the 12 is a different set of the same variables."},{"id":"cc5cceb1.282c3","type":"config","z":"aba876af.3a45e8","name":"Config If Target Counts toward down Internet Tracking","properties":[{"p":"InternetPT1","pt":"flow","to":"false","tot":"bool"},{"p":"InternetPT2","pt":"flow","to":"false","tot":"bool"},{"p":"InternetPT3","pt":"flow","to":"false","tot":"bool"},{"p":"InternetPT4","pt":"flow","to":"false","tot":"bool"},{"p":"InternetPT5","pt":"flow","to":"false","tot":"bool"},{"p":"InternetPT6","pt":"flow","to":"true","tot":"bool"},{"p":"InternetPT7","pt":"flow","to":"true","tot":"bool"},{"p":"InternetPT8","pt":"flow","to":"true","tot":"bool"},{"p":"InternetPT9","pt":"flow","to":"true","tot":"bool"},{"p":"InternetPT10","pt":"flow","to":"true","tot":"bool"},{"p":"InternetPT11","pt":"flow","to":"true","tot":"bool"}],"active":true,"x":220,"y":220,"wires":[],"info":"Note: by having a config node in a subflow, this sets the flow variables for when the subflow is activated. There is no way to use the click ability of a config node in a subflow, but it does do the initial population of the variable each time the subflow is triggered. In this case because the subflow is triggered via 12 different outputs, each of the 12 is a different set of the same variables."},{"id":"8c5abc2f.833c4","type":"GSheet","z":"aba876af.3a45e8","creds":"adb4e9b8.8beee8","method":"append","action":"","sheet":"1ZKNZWvcBqLcxkkFSrV9JN-BAeXiGoGrDjepUyD-S5Cs","cells":"Sheet1!A2:J1000","name":"","x":890,"y":340,"wires":[[]]},{"id":"36301876.b0d678","type":"function","z":"aba876af.3a45e8","name":"Examine messages for Internet vs host down","func":"// Conceptually the flow is keeping track of how many down internet hosts there are per the ping results.\n// This function does 2/3rds of that process whenever it is triggered. It is triggered when the ping status node recieves a false instead of a numeric quantity from the ping result.\n// The 3 things this funtion does are:\n//      1. increment the down count\n//      2. record the time/date the down count reached 6 (which indicates that all of the internet hosts did not reply to a ping)\n//      3. set the flow variable that the internet is down\n\nif (msg.internettarget){\n    var downCount = flow.get(\"downcount\")\n    if(!isNaN(downCount)){\n        if(downCount<6){ //it would be better and more elegant to have something count the number of internet targets and pass that in, but for now it is just hardcoded to 6\n            downCount++\n            if(downCount == 6) {\n                flow.set(\"wentdownat\",Date.now())\n                flow.set(\"internetdown\", true)\n            }\n        }\n    }\n    flow.set(\"downcount\", downCount);\n    return msg;}\n    \n    /* Before refactor\n    if (msg.internettarget){\n    var downCount = flow.get(\"downcount\")\n    if(!isNaN(downCount)){\n        if(downCount<6){ //it would be better and more elegant to have something count the number of internet targets and pass that in, but for now it is just hardcoded to 6\n            downCount++\n            if(downCount == 6) {\n                flow.set(\"wentdownat\",Date.now())\n                flow.set(\"internetdown\", true)\n            }\n        }\n        \n    }\n    flow.set(\"downcount\", downCount);\n    return msg;}\n    */","outputs":1,"noerr":0,"x":670,"y":20,"wires":[[]],"info":"This Node is triggered by a ping response of false (i.e. more than 5 seconds to respond and thus either the network or the target host is offline)\n\n * gets how many consecutive times the ping has shown as down\n * sets internet down as true\n * Makes sure the down count is a number (belt and suspenders that could almost certainly be removed\n * If it is not a number than nothing happens\n * If it is, the it checks to see if the number of down responses has reached 6. The 6 is how many internet hosts are being examined. I assume that if we reach 6 then it is the internet and not just one or more of the total hosts that are down. If it is already at 6 then the system is treating the internet as down aleady and no further action is required.\n * If it is less than 6, then the count is incremented\n * If incrementing it has now made the count 6, it then records (in epoch time) the time the count went from 5 to 6.\n * Finally it saves the count back into a flow variable.\n"},{"id":"a8e0ea25.6b4598","type":"function","z":"aba876af.3a45e8","name":"Time to report outage?","func":"// Conceptually the flow is keeping track of how many down internet hosts there are per the ping results.\n// This function does 1/4th of that process whenever it is triggered. It is triggered when the ping status node recieves a  numeric quantity from the ping result.\n// The 3 things this funtion does are:\n//      1. decrement the down count\n//      2. whenever the down count reaches 0 and the internet down boolean is true, then this means the internet is back up so then:\n//          a. set internet down boolean back to false\n//          b. record the time/date it came back up\n//          c. set the boolean that it is time to write the outage (to google sheet) to true\n//      3. set the flow variable that the internet is down\n\nif (msg.internettarget){\n    var downCount = flow.get(\"downcount\")\n    var originalDownCount = downCount\n    flow.set(\"calculateandwriteoutage\",false)\n    if(!isNaN(downCount)){\n        if(downCount > 0){\n            downCount--\n            if(downCount === 0 && flow.get(\"internetdown\")) {\n                flow.set(\"internetdown\", false)\n                flow.set(\"cameupat\",Date.now())\n                flow.set(\"calculateandwriteoutage\",true)\n            }\n        }\n    }\n    flow.set(\"downcount\", downCount);\n//note a msg is passed along to the write to google portion of the flow only if the calculate and write outage boolean is true\n//by note returning a msg, that portion of the flow is otherwise not triggered\n    if(flow.get(\"calculateandwriteoutage\")){\n        return msg;\n    }\n}\n\n\n/*Before refactor\nif (msg.internettarget){\n    var downCount = flow.get(\"downcount\")\n    var originalDownCount = downCount\n    flow.set(\"calculateandwriteoutage\",false)\n    if(!isNaN(downCount)){\n        if(downCount > 0){\n            downCount--\n            if(downCount === 0 && flow.get(\"internetdown\")) {\n                flow.set(\"internetdown\", false)\n                flow.set(\"cameupat\",Date.now())\n                flow.set(\"calculateandwriteoutage\",true)\n            }\n        }\n    }\n    flow.set(\"downcount\", downCount);\n    if(flow.get(\"calculateandwriteoutage\")){\n        return msg;\n        \n    }\n}\n*/","outputs":1,"noerr":0,"x":740,"y":200,"wires":[["49386f9d.e406"]],"info":"This Node is triggered by a ping response of a number (i.e. between 1 and 4999 milliseconds for a ping response)\n\n * get how many nodes are down\n * save a copy of how many nodes are down\n * Set flow variable for whether to do a calculation and output to false by default\n * Makes sure the down count is a number (belt and suspenders that could almost certainly be removed)\n * Check if the count is greater than zero\n * If it is then decrement the count\n * check if the decremented count is 0 now and that the internetdown flag is true (this flag means the down count reached 6)\n * If it is, then the internet is up enough to then this record this as the time the internet came up and set the internetdown back to false and change the flag for whether to calculated and write the outage to Gsheet to true\n * Record the down count to the flow variable"},{"id":"e23234f9.e2e198","type":"switch","z":"aba876af.3a45e8","name":"","property":"pingtargetnum","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"str"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"},{"t":"eq","v":"4","vt":"str"},{"t":"eq","v":"5","vt":"str"},{"t":"eq","v":"6","vt":"str"},{"t":"eq","v":"7","vt":"str"},{"t":"eq","v":"8","vt":"str"},{"t":"eq","v":"9","vt":"str"},{"t":"eq","v":"10","vt":"str"},{"t":"eq","v":"11","vt":"str"},{"t":"eq","v":"12","vt":"str"}],"checkall":"false","repair":false,"outputs":12,"x":970,"y":100,"wires":[["3838a30d.96e3ec"],["fe23a693.782e18"],["1c3e1fb5.2eb41"],["2aa59192.460dde"],["86a51f60.f66ee"],["f5b3dcb3.7054e"],["1b3bd6d1.3f1d89"],["4192675e.f2a288"],["77eed45b.16a24c"],["f527a986.c0db98"],["7d4621ff.a0f4d"],["12c58136.35d53f"]]},{"id":"31ff04f7.29ffec","type":"function","z":"aba876af.3a45e8","name":"Calculate Duration of Outage","func":"//This function makes sure it should be doing the calculate, then calculates the duration of the outage turns of the calculate flag and sends on the duration\n//This calculation could probably be moved back to the Time to report outage? node\nif(flow.get(\"calculateandwriteoutage\")){\n    var duration = flow.get(\"cameupat\") - flow.get(\"wentdownat\")\n    flow.set(\"calculateandwriteoutage\",false)\n    msg.payload = duration\n    return msg;\n}","outputs":1,"noerr":0,"x":160,"y":380,"wires":[["a927b98b.7807d8"]]},{"id":"8fa076b9.4abe38","type":"change","z":"aba876af.3a45e8","name":"Set Ping Status Down","rules":[{"t":"set","p":"PingStatus","pt":"msg","to":"Down","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":740,"y":60,"wires":[["e23234f9.e2e198","36301876.b0d678","ffcbe690.d32758"]]},{"id":"3838a30d.96e3ec","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","x":1190,"y":20,"wires":[]},{"id":"fe23a693.782e18","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":60,"wires":[]},{"id":"1c3e1fb5.2eb41","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":100,"wires":[]},{"id":"2aa59192.460dde","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":140,"wires":[]},{"id":"86a51f60.f66ee","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":180,"wires":[]},{"id":"f5b3dcb3.7054e","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":220,"wires":[]},{"id":"1b3bd6d1.3f1d89","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":260,"wires":[]},{"id":"4192675e.f2a288","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":300,"wires":[]},{"id":"77eed45b.16a24c","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":340,"wires":[]},{"id":"f527a986.c0db98","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":380,"wires":[]},{"id":"7d4621ff.a0f4d","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1190,"y":420,"wires":[]},{"id":"12c58136.35d53f","type":"subflow:76e3605b.0e6e7","z":"aba876af.3a45e8","name":"","x":1189,"y":460,"wires":[]},{"id":"121af4fc.20aceb","type":"change","z":"aba876af.3a45e8","name":"Set Ping Status Good","rules":[{"t":"set","p":"PingStatus","pt":"msg","to":"Good","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":740,"y":100,"wires":[["e23234f9.e2e198","a8e0ea25.6b4598","d9ed9f5c.50725","ffcbe690.d32758"]]},{"id":"7eadecfd.6684c4","type":"change","z":"aba876af.3a45e8","name":"Set Ping Status Slow","rules":[{"t":"set","p":"PingStatus","pt":"msg","to":"Slow","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":740,"y":140,"wires":[["e23234f9.e2e198","a8e0ea25.6b4598","d9ed9f5c.50725","ffcbe690.d32758"]]},{"id":"a927b98b.7807d8","type":"function","z":"aba876af.3a45e8","name":"Translate Duration Function","func":"//This function translates a duration into a friendly person readable format\n/* \n * Create Variables\n * \n */\n        var milliseconds = msg.payload;\n        var years, weeks, days, hours, minutes, seconds, millis;\n    //creating 2 string versions of each of the durations that can be in the middle of a 1:01:01.001 duration \n    //minstr is the always 2 character one\n    //lminstr is the version that can be 1 or more characers that will be used when that part is the portion of the duration\n        var minstr, secstr, millistr, lminstr, lsecstr, lmillistr;\n        var whichcomponents, readableduration;\n\n/*\n * Calculate the numbers for the subcomponents\n * \n */\n    //by getting the remainder when dividing by 1000\n    //it leaves just the fraction of milliseconds\n        millis = milliseconds % 1000;\n    //the floor function drops the decimal portion\n    //returning the non fractional seconds\n        seconds = Math.floor(milliseconds / 1000);\n    //the floor function drops the decimal portion\n    //returning the non fractional minutes\n        minutes = Math.floor(seconds / 60);\n    //Once the minutes have been calculated, then\n    //the seconds is replaced with those seconds not\n    //accounted for by the minutes\n        seconds = seconds % 60;\n    //The same sequence as used for minutes/seconds\n    //then used to calulate minutes, hours, dayss, weeks, years\n\n        hours = Math.floor(minutes / 60);\n        minutes = minutes % 60;\n        days = Math.floor(hours / 24);\n        hours = hours % 24;\n        weeks = Math.floor(days / 7)\n        days = days % 7;\n        years = Math.floor(days / 365.25)\n        weeks = weeks % 52;\n\n/*\n * Put the subcomponents into msg payloads for easy access by later nodes\n *\n */\n        msg.years = years\n        msg.weeks = weeks\n        msg.days = days\n        msg.hours = hours\n        msg.minutes = minutes\n        msg.seconds = seconds\n        msg.millis = millis\n \n\n/*\n * create the string verssion for the subcomponents\n */\n    //milliseconds\n        lmillistr = millis.toString();\n        //put padding on the milliseconds so that 1 ms shows as .001 and not .1 when concatenated after a decimal\n            millistr = millis.toString().padStart(3, \"0\");\n    //seconds\n        lsecstr = seconds.toString();\n        //put padding on the seconds so that 1 s shows as :01.000 and not :1.000 when concatenated after a dividing :\n            secstr = lsecstr.padStart(2, \"0\");\n    //minutes\n        lminstr = minutes.toString();\n        //put padding on the minutes so that 1 m shows as :01:00.000 and not :1:00.000 when concatenated after a dividing :\n            minstr = lminstr.padStart(2, \"0\");\n\n/*\n * Build output based on largest significant populated unit\n * The general rule is to include in the output the largest unit (years, weeks, days, etc) followed by the next 2\n * smaller units if the happen to be populated\n */\n    readableduration =\"\"\n//years populated\n    if (years !== 0) { \n        if (days !== 0) {\n            if (days === 1) {\n                readableduration = \" \".concat(days.toString(), \" Day\", readableduration)\n            } else {\n                readableduration = \" \".concat(days.toString(), \" Days\", readableduration)\n            }\n        }\n        if (weeks !== 0) {\n            if (weeks === 1) {\n                readableduration = \" \".concat(weeks.toString(), \" Week\", readableduration)\n            } else {\n                readableduration = \" \".concat(weeks.toString(), \" Weeks\", readableduration)\n            }\n        }\n        if (years === 1) {\n            readableduration = years.toString().concat(\" Year\", readableduration)\n        } else {\n            readableduration = years.toString().concat(\" Years\", readableduration)\n        }\n//weeks populated\n    } else if (weeks !== 0) {\n        if (hours !== 0) {\n            if (hours === 1) {\n                readableduration = \" \".concat(hours.toString(), \" Hour\", readableduration)\n            } else {\n                readableduration = \" \".concat(hours.toString(), \" Hours\", readableduration)\n            }\n        }\n        if (days !== 0) {\n            if (weeks === 1) {\n                readableduration = \" \".concat(days.toString(), \" Day\", readableduration)\n            } else {\n                readableduration = \" \".concat(days.toString(), \" Days\", readableduration)\n            }\n        }\n        if (weeks === 1) {\n            readableduration = weeks.toString().concat(\" Week\", readableduration)\n        } else {\n            readableduration = weeks.toString().concat(\" Weeks\", readableduration)\n        }\n//days populated\n    } else if (days !== 0) {\n        if ((minutes !== 0) && (hours !== 0)) { //If both are non-zero then 1:01 format. If only 1 then either 2 hours or 1 minute\n            if (minutes !== 0) {\n                readableduration = \":\".concat(minstr, readableduration)\n            }\n            if (hours !== 0) {\n                readableduration = \" \".concat(hours.toString(), readableduration)\n            } else {\n                readableduration = \" 0\".concat(readableduration)\n            }\n        } else {\n            if (minutes === 1) {\n                readableduration = \" 1 Minute\".concat(readableduration)\n            } else if (minutes > 1) {\n                readableduration = \" \".concat(lminstr,\" Minutes\", readableduration)\n            } else if (hours === 1) {\n                readableduration = \" 1 Hour\".concat(readableduration)\n            } else {\n                if (hours >1) {\n                    readableduration = \" \".concat(hours.toString(),\" Hours\", readableduration)\n                }\n            }\n        }\n        if (days === 1) {\n            readableduration = days.toString().concat(\" Day\", readableduration)\n        } else {\n            readableduration = days.toString().concat(\" Days\", readableduration)\n        }\n//hours populated\n    } else if (hours !== 0) {\n        if ((minutes !== 0) || (seconds !== 0)) { //End result h Hours or h:mm:ss\n            readableduration = hours.toString().concat(\":\", minstr, \":\", secstr, readableduration)\n        } else {\n            if (hours === 1) {\n                readableduration = \"1 Hour\"\n            } else {\n                readableduration = hours.toString().concat(\" Hours\", readableduration)\n            }\n        }\n//minutes populated\n    } else if (minutes !== 0) { //End result m Minutes or mm:ss.MMM\n        if (seconds !== 0 || millis !== 0) { //End result h Hours or h:mm:ss\n            readableduration = lminstr.concat(\":\", secstr, \".\", millistr, readableduration)\n        } else {\n            if (minutes === 1) {\n                readableduration = \"1 Minute\".concat( readableduration)\n            } else {\n                readableduration = lminstr.concat(\" Minutes\", readableduration)\n            }\n        }\n//seconds populated\n    } else if (seconds !== 0) {\n        if (millis !== 0) { //End result s Seconds or s.MMM\n            readableduration = lsecstr.concat(\".\", millistr, \" Seconds\", readableduration)\n        } else {\n            if (seconds === 1) {\n                readableduration = \"1 Second\".concat( readableduration)\n            } else {\n                readableduration = lsecstr.concat(\" Seconds\", readableduration)\n            }\n        }\n//milliseconds populated\n    } else if (millis !== 0) {\n        if (millis !== 1) {\n            readableduration = lmillistr.concat(\" Milliseconds\", readableduration)\n        } else {\n            readableduration = \"1 Millisecond\".concat( readableduration)\n        }\n    } else {\n        readableduration = \"0\"\n    }\n    msg.years = years\n    msg.weeks = weeks\n    msg.days = days\n    msg.hours = hours\n    msg.minutes = minutes\n    msg.seconds = seconds\n    msg.millis = millis\n    msg.payload = readableduration\n    return msg;","outputs":1,"noerr":0,"x":420,"y":380,"wires":[["10b233e9.17db8c"]]},{"id":"5992611c.d72ca","type":"switch","z":"aba876af.3a45e8","name":"Ping Status","property":"payload","propertyType":"msg","rules":[{"t":"false"},{"t":"lt","v":"goodbad","vt":"msg"},{"t":"gte","v":"goodbad","vt":"msg"}],"checkall":"false","repair":false,"outputs":3,"x":550,"y":100,"wires":[["8fa076b9.4abe38"],["121af4fc.20aceb"],["7eadecfd.6684c4"]]},{"id":"de3cd25d.34a83","type":"join","z":"aba876af.3a45e8","name":"Assemble all columns and then send to Gsheet","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":800,"y":280,"wires":[["8c5abc2f.833c4"]]},{"id":"49386f9d.e406","type":"change","z":"aba876af.3a45e8","name":"Build Column A data","rules":[{"t":"set","p":"payload","pt":"msg","to":"Outage","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":140,"y":280,"wires":[["de3cd25d.34a83","9aa9821b.c03f1"]]},{"id":"9aa9821b.c03f1","type":"simpletime","z":"aba876af.3a45e8","name":"Populate Time Messages","x":150,"y":340,"wires":[["7e0f855b.bdf2dc"]]},{"id":"7e0f855b.bdf2dc","type":"change","z":"aba876af.3a45e8","name":"Build Date/Time for Column B","rules":[{"t":"set","p":"payload","pt":"msg","to":"myyear\t&\"-\"&\tmymonthn\t&\"-\"&\tmydom\t&\" \"&\tmyhourpm\t&\":\"&\tmyminute\t&\":\"&\tmysecond\t&\".\"&\tmymillis\t&\" \"&\tmypm","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":410,"y":340,"wires":[["de3cd25d.34a83","31ff04f7.29ffec"]]},{"id":"10b233e9.17db8c","type":"change","z":"aba876af.3a45e8","name":"Pass Duration for Column C and send complet to Join","rules":[{"t":"set","p":"complete","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":340,"y":420,"wires":[["de3cd25d.34a83"]]},{"id":"79bd7f0.4778b8","type":"subflow:c3686304.f6d31","z":"2b2a4010.a6b5e","name":"","env":[],"x":560,"y":80,"wires":[]},{"id":"4ba5918f.c183f","type":"comment","z":"54cae49c.6ee04c","name":"Ping 11 IP addresses","info":"This starts automatically but can be stopped via the Turn Off Pinging injection node.","x":140,"y":20,"wires":[]},{"id":"34f3f319.96490c","type":"function","z":"aba876af.3a45e8","name":"Format Internet UpDown for InfluxDB","func":"//This function checks if the pinged target is an internet host of local to the LAN host and then only does something for internet hosts\n//Assuming it is an internet host it creates input to be sent to the InfluxDB. This includes the hostname, IP address and 2 indicators of if the pinged target responded or not\n//At least for now both a boolean and numeric are sent as Chronograf doesn't seem to know how to handle boolean, but hopefully Grafana with discrete plugin will\nvar targetIP = msg.topic\nvar targetName = msg.pingtarget\nvar pingresult = msg.payload\nif (msg.internettarget) {\n    if (pingresult) {\n        combinedObj = [\n            {\n                Connected: true,\n                ConnectedNumeric: 1\n            },\n            {\n                TargetName: targetName,\n                TargetIPAddress: targetIP\n            }\n        ];\n    } else {\n        combinedObj = [\n            {\n                Connected: false,\n                ConnectedNumeric: 0\n            },\n            {\n                TargetName: targetName,\n                TargetIPAddress: targetIP\n            }\n        ];\n    }\n    msg.payload = combinedObj\n    return msg;\n}","outputs":1,"noerr":0,"x":430,"y":600,"wires":[["eda2c0bf.ab20c"]]},{"id":"d9ed9f5c.50725","type":"function","z":"aba876af.3a45e8","name":"Prepare Ping Duration for InfluxDB","func":"//This function creates input to be sent to the InfluxDB. This includes the hostname, IP address and the roundtrip time of the ping\nvar targetIP = msg.topic\nvar duration = msg.payload\nvar targetName = msg.pingtarget\nvar combinedObj;\ncombinedObj = [\n    {\n        RountripDuration: duration\n    },\n    {\n        TargetName: targetName,\n        TargetIPAddress: targetIP\n    }\n];\nmsg.payload = combinedObj\nreturn msg;","outputs":1,"noerr":0,"x":720,"y":520,"wires":[["eda2c0bf.ab20c"]]},{"id":"eda2c0bf.ab20c","type":"influxdb out","z":"aba876af.3a45e8","influxdb":"430b7850.44c1a8","name":"","measurement":"NetworkUptime","precision":"","retentionPolicy":"","x":1030,"y":600,"wires":[]},{"id":"88b0711.887869","type":"comment","z":"54cae49c.6ee04c","name":"Start Device Monitoring","info":"This starts automatically but can be stopped via the Turn Off Pinging injection node.","x":140,"y":140,"wires":[]},{"id":"ffcbe690.d32758","type":"function","z":"aba876af.3a45e8","name":"Populate Status Details","func":"msg.payload = \"Latest Ping Quality: \" + msg.PingStatus + \" (\"+ msg.payload+\")\"\nreturn msg;","outputs":1,"noerr":0,"x":1070,"y":520,"wires":[[]]},{"id":"4b143d5a.e11b54","type":"hubitat command","z":"98a6e865.a02ea8","name":"Mike Bedside","server":"55e4481a.722098","deviceId":"257","command":"","commandArgs":"","x":820,"y":60,"wires":[[]]},{"id":"53de30cb.5a905","type":"hubitat device","z":"98a6e865.a02ea8","name":"Mike Bedside Currently?","server":"55e4481a.722098","deviceId":"257","attribute":"switch","sendEvent":false,"x":370,"y":60,"wires":[["8c38df2a.5984b"]]},{"id":"8c38df2a.5984b","type":"switch","z":"98a6e865.a02ea8","name":"Off/On","property":"payload.value","propertyType":"msg","rules":[{"t":"eq","v":"off","vt":"str"},{"t":"eq","v":"on","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":550,"y":60,"wires":[["91cf3e9c.c1ae1"],["349ff253.9b9a7e"]]},{"id":"91cf3e9c.c1ae1","type":"change","z":"98a6e865.a02ea8","name":"On","rules":[{"t":"set","p":"command","pt":"msg","to":"on","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":670,"y":40,"wires":[["4b143d5a.e11b54"]]},{"id":"349ff253.9b9a7e","type":"change","z":"98a6e865.a02ea8","name":"Off","rules":[{"t":"set","p":"command","pt":"msg","to":"off","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":670,"y":80,"wires":[["4b143d5a.e11b54"]]},{"id":"323994d.e2eaa6c","type":"hubitat device","z":"98a6e865.a02ea8","name":"Aqara button pushed","server":"55e4481a.722098","deviceId":"356","attribute":"pushed","sendEvent":true,"x":120,"y":60,"wires":[["53de30cb.5a905"]]},{"id":"d430a9c7.458158","type":"comment","z":"98a6e865.a02ea8","name":"Push of Aqara button toggles the switch controlling Mike's beside lamp","info":"","x":270,"y":20,"wires":[]},{"id":"db5d9766.57c9f8","type":"inject","z":"1a0aa13a.9d7b8f","name":"Initiate Check every 5 sec","topic":"","payload":"1","payloadType":"num","repeat":"5","crontab":"","once":true,"onceDelay":0.1,"x":180,"y":100,"wires":[["da8cbc87.ae3a5"]]},{"id":"de53fc38.e8dfb","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Start/Restart","group":"18f340fe.a70a3f","order":1,"width":3,"height":1,"passthru":false,"label":"Start/Restart","tooltip":"","color":"","bgcolor":"Green","icon":"","payload":"1","payloadType":"num","topic":"","x":90,"y":220,"wires":[["92dd4796.6f9b78"]]},{"id":"876a7f0f.97ec","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Manual Update Frisco","group":"18f340fe.a70a3f","order":3,"width":3,"height":1,"passthru":false,"label":"Update Frisco","tooltip":"","color":"","bgcolor":"#163e80","icon":"","payload":"1","payloadType":"num","topic":"","x":120,"y":460,"wires":[["e3a36dc7.11be4"]]},{"id":"92dd4796.6f9b78","type":"function","z":"1a0aa13a.9d7b8f","name":"flow.set(\"status\",\"run\");","func":"flow.set(\"status\",\"run\");\nreturn msg;","outputs":1,"noerr":0,"x":280,"y":220,"wires":[[]]},{"id":"b95d43d.3a36dc","type":"function","z":"1a0aa13a.9d7b8f","name":"flow.set(\"status\",\"stopped\");","func":"flow.set(\"status\",\"stopped\");\nreturn msg;","outputs":1,"noerr":0,"x":300,"y":300,"wires":[[]]},{"id":"da8cbc87.ae3a5","type":"function","z":"1a0aa13a.9d7b8f","name":"Pass request if status is run","func":"var status = flow.get(\"status\")||\"stopped\";\n\nif (status==\"run\") {\n   msg.payload = 1;\n   return msg;\n}","outputs":1,"noerr":0,"x":440,"y":100,"wires":[["2c536eac.962c32"]]},{"id":"cccb923b.d858e","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"No filter","group":"4baf1468.abb01c","order":1,"width":0,"height":0,"passthru":false,"label":"No filter","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"none","x":80,"y":660,"wires":[["d5ba20b1.2a352"]]},{"id":"aa86cd79.d94ad","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"DFW","group":"4baf1468.abb01c","order":2,"width":3,"height":1,"passthru":false,"label":"DFW","tooltip":"Dallas/Fort Worth","color":"","bgcolor":"#163e80","icon":"","payload":"1","payloadType":"num","topic":"DFW","x":70,"y":700,"wires":[["d5ba20b1.2a352"]]},{"id":"27435c82.f51e34","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"DAL","group":"4baf1468.abb01c","order":3,"width":3,"height":1,"passthru":false,"label":"DAL","tooltip":"Love Field","color":"","bgcolor":"#dec733","icon":"","payload":"1","payloadType":"num","topic":"DAL","x":70,"y":740,"wires":[["d5ba20b1.2a352"]]},{"id":"d5ba20b1.2a352","type":"function","z":"1a0aa13a.9d7b8f","name":"","func":"flow.set(\"filter\",msg.topic);\nreturn msg;","outputs":1,"noerr":0,"x":250,"y":660,"wires":[["93bd58c2.f4fe18"]]},{"id":"93bd58c2.f4fe18","type":"function","z":"1a0aa13a.9d7b8f","name":"Clear the map","func":"var command = {clear :(\"Planes\")};\nmsg.payload ={command};\nreturn msg;","outputs":1,"noerr":0,"x":440,"y":620,"wires":[["be318435.10d8b8"]]},{"id":"caee0f1a.07ba8","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"AUS","group":"4baf1468.abb01c","order":4,"width":3,"height":1,"passthru":false,"label":"AUS","tooltip":"Austin","color":"","bgcolor":"#e3a209","icon":"","payload":"1","payloadType":"num","topic":"AUS","x":70,"y":780,"wires":[["d5ba20b1.2a352"]]},{"id":"f9d66341.1059a","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"ADK","group":"4baf1468.abb01c","order":5,"width":3,"height":1,"passthru":false,"label":"ADK","tooltip":"Adak","color":"black","bgcolor":"#03fff2","icon":"","payload":"1","payloadType":"num","topic":"ADK","x":70,"y":820,"wires":[["d5ba20b1.2a352"]]},{"id":"8e440b7b.6ab8f8","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Clear Map","group":"18f340fe.a70a3f","order":6,"width":3,"height":1,"passthru":false,"label":"Clear Map","tooltip":"","color":"","bgcolor":"","icon":"","payload":"unknown","payloadType":"str","topic":"","x":90,"y":620,"wires":[["93bd58c2.f4fe18"]]},{"id":"4140806e.6466f","type":"function","z":"1a0aa13a.9d7b8f","name":"","func":"flow.set(\"filter_ac_type\",msg.topic);\nreturn msg;","outputs":1,"noerr":0,"x":250,"y":860,"wires":[["93bd58c2.f4fe18"]]},{"id":"ba4470ea.c6f46","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"No filter","group":"9cbb54f5.392db8","order":1,"width":"0","height":"0","passthru":false,"label":"No filter","tooltip":"","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"none","x":80,"y":861,"wires":[["4140806e.6466f"]]},{"id":"f7bd0619.7b5958","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"E75L","group":"9cbb54f5.392db8","order":5,"width":3,"height":1,"passthru":false,"label":"E75L","tooltip":"E75L","color":"","bgcolor":"tan","icon":"","payload":"1","payloadType":"num","topic":"E75L","x":70,"y":980,"wires":[["4140806e.6466f"]]},{"id":"cd272b01.efcf38","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"CRJ9","group":"9cbb54f5.392db8","order":4,"width":3,"height":1,"passthru":false,"label":"CRJ9","tooltip":"CRJ9","color":"","bgcolor":"tan","icon":"","payload":"1","payloadType":"num","topic":"CRJ9","x":70,"y":940,"wires":[["4140806e.6466f"]]},{"id":"6ac93ca1.3b5044","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"B738","group":"9cbb54f5.392db8","order":11,"width":3,"height":1,"passthru":false,"label":"B738","tooltip":"B738","color":"","bgcolor":"tan","icon":"","payload":"1","payloadType":"num","topic":"B738","x":70,"y":900,"wires":[["4140806e.6466f"]]},{"id":"2069470f.ed9d38","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"PC12","group":"9cbb54f5.392db8","order":6,"width":3,"height":1,"passthru":false,"label":"PC12","tooltip":"PC12","color":"","bgcolor":"tan","icon":"","payload":"1","payloadType":"num","topic":"PC12","x":70,"y":1020,"wires":[["4140806e.6466f"]]},{"id":"70e6c475.1c4e3c","type":"inject","z":"1a0aa13a.9d7b8f","name":"Starutp","topic":"","payload":"1","payloadType":"num","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":120,"y":60,"wires":[["6a58e276.4439bc"]]},{"id":"6a58e276.4439bc","type":"function","z":"1a0aa13a.9d7b8f","name":"Set Initial Conditions","func":"flow.set(\"status\",\"stopped\");\nflow.set(\"filter\",\"none\");\nflow.set(\"filter_ac_type\",\"none\");\nflow.set(\"Flights\",0);\nflow.set(\"Unnamed\",0);\nreturn msg;","outputs":1,"noerr":0,"x":420,"y":60,"wires":[[]]},{"id":"e0dbb5f4.ea61a8","type":"inject","z":"1a0aa13a.9d7b8f","name":"Put static items","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":1100,"y":420,"wires":[["ae3e0ad9.38d3d8","40300d96.260ec4","f8753462.d6e958","df986dbb.427e1","f4d88d0e.bab43","b79ed39b.475ae"]]},{"id":"40300d96.260ec4","type":"change","z":"1a0aa13a.9d7b8f","name":"Ashmont 5 mile Ring","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"name\":\"Ashmont 5 Mile Ring\",\"lat\":33.110554,\"lon\":-96.790415,\"radius\":8047,\"layer\":\"Guides\",\"stroke\":true,\"fill\":false,\"color\":\"#163e80\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":1360,"y":500,"wires":[["65c68644.d9f5f8"]]},{"id":"df986dbb.427e1","type":"change","z":"1a0aa13a.9d7b8f","name":"Round Rock  5 mile ring","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"name\":\"Round Rock 5 Mile Ring\",\"lat\":30.580425,\"lon\":-97.6687,\"radius\":8047,\"layer\":\"Guides\",\"color\":\"#e3a209\",\"stroke\":true,\"fill\":false}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":1370,"y":580,"wires":[["65c68644.d9f5f8"]]},{"id":"ae3e0ad9.38d3d8","type":"change","z":"1a0aa13a.9d7b8f","name":"Ashmont +-1degree box","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"name\":\"Ashmont 2 degree box\",\"area\":[[34.110554,-95.790415],[32.110554,-97.790415]],\"layer\":\"Guides\",\"color\":\"#163e80\",\"stroke\":true,\"fill\":false}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":1370,"y":460,"wires":[["65c68644.d9f5f8"]]},{"id":"f8753462.d6e958","type":"change","z":"1a0aa13a.9d7b8f","name":"Round Rock +-1degree box","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"name\":\"Round Rock 2 degree box\",\"area\":[[31.580425,-96.6687],[29.580425,-98.6687]],\"layer\":\"Guides\",\"color\":\"#e3a209\",\"stroke\":true,\"fill\":false}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":1380,"y":540,"wires":[["65c68644.d9f5f8"]]},{"id":"f4d88d0e.bab43","type":"change","z":"1a0aa13a.9d7b8f","name":"Adak +-1degree box","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"name\":\"Adak 2 degree box\",\"area\":[[52.881211,-175.645945],[50.881211,-177.645945]],\"layer\":\"Guides\",\"color\":\"#42e6f5\",\"stroke\":true,\"fill\":false}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":1360,"y":620,"wires":[["65c68644.d9f5f8"]]},{"id":"8649aebd.474bf","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Manual Update Round Rock","group":"18f340fe.a70a3f","order":4,"width":3,"height":1,"passthru":false,"label":"Update Round Rock","tooltip":"","color":"","bgcolor":"#e3a209","icon":"","payload":"2","payloadType":"num","topic":"","x":140,"y":380,"wires":[["e3a36dc7.11be4"]]},{"id":"c190d566.420e98","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Manual Update Adak","group":"18f340fe.a70a3f","order":5,"width":3,"height":1,"passthru":false,"label":"Update Adak","tooltip":"","color":"black","bgcolor":"#03fff2","icon":"","payload":"3","payloadType":"num","topic":"","x":120,"y":540,"wires":[["e3a36dc7.11be4"]]},{"id":"65c68644.d9f5f8","type":"link out","z":"1a0aa13a.9d7b8f","name":"","links":["1d42282.fe857d8","ee484184.496fc"],"x":1615,"y":540,"wires":[]},{"id":"be318435.10d8b8","type":"link out","z":"1a0aa13a.9d7b8f","name":"","links":["ee484184.496fc","9524e728.08d2c8"],"x":555,"y":620,"wires":[]},{"id":"e087c831.86ec18","type":"worldmap in","z":"1a0aa13a.9d7b8f","name":"","path":"/worldmapF","events":"","x":780,"y":620,"wires":[["f30ac03a.0ad73"]]},{"id":"ffbec31e.59c3e","type":"worldmap","z":"1a0aa13a.9d7b8f","name":"","lat":"","lon":"","zoom":"9","layer":"","cluster":"9","maxage":"10","usermenu":"hide","layers":"hide","panit":"false","panlock":"false","zoomlock":"false","hiderightclick":"false","coords":"none","showgrid":"false","path":"/worldmapF","x":1530,"y":180,"wires":[]},{"id":"80419bfc.5b1768","type":"change","z":"1a0aa13a.9d7b8f","name":"Adak","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"command\":{\"zoom\":9,\"lat\":51.881211,\"lon\":-176.645945}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":950,"y":780,"wires":[["a93f4f39.d0072"]]},{"id":"190bf318.1a650d","type":"inject","z":"1a0aa13a.9d7b8f","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":755,"y":780,"wires":[["80419bfc.5b1768"]],"l":false},{"id":"fa8f9937.f27ee8","type":"change","z":"1a0aa13a.9d7b8f","name":"Round Rock","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"command\":{\"zoom\":9,\"lat\":30.580425,\"lon\":-97.6687}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":970,"y":860,"wires":[["a93f4f39.d0072"]]},{"id":"1a1fa532.ab215b","type":"inject","z":"1a0aa13a.9d7b8f","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":755,"y":860,"wires":[["fa8f9937.f27ee8"]],"l":false},{"id":"b4b2bf95.3b1ee","type":"change","z":"1a0aa13a.9d7b8f","name":"Frisco","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"command\":{\"zoom\":9,\"lat\":33.110554,\"lon\":-96.790415}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":950,"y":940,"wires":[["a93f4f39.d0072"]]},{"id":"bf385b8.2b4ada8","type":"inject","z":"1a0aa13a.9d7b8f","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":755,"y":940,"wires":[["b4b2bf95.3b1ee"]],"l":false},{"id":"e407c2b6.a946a","type":"comment","z":"1a0aa13a.9d7b8f","name":"Center Map Manually or View Dashboard","info":"","x":880,"y":720,"wires":[]},{"id":"f30ac03a.0ad73","type":"switch","z":"1a0aa13a.9d7b8f","name":"Put Static Items upon connection","property":"payload.action","propertyType":"msg","rules":[{"t":"eq","v":"other","vt":"str"},{"t":"eq","v":"connected","vt":"str"},{"t":"eq","v":"blah","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":1040,"y":620,"wires":[[],["ae3e0ad9.38d3d8","40300d96.260ec4","f8753462.d6e958","df986dbb.427e1","f4d88d0e.bab43","f597fefe.493b4","b79ed39b.475ae"],[]]},{"id":"3c198e04.951cf2","type":"comment","z":"1a0aa13a.9d7b8f","name":"Place Static Items","info":"","x":810,"y":380,"wires":[]},{"id":"d9c4756d.4912a8","type":"function","z":"1a0aa13a.9d7b8f","name":"Fix Null names, Color Aircraft, filter","func":"msg.payload.layer = \"Planes\"\nmsg.payload.iconColor = \"#111212\"\nif (msg.payload.name === null) {\n    msg.payload.name = \"Call Sign \" + msg.payload.callsign\n}\nif (msg.payload.destination == \"DFW\") {\n    msg.payload.iconColor = \"#4287f5\";\n} else if (msg.payload.destination == \"DAL\") {\n    msg.payload.iconColor = \"#dec733\";\n} else if (msg.payload.origin == \"DFW\") {\n    msg.payload.iconColor = \"#163e80\";\n} else if (msg.payload.origin == \"DAL\") {\n    msg.payload.iconColor = \"#6b6015\";\n} else if (msg.payload.destination == \"AUS\") {\n    msg.payload.iconColor = \"#e3a209\";\n} else if (msg.payload.origin == \"AUS\") {\n    msg.payload.iconColor = \"#6e520f\";\n} else if (msg.payload.destination == \"ADK\") {\n    msg.payload.iconColor = \"#03fff2\";\n} else if (msg.payload.origin == \"ADK\") {\n    msg.payload.iconColor = \"#026e68\";\n}\nvar flightcount = flow.get(\"Flights\")\nflightcount++\nflow.set(\"Flights\", flightcount)\nvar filter = flow.get(\"filter\");\nvar filter_ac_type = flow.get(\"filter_ac_type\");\n\nif ((msg.payload.origin == filter) || (msg.payload.destination == filter) || (\"none\" == filter)) {\n    if ((msg.payload.model == filter_ac_type) || (\"none\" == filter_ac_type)) {\n        return msg;\n    }\n}","outputs":1,"noerr":0,"x":1280,"y":140,"wires":[["35c05549.6bfb8a","ffbec31e.59c3e","d0c066c4.642c18"]]},{"id":"f597fefe.493b4","type":"change","z":"1a0aa13a.9d7b8f","name":"Adak Ct 1 meter ring","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"name\":\"Courmayeur Ct 5 Mile Ring\",\"lat\":51.8812115,\"lon\":-176.645945,\"radius\":1,\"layer\":\"Guides\",\"color\":\"#42e6f5\",\"stroke\":true,\"fill\":false}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":1360,"y":660,"wires":[["65c68644.d9f5f8"]]},{"id":"ee484184.496fc","type":"link in","z":"1a0aa13a.9d7b8f","name":"Send Update to Map","links":["65c68644.d9f5f8","be318435.10d8b8","a93f4f39.d0072"],"x":1395,"y":180,"wires":[["ffbec31e.59c3e"]]},{"id":"c1a95748.60dee8","type":"inject","z":"1a0aa13a.9d7b8f","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":860,"y":300,"wires":[["e8dfc379.a198b"]]},{"id":"deb62833.319248","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Pause","group":"18f340fe.a70a3f","order":2,"width":3,"height":1,"passthru":false,"label":"Pause","tooltip":"","color":"black","bgcolor":"Yellow","icon":"","payload":"1","payloadType":"num","topic":"","x":70,"y":300,"wires":[["b95d43d.3a36dc"]]},{"id":"23f14bb4.2a9524","type":"change","z":"1a0aa13a.9d7b8f","name":"Frisco Close","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"command\":{\"zoom\":12,\"lat\":33.110554,\"lon\":-96.790415}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":970,"y":1020,"wires":[["a93f4f39.d0072"]]},{"id":"32ca5c62.a67e44","type":"inject","z":"1a0aa13a.9d7b8f","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":755,"y":1020,"wires":[["23f14bb4.2a9524"]],"l":false},{"id":"b79ed39b.475ae","type":"change","z":"1a0aa13a.9d7b8f","name":"Ashmont Home","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"name\":\"Home\",\"lat\":33.110555,\"lon\":-96.790415,\"radius\":0,\"layer\":\"House\",\"stroke\":true,\"fill\":false,\"color\":\"red\",\"icon\":\"home\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":1340,"y":420,"wires":[["65c68644.d9f5f8"]]},{"id":"b7d336e3.07e088","type":"join","z":"1a0aa13a.9d7b8f","name":"","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"3","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1190,"y":100,"wires":[["6837dde8.0c0a64"]]},{"id":"6837dde8.0c0a64","type":"ui_table","z":"1a0aa13a.9d7b8f","group":"e298b809.c3c2f8","name":"Before mod","order":1,"width":"22","height":"7","columns":[{"field":"name","title":"Name","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"iconColor","title":"Icon Color","width":"105","align":"left","formatter":"color","formatterParams":{"target":"_blank"}},{"field":"id","title":"ID","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"registration","title":"Reg","width":"70","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"flight","title":"Flight","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"callsign","title":"Call Sign","width":"95","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"origin","title":"Origin","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"destination","title":"Destination","width":"110","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"altitude","title":"Altitude","width":"90","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"bearing","title":"Bearing","width":"90","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"speed","title":"Speed","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"rateOfClimb","title":"Rate of Climb","width":"125","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"isOnGround","title":"On Ground","width":"110","align":"left","formatter":"tickCross","formatterParams":{"target":"_blank"}},{"field":"squawkCode","title":"Squawk","width":"90","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"model","title":"Model","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"modeSCode","title":"Mode S","width":"95","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"radar","title":"Radar","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"timestamp","title":"Timestamp","width":"110","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"lat","title":"Latitude","width":"90","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"lon","title":"Longitude","width":"110","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":0,"cts":false,"x":1670,"y":101,"wires":[]},{"id":"35c05549.6bfb8a","type":"join","z":"1a0aa13a.9d7b8f","name":"","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"3","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1510,"y":141,"wires":[["cf54cd13.c8b4c"]]},{"id":"cf54cd13.c8b4c","type":"ui_table","z":"1a0aa13a.9d7b8f","group":"2a128af6.d72c46","name":"After Mod","order":2,"width":"22","height":"7","columns":[{"field":"name","title":"Name","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"iconColor","title":"Icon Color","width":"105","align":"left","formatter":"color","formatterParams":{"target":"_blank"}},{"field":"id","title":"ID","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"registration","title":"Reg","width":"70","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"flight","title":"Flight","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"callsign","title":"Call Sign","width":"95","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"origin","title":"Origin","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"destination","title":"Destination","width":"110","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"altitude","title":"Altitude","width":"90","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"bearing","title":"Bearing","width":"90","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"speed","title":"Speed","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"rateOfClimb","title":"Rate of Climb","width":"125","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"isOnGround","title":"On Ground","width":"110","align":"left","formatter":"tickCross","formatterParams":{"target":"_blank"}},{"field":"squawkCode","title":"Squawk","width":"90","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"model","title":"Model","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"modeSCode","title":"Mode S","width":"95","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"radar","title":"Radar","width":"80","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"timestamp","title":"Timestamp","width":"110","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"lat","title":"Latitude","width":"90","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"lon","title":"Longitude","width":"110","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":0,"cts":false,"x":1660,"y":141,"wires":[]},{"id":"cb24235e.8e734","type":"flightradar24","z":"1a0aa13a.9d7b8f","lat":"33.110554","latType":"num","lon":"-96.790415","lonType":"num","name":"Frisco","x":830,"y":140,"wires":[["828d7df1.ced63","b7d336e3.07e088","d9c4756d.4912a8"]]},{"id":"1bb63a9a.228e25","type":"flightradar24","z":"1a0aa13a.9d7b8f","lat":"30.580425","latType":"num","lon":"-97.6687","lonType":"num","name":"Round Rock","x":850,"y":100,"wires":[["828d7df1.ced63","b7d336e3.07e088","d9c4756d.4912a8"]]},{"id":"8231f6f8.f19dc8","type":"flightradar24","z":"1a0aa13a.9d7b8f","lat":"51.881211","latType":"num","lon":"-176.645945","lonType":"num","name":"Adak","x":830,"y":180,"wires":[["828d7df1.ced63","b7d336e3.07e088","d9c4756d.4912a8"]]},{"id":"ddcdc7a9.5ce8e8","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Frisco","group":"602d7c75.e52ed4","order":1,"width":3,"height":1,"passthru":false,"label":"Frisco","tooltip":"","color":"","bgcolor":"#163e80","icon":"","payload":"1","payloadType":"num","topic":"","x":770,"y":980,"wires":[["b4b2bf95.3b1ee"]]},{"id":"643b8a51.1824d4","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Ashmont","group":"602d7c75.e52ed4","order":1,"width":3,"height":1,"passthru":false,"label":"Ashmont","tooltip":"","color":"","bgcolor":"#163e80","icon":"","payload":"1","payloadType":"num","topic":"","x":780,"y":1060,"wires":[["23f14bb4.2a9524"]]},{"id":"275ee96d.2d18c6","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Round Rock","group":"602d7c75.e52ed4","order":1,"width":3,"height":1,"passthru":false,"label":"Round Rock","tooltip":"","color":"","bgcolor":"#e3a209","icon":"","payload":"1","payloadType":"num","topic":"","x":790,"y":900,"wires":[["fa8f9937.f27ee8"]]},{"id":"8a0cf593.496128","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Adak","group":"602d7c75.e52ed4","order":1,"width":3,"height":1,"passthru":false,"label":"Adak","tooltip":"","color":"black","bgcolor":"#03fff2","icon":"","payload":"1","payloadType":"num","topic":"","x":770,"y":820,"wires":[["80419bfc.5b1768"]]},{"id":"e7d8ec72.7f72c","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Start/Restart","group":"a4570963.5547f8","order":1,"width":3,"height":1,"passthru":false,"label":"Start/Restart","tooltip":"","color":"","bgcolor":"Green","icon":"","payload":"1","payloadType":"num","topic":"","x":90,"y":260,"wires":[["92dd4796.6f9b78"]]},{"id":"f2f3203e.fb7b3","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Pause","group":"a4570963.5547f8","order":2,"width":3,"height":1,"passthru":false,"label":"Pause","tooltip":"","color":"black","bgcolor":"Yellow","icon":"","payload":"1","payloadType":"num","topic":"","x":70,"y":340,"wires":[["b95d43d.3a36dc"]]},{"id":"b80a6cf0.92a58","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Manual Update Frisco","group":"a4570963.5547f8","order":3,"width":3,"height":1,"passthru":false,"label":"Update Frisco","tooltip":"","color":"","bgcolor":"#163e80","icon":"","payload":"1","payloadType":"num","topic":"","x":120,"y":500,"wires":[["e3a36dc7.11be4"]]},{"id":"d499fa12.02bb28","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Manual Update Round Rock","group":"a4570963.5547f8","order":4,"width":3,"height":1,"passthru":false,"label":"Update Round Rock","tooltip":"","color":"","bgcolor":"#e3a209","icon":"","payload":"2","payloadType":"num","topic":"","x":140,"y":420,"wires":[["e3a36dc7.11be4"]]},{"id":"9b0185ef.894958","type":"ui_button","z":"1a0aa13a.9d7b8f","name":"Manual Update Adak","group":"a4570963.5547f8","order":5,"width":3,"height":1,"passthru":false,"label":"Update Adak","tooltip":"","color":"black","bgcolor":"#03fff2","icon":"","payload":"3","payloadType":"num","topic":"","x":120,"y":580,"wires":[["e3a36dc7.11be4"]]},{"id":"9524e728.08d2c8","type":"link in","z":"1a0aa13a.9d7b8f","name":"Trigger FR for All 3 locations","links":["2c536eac.962c32","e3a36dc7.11be4","e8dfc379.a198b","be318435.10d8b8"],"x":655,"y":140,"wires":[["cb24235e.8e734","1bb63a9a.228e25","8231f6f8.f19dc8"]]},{"id":"e3a36dc7.11be4","type":"link out","z":"1a0aa13a.9d7b8f","name":"Go to FR for All 3 Locations","links":["9524e728.08d2c8"],"x":355,"y":480,"wires":[]},{"id":"e8dfc379.a198b","type":"link out","z":"1a0aa13a.9d7b8f","name":"Go to FR for All 3 Locations","links":["9524e728.08d2c8"],"x":955,"y":300,"wires":[]},{"id":"2c536eac.962c32","type":"link out","z":"1a0aa13a.9d7b8f","name":"Go to FR for All 3 Locations","links":["9524e728.08d2c8"],"x":595,"y":100,"wires":[]},{"id":"4d548e5d.bb86b","type":"comment","z":"1a0aa13a.9d7b8f","name":"Startup and recurring trigger","info":"","x":160,"y":20,"wires":[]},{"id":"4c6c5ac3.b7f5f4","type":"comment","z":"1a0aa13a.9d7b8f","name":"Get Radar results, Send to table and map","info":"","x":880,"y":20,"wires":[]},{"id":"adcc6159.2a741","type":"comment","z":"1a0aa13a.9d7b8f","name":"Dashboard controls","info":"","x":130,"y":180,"wires":[]},{"id":"7037ef88.7d4fd","type":"comment","z":"1a0aa13a.9d7b8f","name":"Quick trigger of 1 radar update","info":"","x":840,"y":260,"wires":[]},{"id":"a93f4f39.d0072","type":"link out","z":"1a0aa13a.9d7b8f","name":"","links":["1d42282.fe857d8","ee484184.496fc"],"x":1115,"y":880,"wires":[]},{"id":"828d7df1.ced63","type":"delay","z":"1a0aa13a.9d7b8f","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1030,"y":220,"wires":[[]]},{"id":"2e5b9f2f.80672","type":"inject","z":"54cae49c.6ee04c","name":"Start Monitoring All Hubitat Controlled Devices","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":230,"y":180,"wires":[[]]},{"id":"9b6c715d.7d0df","type":"hubitat device","z":"a73af62e.c418b8","name":"Aqara button","server":"55e4481a.722098","deviceId":"356","attribute":"","sendEvent":true,"x":330,"y":100,"wires":[["5cf6a5cd.b96f2c"]]},{"id":"7ec6233c.30bd0c","type":"link out","z":"a73af62e.c418b8","name":"Passthrough to enable subflow","links":["c3d2eb8b.0e8048","65cb4f4d.450a1","804a40fe.1d409"],"x":230,"y":40,"wires":[],"l":true},{"id":"c3d2eb8b.0e8048","type":"link in","z":"a73af62e.c418b8","name":"From Input","links":["7ec6233c.30bd0c"],"x":100,"y":100,"wires":[["9b6c715d.7d0df","cf8e9b11.19c528","18f40ebe.889bd1","49a1b73f.b67818","b237626a.d45a","e1e92c35.1d1fd","6b022c72.4d95c4","23464554.36baaa","5b30cc27.8dd184","2651fd89.0d2442","918f661d.bacfa8","60dbefae.a983f","f8119c1f.d777a","c115715c.9116e"]],"l":true},{"id":"7b80fecb.c058a","type":"influxdb out","z":"a73af62e.c418b8","influxdb":"b862b36a.1a11d","name":"","measurement":"Smarthome","precision":"","retentionPolicy":"","x":1770,"y":1240,"wires":[]},{"id":"13c8ec56.33a504","type":"function","z":"a73af62e.c418b8","name":"Format for InfluxDB & MQTT","func":"/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.payload.deviceId;\n\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar typeOfMeasurement = msg.payload.name;\n\n//gather the actual measurement value that was sent by the device to be included as the data for the field (when the measurement is valid) sent to InfluxDB\nvar theData = msg.payload.value;\n\n//initialize the measurements object\nvar measurementsObj = {};\n\n//initialize the tags (indices) object\nvar tagsObj = {};\n\n//create the object that will later be used to combine the measurementsObj and tagsObj\nvar combinedObj;\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\n\n\n/*\n *show node status section. In retrospect this is probably irrelevant\n *\n */\n\n\nif ((typeof theData == msg.payload.dataType.toLowerCase()) || (msg.payload.dataType == 'ENUM') || (theData === null)) {\n    if (typeof theData == 'number') {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched number\" });\n\n        if (!theData.isNaN) {\n            validMeasurement = true;\n        }\n    } else if (typeof theData == 'string') {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched string\" });\n        if (theData.length >= 0) {\n            validMeasurement = true;\n        }\n    } else if (msg.payload.dataType == 'ENUM') { //This is checking to make sure the value matches one of the values in the ENUM from the device \n        node.status({ fill: \"red\", shape: \"ring\", text: msg.payload.dataType + \" matched ENUM\" });\n\n        msg.payload.values.forEach(element => {\n            if (flow.get(deviceID +element) == theData) {\n                validMeasurement = true;\n            }\n        })\n    } else if (theData === null) {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched null data\" });\n        nullData = true;\n    } else {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched nonstandardtype\" });\n        nonStandardType = true;\n    }\n} else {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"measurement type mismatch\" });\n    measurementTypeMismatch = true;\n}\n\n\n\n\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\"]\ncommonTags.forEach(element => {\n    if (flow.get(deviceID +element).length > 0) {\n        tagsObj[element] = flow.get(deviceID + element)\n        validTag = true\n    }\n});\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //upon review this if statement looks redundant\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n\n//put the object into the payload\nmsg.payload = combinedObj;\n\n//build the status to be shown on the status of the subnode\nmsg.status = typeOfMeasurement + \": \" + theData;\n\n/* MQTT section \n * \n * \n * \n */\n\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = \"Hubitat/\" + flow.get(deviceID +\"MQTTDeviceTopic\") + \"/\" + typeOfMeasurement\n//add the data to be recorded to MQTT\nmsg2.payload = theData\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nif (!nullData) {\n    return [msg, msg2]\n}","outputs":2,"noerr":0,"x":1400,"y":1240,"wires":[["377f4ebf.3750b2","7b80fecb.c058a"],["495328dc.7fdd98"]]},{"id":"377f4ebf.3750b2","type":"change","z":"a73af62e.c418b8","name":"Move Status to Payload for Consumption by Status Node","rules":[{"t":"set","p":"payload","pt":"msg","to":"status","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1810,"y":1280,"wires":[[]]},{"id":"495328dc.7fdd98","type":"mqtt out","z":"a73af62e.c418b8","name":"Write reading to MQTT","topic":"","qos":"1","retain":"true","broker":"a5bf81ee.27852","x":1380,"y":1280,"wires":[]},{"id":"433897b3.6e5228","type":"subflow:a73af62e.c418b8","z":"54cae49c.6ee04c","name":"","env":[],"x":580,"y":180,"wires":[]},{"id":"628d4a24.2b1aa4","type":"inject","z":"98a6e865.a02ea8","name":"11 pm Turn Off First Light","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 23 * * *","once":false,"onceDelay":0.1,"x":160,"y":180,"wires":[["563a472b.7924e8"]]},{"id":"d4d54bb9.9ec768","type":"inject","z":"98a6e865.a02ea8","name":"11:30 pm Turn Off Second Living Room Light","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"30 23 * * *","once":false,"onceDelay":0.1,"x":220,"y":220,"wires":[["c490e6e5.e0e728"]]},{"id":"563a472b.7924e8","type":"hubitat command","z":"98a6e865.a02ea8","name":"Corner Off","server":"55e4481a.722098","deviceId":"100","command":"off","commandArgs":"","x":370,"y":180,"wires":[[]]},{"id":"c490e6e5.e0e728","type":"hubitat command","z":"98a6e865.a02ea8","name":"Table Lamp Off","server":"55e4481a.722098","deviceId":"225","command":"off","commandArgs":"","x":500,"y":220,"wires":[[]]},{"id":"27d40011.32d0e","type":"inject","z":"98a6e865.a02ea8","name":"7 pm Turn on Bedside Light","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 19 * * *","once":false,"onceDelay":0.1,"x":160,"y":260,"wires":[["3c71784d.a38fe8"]]},{"id":"3c71784d.a38fe8","type":"hubitat command","z":"98a6e865.a02ea8","name":"Mike Bedside On","server":"55e4481a.722098","deviceId":"257","command":"on","commandArgs":"","x":390,"y":260,"wires":[[]]},{"id":"8db205c8.4a1268","type":"hubitat device","z":"98a6e865.a02ea8","name":"Master Light Overhead Switch double tapped","server":"55e4481a.722098","deviceId":"33","attribute":"doubleTapped","sendEvent":true,"x":190,"y":120,"wires":[["3128627d.70be9e"]]},{"id":"3128627d.70be9e","type":"hubitat command","z":"98a6e865.a02ea8","name":"Turn on Table Lamp@10%","server":"55e4481a.722098","deviceId":"225","command":"setLevel","commandArgs":"10,0","x":500,"y":120,"wires":[[]]},{"id":"5fbe337e.5eaf8c","type":"function","z":"a73af62e.c418b8","name":"Splitting Preprocessor","func":"/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value;\n                --msg.payload.value;\n             }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else\n                {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else\n            {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else\n                    {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else\n                {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else\n                {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else\n            {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else\n                {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        latestMsg.payload.name = name + \":\" + key;\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n    //Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \":\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":1320,"y":40,"wires":[["13c8ec56.33a504","67fca0f9.da6f8"]]},{"id":"9fe681fa.d63","type":"function","z":"a73af62e.c418b8","name":"Split 2 types of device node outputs","func":"var singleAttributeData = false\nvar foundType\nfor (let [key, value] of Object.entries(msg.payload)) {\n  foundtype= typeof(value)\n  if ((foundtype==\"string\")||(foundtype==\"number\")||(foundtype==\"boolean\")){\n      singleAttributeData =true\n  }\n}\nif (singleAttributeData){\n    node.send([msg,null])\n} else\n{\n    node.send([null,msg])\n    //interate through the objects in the input\n    for (let [key, value] of Object.entries(msg.payload))\n    {    \n        msg.payload = value\n        node.send([msg,null])\n        node.done()\n        \n    }\n}\nreturn","outputs":2,"noerr":0,"x":1040,"y":40,"wires":[["5fbe337e.5eaf8c"],[]]},{"id":"79af2189.fdbfe","type":"link in","z":"a73af62e.c418b8","name":"Send to InfluxDB, MQTT","links":["5cf6a5cd.b96f2c","5f3cfdbe.fa5cd4","9b2f3d79.c657a","1d6d8c5.03a1d74"],"x":770,"y":40,"wires":[["9fe681fa.d63"]],"l":true},{"id":"5cf6a5cd.b96f2c","type":"link out","z":"a73af62e.c418b8","name":"Gather to Send to InfluxDB, MQTT","links":["79af2189.fdbfe"],"x":700,"y":100,"wires":[],"l":true},{"id":"cf8e9b11.19c528","type":"hubitat device","z":"a73af62e.c418b8","name":"Corner","server":"55e4481a.722098","deviceId":"100","attribute":"","sendEvent":true,"x":310,"y":140,"wires":[["5cf6a5cd.b96f2c"]]},{"id":"18f40ebe.889bd1","type":"hubitat device","z":"a73af62e.c418b8","name":"Cube 1","server":"55e4481a.722098","deviceId":"360","attribute":"","sendEvent":true,"x":320,"y":180,"wires":[["5cf6a5cd.b96f2c"]]},{"id":"49a1b73f.b67818","type":"hubitat device","z":"a73af62e.c418b8","name":"Downstairs Thermostat","server":"55e4481a.722098","deviceId":"161","attribute":"","sendEvent":true,"x":370,"y":220,"wires":[["5cf6a5cd.b96f2c"]]},{"id":"b237626a.d45a","type":"hubitat device","z":"a73af62e.c418b8","name":"Echo - Office","server":"55e4481a.722098","deviceId":"321","attribute":"","sendEvent":true,"x":330,"y":260,"wires":[["5f3cfdbe.fa5cd4"]]},{"id":"e1e92c35.1d1fd","type":"hubitat device","z":"a73af62e.c418b8","name":"Game Room Floor Lamp","server":"55e4481a.722098","deviceId":"357","attribute":"","sendEvent":true,"x":370,"y":300,"wires":[["5f3cfdbe.fa5cd4"]]},{"id":"6b022c72.4d95c4","type":"hubitat device","z":"a73af62e.c418b8","name":"Master Fan","server":"55e4481a.722098","deviceId":"65","attribute":"","sendEvent":true,"x":330,"y":340,"wires":[["9b2f3d79.c657a"]]},{"id":"23464554.36baaa","type":"hubitat device","z":"a73af62e.c418b8","name":"Master Light Overhead","server":"55e4481a.722098","deviceId":"33","attribute":"","sendEvent":true,"x":360,"y":380,"wires":[["9b2f3d79.c657a"]]},{"id":"5b30cc27.8dd184","type":"hubitat device","z":"a73af62e.c418b8","name":"Mike Bedside","server":"55e4481a.722098","deviceId":"257","attribute":"","sendEvent":true,"x":340,"y":420,"wires":[["9b2f3d79.c657a"]]},{"id":"2651fd89.0d2442","type":"hubitat device","z":"a73af62e.c418b8","name":"Mike Credenza Light","server":"55e4481a.722098","deviceId":"388","attribute":"","sendEvent":true,"x":360,"y":460,"wires":[["9b2f3d79.c657a"]]},{"id":"918f661d.bacfa8","type":"hubitat device","z":"a73af62e.c418b8","name":"Mike's Ipad","server":"55e4481a.722098","deviceId":"129","attribute":"","sendEvent":true,"x":330,"y":500,"wires":[["1d6d8c5.03a1d74"]]},{"id":"60dbefae.a983f","type":"hubitat device","z":"a73af62e.c418b8","name":"Office Desk Lamp","server":"55e4481a.722098","deviceId":"550","attribute":"","sendEvent":true,"x":350,"y":540,"wires":[["1d6d8c5.03a1d74"]]},{"id":"f8119c1f.d777a","type":"hubitat device","z":"a73af62e.c418b8","name":"Table Lamp","server":"55e4481a.722098","deviceId":"225","attribute":"","sendEvent":true,"x":330,"y":580,"wires":[["1d6d8c5.03a1d74"]]},{"id":"c115715c.9116e","type":"hubitat device","z":"a73af62e.c418b8","name":"Watch Uverse","server":"55e4481a.722098","deviceId":"262","attribute":"","sendEvent":true,"x":340,"y":620,"wires":[["1d6d8c5.03a1d74"]]},{"id":"5f3cfdbe.fa5cd4","type":"link out","z":"a73af62e.c418b8","name":"Gather to Send to InfluxDB, MQTT","links":["79af2189.fdbfe"],"x":700,"y":260,"wires":[],"l":true},{"id":"9b2f3d79.c657a","type":"link out","z":"a73af62e.c418b8","name":"Gather to Send to InfluxDB, MQTT","links":["79af2189.fdbfe"],"x":700,"y":340,"wires":[],"l":true},{"id":"1d6d8c5.03a1d74","type":"link out","z":"a73af62e.c418b8","name":"Gather to Send to InfluxDB, MQTT","links":["79af2189.fdbfe"],"x":700,"y":540,"wires":[],"l":true},{"id":"be4b942b.9bcd08","type":"config","z":"a73af62e.c418b8","name":"357 Game Room Floor Lamp Config","properties":[{"p":"357Floor","pt":"flow","to":"2","tot":"str"},{"p":"357Location","pt":"flow","to":"Northeast Corner","tot":"str"},{"p":"357Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"357DeviceType","pt":"flow","to":"Bulb","tot":"str"},{"p":"357Manufacturer","pt":"flow","to":"Ikea","tot":"str"},{"p":"357AccessProtocol","pt":"flow","to":"Zigbee","tot":"str"},{"p":"357PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"357PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"357House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"357MQTTDeviceTopic","pt":"flow","to":"Game Room Floor Lamp","tot":"str"}],"active":true,"x":1050,"y":300,"wires":[]},{"id":"5f674567.0f7cac","type":"config","z":"a73af62e.c418b8","name":"356 Aqara Button Config","properties":[{"p":"356Floor","pt":"flow","to":"1","tot":"str"},{"p":"356Location","pt":"flow","to":"Mike Bedside","tot":"str"},{"p":"356Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"356DeviceType","pt":"flow","to":"Button","tot":"str"},{"p":"356Manufacturer","pt":"flow","to":"Aqara","tot":"str"},{"p":"356AccessProtocol","pt":"flow","to":"Zigbee","tot":"str"},{"p":"356PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"356PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"356House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"356MQTTDeviceTopic","pt":"flow","to":"Aqara button","tot":"str"}],"active":true,"x":1010,"y":100,"wires":[]},{"id":"5e417522.eca8dc","type":"config","z":"a73af62e.c418b8","name":"100 Corner Lamp IKEA Switch Config","properties":[{"p":"100Floor","pt":"flow","to":"1","tot":"str"},{"p":"100Location","pt":"flow","to":"Northeast Corner","tot":"str"},{"p":"100Room","pt":"flow","to":"Living Room","tot":"str"},{"p":"100DeviceType","pt":"flow","to":"Switch","tot":"str"},{"p":"100Manufacturer","pt":"flow","to":"IKEA","tot":"str"},{"p":"100AccessProtocol","pt":"flow","to":"Zigbee","tot":"str"},{"p":"100PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"100PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"100House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"100MQTTDeviceTopic","pt":"flow","to":"Corner Light","tot":"str"}],"active":true,"x":1050,"y":140,"wires":[]},{"id":"19119e30.02ebd2","type":"config","z":"a73af62e.c418b8","name":"360 Cube 1 Config","properties":[{"p":"360Floor","pt":"flow","to":"2","tot":"str"},{"p":"360Location","pt":"flow","to":"Mike's Desk","tot":"str"},{"p":"360Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"360DeviceType","pt":"flow","to":"Cube","tot":"str"},{"p":"360Manufacturer","pt":"flow","to":"Aqara","tot":"str"},{"p":"360AccessProtocol","pt":"flow","to":"Zigbee","tot":"str"},{"p":"360PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"360PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"360House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"360MQTTDeviceTopic","pt":"flow","to":"Cube 1","tot":"str"}],"active":true,"x":990,"y":180,"wires":[]},{"id":"7f51d1c4.17391","type":"config","z":"a73af62e.c418b8","name":"161 Lennox Thermostat Config","properties":[{"p":"161Floor","pt":"flow","to":"1","tot":"str"},{"p":"161Location","pt":"flow","to":"Narrow Hall","tot":"str"},{"p":"161Room","pt":"flow","to":"","tot":"str"},{"p":"161DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"161Manufacturer","pt":"flow","to":"Lennox","tot":"str"},{"p":"161AccessProtocol","pt":"flow","to":"WiFi","tot":"str"},{"p":"161PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"161PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"161House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"161MQTTDeviceTopic","pt":"flow","to":"Lennox Thermostat","tot":"str"}],"active":true,"x":1030,"y":220,"wires":[]},{"id":"866270d7.044cb","type":"config","z":"a73af62e.c418b8","name":"321 Office Echo Config","properties":[{"p":"321Floor","pt":"flow","to":"2","tot":"str"},{"p":"321Location","pt":"flow","to":"Mike's Desk","tot":"str"},{"p":"321Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"321DeviceType","pt":"flow","to":"Echo","tot":"str"},{"p":"321Manufacturer","pt":"flow","to":"Amazon","tot":"str"},{"p":"321AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"321PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"321PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"321House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"321MQTTDeviceTopic","pt":"flow","to":"Office Echo","tot":"str"}],"active":true,"x":1010,"y":260,"wires":[]},{"id":"f81312e7.2608b","type":"config","z":"a73af62e.c418b8","name":"65 Master Fan Config","properties":[{"p":"65Floor","pt":"flow","to":"1","tot":"str"},{"p":"65Location","pt":"flow","to":"North","tot":"str"},{"p":"65Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"65DeviceType","pt":"flow","to":"Switch","tot":"str"},{"p":"65Manufacturer","pt":"flow","to":"GE/Jasco","tot":"str"},{"p":"65AccessProtocol","pt":"flow","to":"Z-Wave","tot":"str"},{"p":"65PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"65PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"65House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"65MQTTDeviceTopic","pt":"flow","to":"Master Fan","tot":"str"}],"active":true,"x":1000,"y":340,"wires":[]},{"id":"e33c573c.c232f8","type":"config","z":"a73af62e.c418b8","name":"33 Master Light Config","properties":[{"p":"33Floor","pt":"flow","to":"1","tot":"str"},{"p":"33Location","pt":"flow","to":"North","tot":"str"},{"p":"33Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"33DeviceType","pt":"flow","to":"Switch","tot":"str"},{"p":"33Manufacturer","pt":"flow","to":"GE/Jasco","tot":"str"},{"p":"33AccessProtocol","pt":"flow","to":"Z-Wave","tot":"str"},{"p":"33PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"33PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"33House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"33MQTTDeviceTopic","pt":"flow","to":"Master Overhead Light","tot":"str"}],"active":true,"x":1000,"y":380,"wires":[]},{"id":"f4206f1a.b8e7b","type":"config","z":"a73af62e.c418b8","name":"257 Mike Bedside Config","properties":[{"p":"257Floor","pt":"flow","to":"1","tot":"str"},{"p":"257Location","pt":"flow","to":"Southeast Corner","tot":"str"},{"p":"257Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"257DeviceType","pt":"flow","to":"Switch","tot":"str"},{"p":"257Manufacturer","pt":"flow","to":"Wemo","tot":"str"},{"p":"257AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"257PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"257PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"257House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"257MQTTDeviceTopic","pt":"flow","to":"Mike's Bedside Light","tot":"str"}],"active":true,"x":1010,"y":420,"wires":[]},{"id":"cc12bf55.bf86c","type":"config","z":"a73af62e.c418b8","name":"388 Mike Credenza Light Config","properties":[{"p":"388Floor","pt":"flow","to":"2","tot":"str"},{"p":"388Location","pt":"flow","to":"Mike's Desk","tot":"str"},{"p":"388Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"388DeviceType","pt":"flow","to":"Switch","tot":"str"},{"p":"388Manufacturer","pt":"flow","to":"IKEA","tot":"str"},{"p":"388AccessProtocol","pt":"flow","to":"Zigbee","tot":"str"},{"p":"388PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"388PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"388House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"388MQTTDeviceTopic","pt":"flow","to":"Mike's Credenza Light","tot":"str"}],"active":true,"x":1030,"y":460,"wires":[]},{"id":"4d415bf0.1cb284","type":"config","z":"a73af62e.c418b8","name":"129 Mike iPad Config","properties":[{"p":"129Floor","pt":"flow","to":"","tot":"str"},{"p":"129Location","pt":"flow","to":"","tot":"str"},{"p":"129Room","pt":"flow","to":"","tot":"str"},{"p":"129DeviceType","pt":"flow","to":"Tablet","tot":"str"},{"p":"129Manufacturer","pt":"flow","to":"Apple","tot":"str"},{"p":"129AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"129PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"129PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"129House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"129MQTTDeviceTopic","pt":"flow","to":"Mike's iPad","tot":"str"}],"active":true,"x":1000,"y":500,"wires":[]},{"id":"d1089d9c.8a2fa","type":"config","z":"a73af62e.c418b8","name":"550 Ofice Desk Lamp Config","properties":[{"p":"550Floor","pt":"flow","to":"2","tot":"str"},{"p":"550Location","pt":"flow","to":"Mike's Desk","tot":"str"},{"p":"550Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"550DeviceType","pt":"flow","to":"Switch","tot":"str"},{"p":"550Manufacturer","pt":"flow","to":"IKEA","tot":"str"},{"p":"550AccessProtocol","pt":"flow","to":"Zigbee","tot":"str"},{"p":"550PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"550PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"550House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"550MQTTDeviceTopic","pt":"flow","to":"Mike's Office Lamp","tot":"str"}],"active":true,"x":1020,"y":540,"wires":[]},{"id":"12d11f92.746c3","type":"config","z":"a73af62e.c418b8","name":"225 Table Lamp Config","properties":[{"p":"225Floor","pt":"flow","to":"1","tot":"str"},{"p":"225Location","pt":"flow","to":"North Side","tot":"str"},{"p":"225Room","pt":"flow","to":"Living Room","tot":"str"},{"p":"225DeviceType","pt":"flow","to":"Bulb","tot":"str"},{"p":"225Manufacturer","pt":"flow","to":"TP-Link","tot":"str"},{"p":"225AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"225PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"225PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"225House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"225MQTTDeviceTopic","pt":"flow","to":"Table Lamp","tot":"str"}],"active":true,"x":1010,"y":580,"wires":[]},{"id":"5091e13d.3b68b","type":"config","z":"a73af62e.c418b8","name":"262 Mike Watch Uverse","properties":[{"p":"262Floor","pt":"flow","to":"1","tot":"str"},{"p":"262Location","pt":"flow","to":"TV Cabinet","tot":"str"},{"p":"262Room","pt":"flow","to":"Living Room","tot":"str"},{"p":"262DeviceType","pt":"flow","to":"Harmony Activity","tot":"str"},{"p":"262Manufacturer","pt":"flow","to":"Logitech","tot":"str"},{"p":"262AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"262PhysicalVirtualType","pt":"flow","to":"Virtual","tot":"str"},{"p":"262PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"262House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"262MQTTDeviceTopic","pt":"flow","to":"Watch Uverse","tot":"str"}],"active":true,"x":1010,"y":620,"wires":[]},{"id":"bee29f25.e7e95","type":"split","z":"f9a34738.f12c28","name":"k:v pair Key ->name, k:v pair Value ->payload","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"name","x":1970,"y":80,"wires":[["1ef57e64.81fd82","9392480e.f981f8"]]},{"id":"a6bbf579.19e548","type":"change","z":"f9a34738.f12c28","name":"","rules":[{"t":"delete","p":"_rawMessage","pt":"msg"},{"t":"delete","p":"Homebridge","pt":"msg"},{"t":"delete","p":"_device","pt":"msg"},{"t":"delete","p":"parts","pt":"msg"},{"t":"delete","p":"Manufacturer","pt":"msg"},{"t":"delete","p":"_confId","pt":"msg"},{"t":"set","p":"value","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"set","p":"payload.value","pt":"msg","to":"value","tot":"msg"},{"t":"set","p":"payload.name","pt":"msg","to":"name","tot":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"name","pt":"msg"},{"t":"delete","p":"translate","pt":"msg"},{"t":"set","p":"payload.deviceId","pt":"msg","to":"DeviceID","tot":"msg"},{"t":"delete","p":"DeviceID","pt":"msg"},{"t":"delete","p":"TranslationTarget","pt":"msg"},{"t":"delete","p":"TranslationType","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2370,"y":460,"wires":[["a4fea75b.dd8748"]]},{"id":"c2c2bbb5.74f918","type":"change","z":"f9a34738.f12c28","name":"name -> topic","rules":[{"t":"set","p":"topic","pt":"msg","to":"name","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1460,"y":160,"wires":[["831c7de9.65f3c"]]},{"id":"27685686.faec2a","type":"influxdb out","z":"f9a34738.f12c28","influxdb":"b862b36a.1a11d","name":"","measurement":"Smarthome","precision":"","retentionPolicy":"","x":3230,"y":400,"wires":[]},{"id":"5f42d976.714a58","type":"function","z":"f9a34738.f12c28","name":"Format for InfluxDB & MQTT Homebridge","func":"/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.payload.deviceId;\n//node.warn(\"11 \"+ deviceID)\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar typeOfMeasurement = msg.payload.name;\n\n//gather the actual measurement value that was sent by the device to be included as the data for the field (when the measurement is valid) sent to InfluxDB\nvar theData = msg.payload.value;\n//initialize the measurements object\nvar measurementsObj = {};\n\n//initialize the tags (indices) object\nvar tagsObj = {};\n\n//create the object that will later be used to combine the measurementsObj and tagsObj\nvar combinedObj;\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\n\n\n\nif ((typeof theData == msg.payload.dataType.toLowerCase()) || (msg.payload.dataType == 'ENUM') || (theData === null)) {\n    if (typeof theData == 'number') {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched number\" });\n        if (!theData.isNaN) {\n            validMeasurement = true;\n        }\n    } else if (typeof theData == 'string') {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched string\" });\n        //node.warn(\"50 length\")\n        if (theData.length >= 0) {\n            validMeasurement = true;\n        }\n    } else if (typeof theData == 'boolean') {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched boolean\" });\n        validMeasurement = true;\n    } else if (msg.payload.dataType == 'ENUM') { //This is checking to make sure the value matches one of the values in the ENUM from the device \n        node.status({ fill: \"red\", shape: \"ring\", text: msg.payload.dataType + \" matched ENUM\" });\n\n        msg.payload.values.forEach(element => {\n            if (flow.get(deviceID + element) == theData) {\n                validMeasurement = true;\n            }\n        })\n    } else if (theData === null) {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched null data\" });\n        nullData = true;\n    } else {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched nonstandardtype\" });\n        nonStandardType = true;\n    }\n}\nelse {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"measurement type mismatch\" });\n    measurementTypeMismatch = true;\n}\n\n\n\n\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\", \"PhysicalDigitalRegular\"]\ncommonTags.forEach(element => {\n    //node.warn(\"84 length\")\n    //node.warn(element)\n    //node.warn(deviceID)\n    if (flow.get(deviceID + element).length > 0) {\n        tagsObj[element] = flow.get(deviceID + element)\n        validTag = true\n    }\n});\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    //node.warn(\"94 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"113 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"123 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n\n//put the object into the payload\nmsg.payload = combinedObj;\n\n//build the status to be shown on the status of the subnode\nmsg.status = typeOfMeasurement + \": \" + theData;\n\n/* MQTT section \n * \n * \n * \n */\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = \"Homebridge/\" + flow.get(deviceID + \"MQTTDeviceTopic\") + \"/\" + typeOfMeasurement\n//add the data to be recorded to MQTT\nmsg2.payload = theData\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nif (!nullData) {\n    return [msg, msg2]\n}","outputs":2,"noerr":0,"x":2860,"y":460,"wires":[["27685686.faec2a","e648e029.afc3a"],["567d385d.589a18"]]},{"id":"567d385d.589a18","type":"mqtt out","z":"f9a34738.f12c28","name":"Write reading to MQTT","topic":"","qos":"1","retain":"true","broker":"a5bf81ee.27852","x":3160,"y":480,"wires":[]},{"id":"a4fea75b.dd8748","type":"function","z":"f9a34738.f12c28","name":"Splitting Preprocessor","func":"/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value\n                --msg.payload.value\n             }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else\n                {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else\n            {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else\n                    {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else\n                {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else\n                {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else\n            {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else\n                {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        latestMsg.payload.name = name + \":\" + key;\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n    //Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \":\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":2580,"y":460,"wires":[["5f42d976.714a58"]]},{"id":"e648e029.afc3a","type":"change","z":"f9a34738.f12c28","name":"needed?? Move Status to Payload for Consumption by Status Node","rules":[{"t":"set","p":"payload","pt":"msg","to":"status","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3300,"y":440,"wires":[[]]},{"id":"1b13a87.0d07e58","type":"hb-status","z":"f9a34738.f12c28","name":"Downstairs Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1480,"wires":[["5b95acb3.6703c4"]]},{"id":"ea65001b.4eed9","type":"switch","z":"f9a34738.f12c28","name":"10TF Translate","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":3210,"y":60,"wires":[["12d3c9f2.fc39a6"],["9c3b0ec9.7f3be"]],"outputLabels":["True","False"]},{"id":"12d3c9f2.fc39a6","type":"change","z":"f9a34738.f12c28","name":"Value True","rules":[{"t":"set","p":"name","pt":"msg","to":"msg.name&\"TranslatedToBoolean\"\t","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":3380,"y":40,"wires":[["97e5868a.1f6d68"]]},{"id":"9c3b0ec9.7f3be","type":"change","z":"f9a34738.f12c28","name":"Value False","rules":[{"t":"set","p":"name","pt":"msg","to":"msg.name&\"TranslatedToBoolean\"\t\t","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"false","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":3380,"y":80,"wires":[["97e5868a.1f6d68"]]},{"id":"bd274667.e264c8","type":"change","z":"f9a34738.f12c28","name":"CtoF Translate","rules":[{"t":"set","p":"name","pt":"msg","to":"msg.name&\"F\"\t","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"payload*9/5+32","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":3210,"y":120,"wires":[["29b82fd4.8eec1"]]},{"id":"4b38e4c.5af8f1c","type":"switch","z":"f9a34738.f12c28","name":"CurrentHeatingCoolingState Translate","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"},{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":3260,"y":220,"wires":[["ff99cc8c.1b17"],["252f93bc.e62a0c"],["c5356c3f.41874"],["5afc7f76.72e51"]],"outputLabels":["off","heat","cool","heat-cool"]},{"id":"ff99cc8c.1b17","type":"change","z":"f9a34738.f12c28","name":"Value Off","rules":[{"t":"set","p":"name","pt":"msg","to":"msg.name&\"TranslatedToBoolean\"\t","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"off","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3510,"y":160,"wires":[["2b4cceab.bf3d92"]]},{"id":"252f93bc.e62a0c","type":"change","z":"f9a34738.f12c28","name":"Value Heat","rules":[{"t":"set","p":"name","pt":"msg","to":"msg.name&\"TranslatedToBoolean\"\t","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"heat","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3520,"y":200,"wires":[["2b4cceab.bf3d92"]]},{"id":"c5356c3f.41874","type":"change","z":"f9a34738.f12c28","name":"Value Cool","rules":[{"t":"set","p":"name","pt":"msg","to":"msg.name&\"TranslatedToBoolean\"\t","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3520,"y":240,"wires":[["2b4cceab.bf3d92"]]},{"id":"5afc7f76.72e51","type":"change","z":"f9a34738.f12c28","name":"Value Heat-Cool","rules":[{"t":"set","p":"name","pt":"msg","to":"msg.name&\"TranslatedToBoolean\"\t","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"heat-cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3530,"y":280,"wires":[["2b4cceab.bf3d92"]]},{"id":"647cd3f8.06a1bc","type":"config","z":"f9a34738.f12c28","name":"HB001 Anyone Presence","properties":[{"p":"HB001Floor","pt":"flow","to":"","tot":"str"},{"p":"HB001Location","pt":"flow","to":"","tot":"str"},{"p":"HB001Room","pt":"flow","to":"","tot":"str"},{"p":"HB001DeviceType","pt":"flow","to":"Presence","tot":"str"},{"p":"HB001Manufacturer","pt":"flow","to":"homebridge-people-geofence","tot":"str"},{"p":"HB001AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB001PhysicalVirtualType","pt":"flow","to":"Virtual","tot":"str"},{"p":"HB001PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB001House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB001MQTTDeviceTopic","pt":"flow","to":"Anyone Present","tot":"str"},{"p":"HB001OccupancyDetected","pt":"flow","to":"10TF","tot":"str"}],"active":true,"x":170,"y":720,"wires":[]},{"id":"52bf20d9.2c66e","type":"config","z":"f9a34738.f12c28","name":"HB002 Downstairs Carbon Monoxide","properties":[{"p":"HB002Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB002Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB002Room","pt":"flow","to":"Mini-Hall","tot":"str"},{"p":"HB002DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB002Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB002AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB002PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB002PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB002House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB002MQTTDeviceTopic","pt":"flow","to":"Downwstair Hall Nest Protect","tot":"str"},{"p":"HB002CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB002StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB002StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB002ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":210,"y":1479,"wires":[]},{"id":"798f469f.1fce38","type":"comment","z":"f9a34738.f12c28","name":"Presence Sensors","info":"","x":150,"y":680,"wires":[]},{"id":"56aa56fb.dda018","type":"comment","z":"f9a34738.f12c28","name":"Placeholder Kathy Home","info":"","x":170,"y":960,"wires":[]},{"id":"1ef57e64.81fd82","type":"change","z":"f9a34738.f12c28","name":"","rules":[{"t":"set","p":"TranslationTarget","pt":"msg","to":"DeviceID&name","tot":"jsonata"},{"t":"set","p":"TranslationType","pt":"msg","to":"$flowContext([$$.TranslationTarget])","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":2790,"y":20,"wires":[["be9353ed.da2b6","57819b5c.3b68f4"]]},{"id":"be9353ed.da2b6","type":"switch","z":"f9a34738.f12c28","name":"","property":"TranslationType","propertyType":"msg","rules":[{"t":"eq","v":"10TF","vt":"str"},{"t":"eq","v":"C2F","vt":"str"},{"t":"eq","v":"NestThMap","vt":"str"},{"t":"eq","v":"012CF","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":3000,"y":160,"wires":[["ea65001b.4eed9"],["bd274667.e264c8"],["4b38e4c.5af8f1c"],["f42f879e.018fe8"]],"outputLabels":["1 or 0 to True or False Map","Celcius to Fahrenheit Conversion","Nest Thermostat Map","Celcius or Fahrenheit Map"]},{"id":"6dad159c.2922fc","type":"link in","z":"f9a34738.f12c28","name":"Cleanup Parse and Send","links":["97e5868a.1f6d68","57819b5c.3b68f4","29b82fd4.8eec1","2b4cceab.bf3d92","171e5c14.6a53b4"],"x":2150,"y":460,"wires":[["a6bbf579.19e548"]],"l":true},{"id":"97e5868a.1f6d68","type":"link out","z":"f9a34738.f12c28","name":"Go To Cleanup, Parse and Send","links":["6dad159c.2922fc"],"x":3620,"y":60,"wires":[],"l":true},{"id":"57819b5c.3b68f4","type":"link out","z":"f9a34738.f12c28","name":"Go To Cleanup, Parse and Send","links":["6dad159c.2922fc"],"x":3040,"y":20,"wires":[],"l":true},{"id":"29b82fd4.8eec1","type":"link out","z":"f9a34738.f12c28","name":"Go To Cleanup, Parse and Send","links":["6dad159c.2922fc"],"x":3440,"y":120,"wires":[],"l":true},{"id":"2b4cceab.bf3d92","type":"link out","z":"f9a34738.f12c28","name":"Go To Cleanup, Parse and Send","links":["6dad159c.2922fc"],"x":3800,"y":220,"wires":[],"l":true},{"id":"5b95acb3.6703c4","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB002","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB002","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1000,"y":1500,"wires":[["90ec7406.2298d8"]]},{"id":"1603ee4.7168c12","type":"link in","z":"f9a34738.f12c28","name":"Jump In","links":["c8fbb0bd.33e56","90ec7406.2298d8","cd7d5571.9128d8","f3a2d75c.740ec8","81537293.13e73"],"x":1430,"y":780,"wires":[["585a8652.004658"]],"l":true},{"id":"202dcb4.a2a8734","type":"hb-status","z":"f9a34738.f12c28","name":"Anyone","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerAnyone00000086","conf":"df59aa47.b26148","x":400,"y":720,"wires":[["f7257b5f.36fde8"]]},{"id":"f7257b5f.36fde8","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB001","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB001","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":760,"y":740,"wires":[["cd7d5571.9128d8"]]},{"id":"c8fbb0bd.33e56","type":"link out","z":"f9a34738.f12c28","name":"Go To Jump In","links":["1603ee4.7168c12"],"x":1260,"y":2240,"wires":[],"l":true},{"id":"d26af67.632a608","type":"hb-status","z":"f9a34738.f12c28","name":"Downstairs Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Motion00000085","conf":"df59aa47.b26148","x":690,"y":2520,"wires":[["636d300.353bbd"]]},{"id":"748df81f.2777b8","type":"config","z":"f9a34738.f12c28","name":"HB003 Downstairs Motion Sensor","properties":[{"p":"HB003Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB003Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB003Room","pt":"flow","to":"Mini-Hall","tot":"str"},{"p":"HB003DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB003Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB003AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB003PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB003PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB003House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB003MQTTDeviceTopic","pt":"flow","to":"Downwstair Hall Nest Protect","tot":"str"},{"p":"HB003MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":2520,"wires":[]},{"id":"636d300.353bbd","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB003","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB003","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2540,"wires":[["f3a2d75c.740ec8"]]},{"id":"cd850a69.e4ed28","type":"hb-status","z":"f9a34738.f12c28","name":"Downstairs Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3200,"wires":[["84bd556d.20f958"]]},{"id":"84bd556d.20f958","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB004","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB004","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3220,"wires":[["81537293.13e73"]]},{"id":"e024dd52.5928f","type":"config","z":"f9a34738.f12c28","name":"HB004 Downstairs Smoke","properties":[{"p":"HB004Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB004Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB004Room","pt":"flow","to":"Mini-Hall","tot":"str"},{"p":"HB004DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB004Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB004AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB004PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB004PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB004House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB004MQTTDeviceTopic","pt":"flow","to":"Downwstair Hall Nest Protect","tot":"str"},{"p":"HB004SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB004StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB004StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB004ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":170,"y":3200,"wires":[]},{"id":"bedd60b7.1ca69","type":"hb-status","z":"f9a34738.f12c28","name":"Gratuity Thermostat - Eco Mode","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Eco Mode00000049","conf":"df59aa47.b26148","x":730,"y":2160,"wires":[["9d5d566.2ff75a8"]]},{"id":"9d5d566.2ff75a8","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB005","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB005","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2180,"wires":[["c8fbb0bd.33e56"]]},{"id":"c524a6e4.936cb8","type":"config","z":"f9a34738.f12c28","name":"HB005 Gratuity Thermostat Eco ","properties":[{"p":"HB005Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB005Location","pt":"flow","to":"North","tot":"str"},{"p":"HB005Room","pt":"flow","to":"Upstairs Hall","tot":"str"},{"p":"HB005DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"HB005Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB005AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB005PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB005PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB005House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB005MQTTDeviceTopic","pt":"flow","to":"Nest Thermostat Eco Mode","tot":"str"},{"p":"HB005On","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":2160,"wires":[]},{"id":"18d88d36.df96f3","type":"hb-status","z":"f9a34738.f12c28","name":"Gratuity Thermostat - Fan","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Fan","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Fan00000040","conf":"df59aa47.b26148","x":710,"y":2240,"wires":[["ef866360.cdb2f"]]},{"id":"ef866360.cdb2f","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB006","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB006","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2260,"wires":[["c8fbb0bd.33e56"]]},{"id":"aaff02bb.982ff","type":"config","z":"f9a34738.f12c28","name":"HB006 Gratuity Thermostat Fan","properties":[{"p":"HB006Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB006Location","pt":"flow","to":"North","tot":"str"},{"p":"HB006Room","pt":"flow","to":"Upstairs Hall","tot":"str"},{"p":"HB006DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"HB006Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB006AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB006PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB006PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB006House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB006MQTTDeviceTopic","pt":"flow","to":"Nest Thermostat Fan Mode","tot":"str"},{"p":"HB006On","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":2240,"wires":[]},{"id":"660ce4a4.5c000c","type":"hb-status","z":"f9a34738.f12c28","name":"Gratuity Thermostat","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Thermostat","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat0000004A","conf":"df59aa47.b26148","x":690,"y":2320,"wires":[["57b61fd.c48b8e"]]},{"id":"57b61fd.c48b8e","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB007","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB007","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2340,"wires":[["c8fbb0bd.33e56"]]},{"id":"3fae24ba.73728c","type":"config","z":"f9a34738.f12c28","name":"HB007 Gratuity Thermostat","properties":[{"p":"HB007Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB007Location","pt":"flow","to":"North","tot":"str"},{"p":"HB007Room","pt":"flow","to":"Upstairs Hall","tot":"str"},{"p":"HB007DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"HB007Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB007AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB007PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB007PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB007House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB007MQTTDeviceTopic","pt":"flow","to":"Nest Thermostat","tot":"str"},{"p":"HB007CurrentHeatingCoolingState","pt":"flow","to":"NestThMap","tot":"str"},{"p":"HB007TargetHeatingCoolingState","pt":"flow","to":"NestThMap","tot":"str"},{"p":"HB007CurrentTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007TargetTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007TemperatureDisplayUnits","pt":"flow","to":"012CF","tot":"str"},{"p":"HB007CurrentRelativeHumidity","pt":"flow","to":"null","tot":"str"},{"p":"HB007CoolingThresholdTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007HeatingThresholdTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB007FanTimerActive","pt":"flow","to":"null","tot":"str"},{"p":"HB007FanTimerDuration","pt":"flow","to":"null","tot":"str"},{"p":"HB007HasLeaf","pt":"flow","to":"null","tot":"str"},{"p":"HB007SunlightCorrectionEnabled","pt":"flow","to":"null","tot":"str"},{"p":"HB007SunlightCorrectionActive","pt":"flow","to":"null","tot":"str"},{"p":"HB007UsingEmergencyHeat","pt":"flow","to":"null","tot":"str"}],"active":true,"x":180,"y":2320,"wires":[]},{"id":"f42f879e.018fe8","type":"switch","z":"f9a34738.f12c28","name":"012CF Translate","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":3200,"y":340,"wires":[["1bb18fa1.44e16"],["56f65d6.dcc4da4"]],"outputLabels":["True","False"]},{"id":"1bb18fa1.44e16","type":"change","z":"f9a34738.f12c28","name":"Value Fahrenheit","rules":[{"t":"set","p":"name","pt":"msg","to":"msg.name&\"TranslatedToBoolean\"\t","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"Fahrenheit","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3408,"y":320,"wires":[["171e5c14.6a53b4"]]},{"id":"56f65d6.dcc4da4","type":"change","z":"f9a34738.f12c28","name":"Value Celcius","rules":[{"t":"set","p":"name","pt":"msg","to":"msg.name&\"TranslatedToBoolean\"\t\t","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"Celcius","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3398,"y":360,"wires":[["171e5c14.6a53b4"]]},{"id":"171e5c14.6a53b4","type":"link out","z":"f9a34738.f12c28","name":"Go To Cleanup, Parse and Send","links":["6dad159c.2922fc"],"x":3668,"y":340,"wires":[],"l":true},{"id":"5d85e6a0.8c26d8","type":"config","z":"f9a34738.f12c28","name":"HB009 Mike Home Presence","properties":[{"p":"HB009Floor","pt":"flow","to":"","tot":"str"},{"p":"HB009Location","pt":"flow","to":"","tot":"str"},{"p":"HB009Room","pt":"flow","to":"","tot":"str"},{"p":"HB009DeviceType","pt":"flow","to":"Presence","tot":"str"},{"p":"HB009Manufacturer","pt":"flow","to":"homebridge-people-geofence","tot":"str"},{"p":"HB009AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB009PhysicalVirtualType","pt":"flow","to":"Virtual","tot":"str"},{"p":"HB009PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB009House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB009MQTTDeviceTopic","pt":"flow","to":"Mike Home","tot":"str"},{"p":"HB009OccupancyDetected","pt":"flow","to":"10TF","tot":"str"}],"active":true,"x":180,"y":800,"wires":[]},{"id":"b583e09d.b680f","type":"hb-status","z":"f9a34738.f12c28","name":"Mike iPhone Home","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerMike iPhone Home00000086","conf":"df59aa47.b26148","x":430,"y":800,"wires":[["63cab4e2.8e7d6c"]]},{"id":"63cab4e2.8e7d6c","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB009","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB009","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":760,"y":820,"wires":[["cd7d5571.9128d8"]]},{"id":"1ab09f9a.d8911","type":"comment","z":"f9a34738.f12c28","name":"Placeholder Eva Home","info":"","x":160,"y":1040,"wires":[]},{"id":"715f3010.d8f07","type":"comment","z":"f9a34738.f12c28","name":"Placeholder Eva LTHS","info":"","x":160,"y":1120,"wires":[]},{"id":"9af2e3e2.a0002","type":"comment","z":"f9a34738.f12c28","name":"Placeholder Eva CTE","info":"","x":160,"y":1200,"wires":[]},{"id":"be9be4aa.ade968","type":"comment","z":"f9a34738.f12c28","name":"Placeholder Eva Dance","info":"","x":160,"y":1280,"wires":[]},{"id":"3c034631.98a37a","type":"comment","z":"f9a34738.f12c28","name":"Placeholder Kathy Dance","info":"","x":170,"y":1360,"wires":[]},{"id":"d1bc6ca6.77628","type":"comment","z":"f9a34738.f12c28","name":"Placeholder Mike Work","info":"","x":160,"y":880,"wires":[]},{"id":"bcf152a2.df2c6","type":"comment","z":"f9a34738.f12c28","name":"Nest Protect CO","info":"","x":140,"y":1440,"wires":[]},{"id":"78318771.a939e8","type":"hb-status","z":"f9a34738.f12c28","name":"Eva Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1560,"wires":[["db5046b9.ea5b68"]]},{"id":"ff8357f7.c621b8","type":"config","z":"f9a34738.f12c28","name":"HB010 Eva Hallway Carbon Monoxide","properties":[{"p":"HB010Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB010Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB010Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB010DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB010Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB010AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB010PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB010PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB010House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB010MQTTDeviceTopic","pt":"flow","to":"Eva Hallway Nest Protect","tot":"str"},{"p":"HB010CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB010StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB010StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB010ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":210,"y":1560,"wires":[]},{"id":"db5046b9.ea5b68","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB010","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB010","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1000,"y":1580,"wires":[["90ec7406.2298d8"]]},{"id":"6b6855e9.dac06c","type":"hb-status","z":"f9a34738.f12c28","name":"Evas Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1640,"wires":[["c53a4c63.fae2f"]]},{"id":"9fb26d60.e31ce","type":"config","z":"f9a34738.f12c28","name":"HB011 Eva's Bedroom Carbon Monoxide","properties":[{"p":"HB011Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB011Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB011Room","pt":"flow","to":"Eva's Room","tot":"str"},{"p":"HB011DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB011Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB011AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB011PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB011PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB011House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB011MQTTDeviceTopic","pt":"flow","to":"Eva's Bedroom Nest Protect","tot":"str"},{"p":"HB011CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB011StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB011StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB011ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":220,"y":1640,"wires":[]},{"id":"c53a4c63.fae2f","type":"change","z":"f9a34738.f12c28","name":"DeviceID    HB011","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB011","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1000,"y":1660,"wires":[["90ec7406.2298d8"]]},{"id":"adfeed17.0987e","type":"hb-status","z":"f9a34738.f12c28","name":"Game Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1720,"wires":[["1f972683.0eaff9"]]},{"id":"f37ec77a.4b7938","type":"config","z":"f9a34738.f12c28","name":"HB012 Game Room Carbon Monoxide","properties":[{"p":"HB012Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB012Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB012Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB012DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB012Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB012AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB012PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB012PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB012House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB012MQTTDeviceTopic","pt":"flow","to":"Game Room Nest Protect","tot":"str"},{"p":"HB012CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB012StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB012StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB012ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":210,"y":1720,"wires":[]},{"id":"1f972683.0eaff9","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB012","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB012","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1000,"y":1740,"wires":[["90ec7406.2298d8"]]},{"id":"1c0ae1de.24557e","type":"hb-status","z":"f9a34738.f12c28","name":"Guest Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1800,"wires":[["16523dae.1d4ab2"]]},{"id":"dcc1725c.1008c","type":"config","z":"f9a34738.f12c28","name":"HB013 Guest Bedroom Carbon Monoxide","properties":[{"p":"HB013Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB013Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB013Room","pt":"flow","to":"Guest Room","tot":"str"},{"p":"HB013DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB013Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB013AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB013PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB013PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB013House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB013MQTTDeviceTopic","pt":"flow","to":"Guest Room Nest Protect","tot":"str"},{"p":"HB013CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB013StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB013StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB013ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":220,"y":1800,"wires":[]},{"id":"16523dae.1d4ab2","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB013","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB013","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1000,"y":1820,"wires":[["90ec7406.2298d8"]]},{"id":"3caf4319.a1ecfc","type":"hb-status","z":"f9a34738.f12c28","name":"Master Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1880,"wires":[["980378d9.2ceb48"]]},{"id":"c8ce36a6.1dd2a8","type":"config","z":"f9a34738.f12c28","name":"HB014 Master Bedroom Carbon Monoxide","properties":[{"p":"HB014Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB014Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB014Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"HB014DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB014Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB014AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB014PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB014PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB014House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB014MQTTDeviceTopic","pt":"flow","to":"Master Bedroom Nest Protect","tot":"str"},{"p":"HB014CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB014StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB014StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB014ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":230,"y":1880,"wires":[]},{"id":"980378d9.2ceb48","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB014","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB014","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1000,"y":1900,"wires":[["90ec7406.2298d8"]]},{"id":"a0bd1182.45b31","type":"hb-status","z":"f9a34738.f12c28","name":"Toy Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":700,"y":1960,"wires":[["e0d4f5c5.a1b428"]]},{"id":"a2a8a1f5.0f524","type":"config","z":"f9a34738.f12c28","name":"HB015 Toy Room Carbon Monoxide","properties":[{"p":"HB015Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB015Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB015Room","pt":"flow","to":"Toy Room","tot":"str"},{"p":"HB015DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB015Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB015AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB015PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB015PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB015House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB015MQTTDeviceTopic","pt":"flow","to":"Toy Room Nest Protect","tot":"str"},{"p":"HB015CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB015StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB015StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB015ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":1960,"wires":[]},{"id":"e0d4f5c5.a1b428","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB015","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB015","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1000,"y":1980,"wires":[["90ec7406.2298d8"]]},{"id":"f4585f0b.b4c2b","type":"hb-status","z":"f9a34738.f12c28","name":"Toy Room Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":730,"y":2040,"wires":[["cdee6060.7dc84"]]},{"id":"9939ada.1e3df5","type":"config","z":"f9a34738.f12c28","name":"HB016 Toy Room Hallway Carbon Monoxide","properties":[{"p":"HB016Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB016Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB016Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB016DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB016Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB016AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB016PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB016PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB016House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB016MQTTDeviceTopic","pt":"flow","to":"Toy Room Hallway Nest Protect","tot":"str"},{"p":"HB016CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB016StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB016StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB016ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":230,"y":2040,"wires":[]},{"id":"cdee6060.7dc84","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB016","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB016","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1000,"y":2060,"wires":[["90ec7406.2298d8"]]},{"id":"90ec7406.2298d8","type":"link out","z":"f9a34738.f12c28","name":"Go To Jump In","links":["1603ee4.7168c12"],"x":1240,"y":1800,"wires":[],"l":true},{"id":"cd7d5571.9128d8","type":"link out","z":"f9a34738.f12c28","name":"Go To Jump In","links":["1603ee4.7168c12"],"x":1080,"y":780,"wires":[],"l":true},{"id":"f3a2d75c.740ec8","type":"link out","z":"f9a34738.f12c28","name":"Go To Jump In","links":["1603ee4.7168c12"],"x":1260,"y":2780,"wires":[],"l":true},{"id":"aab44d16.50feb","type":"hb-status","z":"f9a34738.f12c28","name":"Eva Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Motion00000085","conf":"df59aa47.b26148","x":690,"y":2600,"wires":[["4b4d6e64.d94ae"]]},{"id":"4b4d6e64.d94ae","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB017","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB017","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2620,"wires":[["f3a2d75c.740ec8"]]},{"id":"a2e52c08.00d87","type":"hb-status","z":"f9a34738.f12c28","name":"Evas Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2680,"wires":[["d286bd34.626bc"]]},{"id":"d286bd34.626bc","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB018","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB018","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2700,"wires":[["f3a2d75c.740ec8"]]},{"id":"b13bd099.b9d3e","type":"hb-status","z":"f9a34738.f12c28","name":"Guest Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Motion00000085","conf":"df59aa47.b26148","x":710,"y":2840,"wires":[["7bf58fcc.11142"]]},{"id":"7bf58fcc.11142","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB020","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB020","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2860,"wires":[["f3a2d75c.740ec8"]]},{"id":"1b89af40.f8f521","type":"hb-status","z":"f9a34738.f12c28","name":"Master Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Motion00000085","conf":"df59aa47.b26148","x":710,"y":2920,"wires":[["59ae9905.4884b8"]]},{"id":"59ae9905.4884b8","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB021","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB021","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2940,"wires":[["f3a2d75c.740ec8"]]},{"id":"cc1cf75c.d6be08","type":"hb-status","z":"f9a34738.f12c28","name":"Toy Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Motion00000085","conf":"df59aa47.b26148","x":690,"y":3000,"wires":[["d52ef045.cd6d5"]]},{"id":"d52ef045.cd6d5","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB022","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB022","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3020,"wires":[["f3a2d75c.740ec8"]]},{"id":"40db4052.cf63f","type":"hb-status","z":"f9a34738.f12c28","name":"Toy Room Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Motion00000085","conf":"df59aa47.b26148","x":710,"y":3080,"wires":[["9b2c44ce.7a9758"]]},{"id":"9b2c44ce.7a9758","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB023","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB023","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3100,"wires":[["f3a2d75c.740ec8"]]},{"id":"3fc34fc9.2889c","type":"config","z":"f9a34738.f12c28","name":"HB017 Eva Hallway Motion Sensor","properties":[{"p":"HB017Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB017Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB017Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB017DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB017Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB017AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB017PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB017PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB017House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB017MQTTDeviceTopic","pt":"flow","to":"Eva Hallway Nest Protect","tot":"str"},{"p":"HB017MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":2600,"wires":[]},{"id":"8db32853.2b2f28","type":"config","z":"f9a34738.f12c28","name":"HB018 Eva's Bedroom Motion Sensor","properties":[{"p":"HB018Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB018Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB018Room","pt":"flow","to":"Eva's Room","tot":"str"},{"p":"HB018DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB018Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB018AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB018PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB018PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB018House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB018MQTTDeviceTopic","pt":"flow","to":"Eva's Bedroom Nest Protect","tot":"str"},{"p":"HB018MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":210,"y":2680,"wires":[]},{"id":"912b2c47.24fa5","type":"config","z":"f9a34738.f12c28","name":"HB020 Guest Room Motion Sensor","properties":[{"p":"HB020Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB020Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB020Room","pt":"flow","to":"Guest Room","tot":"str"},{"p":"HB020DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB020Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB020AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB020PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB020PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB020House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB020MQTTDeviceTopic","pt":"flow","to":"Guest Room Nest Protect","tot":"str"},{"p":"HB020MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":2840,"wires":[]},{"id":"9b33930f.bbff5","type":"config","z":"f9a34738.f12c28","name":"HB021 Master Bedroom Motion Sensor","properties":[{"p":"HB021Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB021Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB021Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"HB021DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB021Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB021AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB021PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB021PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB021House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB021MQTTDeviceTopic","pt":"flow","to":"Master Bedroom Nest Protect","tot":"str"},{"p":"HB021MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":220,"y":2920,"wires":[]},{"id":"bf4c5b6a.ea75b8","type":"config","z":"f9a34738.f12c28","name":"HB022 Toy Room Motion Sensor","properties":[{"p":"HB022Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB022Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB022Room","pt":"flow","to":"Toy Room","tot":"str"},{"p":"HB022DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB022Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB022AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB022PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB022PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB022House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB022MQTTDeviceTopic","pt":"flow","to":"Toy Room Nest Protect","tot":"str"},{"p":"HB022MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":3000,"wires":[]},{"id":"2d493413.40938c","type":"config","z":"f9a34738.f12c28","name":"HB023 Toy Room Hallway Motion Sensor","properties":[{"p":"HB023Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB023Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB023Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB023DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB023Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB023AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB023PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB023PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB023House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB023MQTTDeviceTopic","pt":"flow","to":"Toy Room Hallway Nest Protect","tot":"str"},{"p":"HB023MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":220,"y":3080,"wires":[]},{"id":"eeae0d7f.b3561","type":"hb-status","z":"f9a34738.f12c28","name":"Game Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Motion00000085","conf":"df59aa47.b26148","x":700,"y":2760,"wires":[["f9e0d4d6.f72528"]]},{"id":"f9e0d4d6.f72528","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB019","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB019","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2780,"wires":[["f3a2d75c.740ec8"]]},{"id":"c38e45a9.bda0e8","type":"config","z":"f9a34738.f12c28","name":"HB019 GameRoom Motion Sensor","properties":[{"p":"HB019Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB019Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB019Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB019DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB019Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB019AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB019PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB019PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB019House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB019MQTTDeviceTopic","pt":"flow","to":"Game Room Nest Protect","tot":"str"},{"p":"HB019MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":2760,"wires":[]},{"id":"b97ce64.e6ec618","type":"comment","z":"f9a34738.f12c28","name":"Nest Protect Smoke","info":"","x":150,"y":3160,"wires":[]},{"id":"81537293.13e73","type":"link out","z":"f9a34738.f12c28","name":"Go To Jump In","links":["1603ee4.7168c12"],"x":1260,"y":3500,"wires":[],"l":true},{"id":"3be02020.93799","type":"hb-status","z":"f9a34738.f12c28","name":"Eva Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3280,"wires":[["17fe7b33.7df185"]]},{"id":"17fe7b33.7df185","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB024","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB024","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3300,"wires":[["81537293.13e73"]]},{"id":"91975f7b.808d5","type":"config","z":"f9a34738.f12c28","name":"HB024 Eva Hallway Smoke","properties":[{"p":"HB024Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB024Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB024Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB024DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB024Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB024AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB024PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB024PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB024House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB024MQTTDeviceTopic","pt":"flow","to":"Eva Hallway Nest Protect","tot":"str"},{"p":"HB024SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB024StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB024StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB024ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":180,"y":3280,"wires":[]},{"id":"9e5d8bab.af25b8","type":"hb-status","z":"f9a34738.f12c28","name":"Evas Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3360,"wires":[["ca08351c.a95028"]]},{"id":"ca08351c.a95028","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB025","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB025","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3380,"wires":[["81537293.13e73"]]},{"id":"757b9442.e6863c","type":"config","z":"f9a34738.f12c28","name":"HB025 Evas Bedroom Smoke","properties":[{"p":"HB025Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB025Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB025Room","pt":"flow","to":"Eva's Room","tot":"str"},{"p":"HB025DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB025Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB025AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB025PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB025PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB025House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB025MQTTDeviceTopic","pt":"flow","to":"Eva's Bedroom Nest Protect","tot":"str"},{"p":"HB025SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB025StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB025StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB025ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":3360,"wires":[]},{"id":"11192dbb.00ea72","type":"hb-status","z":"f9a34738.f12c28","name":"Game Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3440,"wires":[["42f7c1d5.c7d4f"]]},{"id":"42f7c1d5.c7d4f","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB026","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB026","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3460,"wires":[["81537293.13e73"]]},{"id":"54253810.43d5c8","type":"config","z":"f9a34738.f12c28","name":"HB026 Game Room Smoke","properties":[{"p":"HB026Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB026Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB026Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB026DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB026Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB026AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB026PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB026PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB026House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB026MQTTDeviceTopic","pt":"flow","to":"Game Room Nest Protect","tot":"str"},{"p":"HB026SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB026StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB026StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB026ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":180,"y":3440,"wires":[]},{"id":"364b41.bb52b4c","type":"hb-status","z":"f9a34738.f12c28","name":"Guest Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3520,"wires":[["d0a6e049.ebc7"]]},{"id":"d0a6e049.ebc7","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB027","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB027","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3540,"wires":[["81537293.13e73"]]},{"id":"fe1cb05d.1ac9a","type":"config","z":"f9a34738.f12c28","name":"HB027 Guest Bedroom Smoke","properties":[{"p":"HB027Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB027Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB027Room","pt":"flow","to":"Guest Room","tot":"str"},{"p":"HB027DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB027Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB027AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB027PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB027PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB027House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB027MQTTDeviceTopic","pt":"flow","to":"Guest Room Nest Protect","tot":"str"},{"p":"HB027SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB027StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB027StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB027ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":3520,"wires":[]},{"id":"925697a0.b848f8","type":"hb-status","z":"f9a34738.f12c28","name":"Master Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3600,"wires":[["f61875b0.4d5f98"]]},{"id":"f61875b0.4d5f98","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB028","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB028","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3620,"wires":[["81537293.13e73"]]},{"id":"87286fc7.46572","type":"config","z":"f9a34738.f12c28","name":"HB028 Master Bedroom Smoke","properties":[{"p":"HB028Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB028Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB028Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"HB028DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB028Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB028AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB028PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB028PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB028House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB028MQTTDeviceTopic","pt":"flow","to":"Master Bedroom Nest Protect","tot":"str"},{"p":"HB028SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB028StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB028StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB028ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":3600,"wires":[]},{"id":"65db2405.46f30c","type":"hb-status","z":"f9a34738.f12c28","name":"Toy Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3680,"wires":[["459b6782.84a098"]]},{"id":"459b6782.84a098","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB029","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB029","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3700,"wires":[["81537293.13e73"]]},{"id":"8894eb52.20dcd8","type":"config","z":"f9a34738.f12c28","name":"HB029 Toy Room Smoke","properties":[{"p":"HB029Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB029Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB029Room","pt":"flow","to":"Toy Room","tot":"str"},{"p":"HB029DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB029Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB029AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB029PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB029PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB029House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB029MQTTDeviceTopic","pt":"flow","to":"Toy Room Nest Protect","tot":"str"},{"p":"HB029SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB029StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB029StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB029ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":170,"y":3680,"wires":[]},{"id":"7d4a10e7.f416e","type":"hb-status","z":"f9a34738.f12c28","name":"Toy Room Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3760,"wires":[["58f0cb48.60e4a4"]]},{"id":"58f0cb48.60e4a4","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB030","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB030","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":3780,"wires":[["81537293.13e73"]]},{"id":"35c29021.baf","type":"config","z":"f9a34738.f12c28","name":"HB030 Toy Room Hallway Smoke","properties":[{"p":"HB030Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB030Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB030Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB030DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB030Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB030AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB030PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB030PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB030House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB030MQTTDeviceTopic","pt":"flow","to":"Toy Room Hallway Nest Protect","tot":"str"},{"p":"HB030SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB030StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB030StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB030ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":3760,"wires":[]},{"id":"d4130c1.d9792f","type":"comment","z":"f9a34738.f12c28","name":"Nest Thermostat","info":"","x":140,"y":2120,"wires":[]},{"id":"9c027d37.ed6e6","type":"hb-status","z":"f9a34738.f12c28","name":"Eve Motion Passthrough","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerEve Motion Passthrough00000049","conf":"df59aa47.b26148","x":710,"y":2440,"wires":[["6b3e7071.2fb57"]]},{"id":"6b3e7071.2fb57","type":"change","z":"f9a34738.f12c28","name":"DeviceID HB031","rules":[{"t":"set","p":"DeviceID","pt":"msg","to":"HB031","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":2460,"wires":[["f3a2d75c.740ec8"]]},{"id":"e059fe7f.6fcf7","type":"config","z":"f9a34738.f12c28","name":"HB031 Eve Motion Passthrough","properties":[{"p":"HB031Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB031Location","pt":"flow","to":"South by Doorway","tot":"str"},{"p":"HB031Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB031DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB031Manufacturer","pt":"flow","to":"Eve","tot":"str"},{"p":"HB031AccessProtocol","pt":"flow","to":"Bluetooth","tot":"str"},{"p":"HB031PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB031PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB031House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB031MQTTDeviceTopic","pt":"flow","to":"Eve Motion Sensor","tot":"str"},{"p":"HB031On","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":2440,"wires":[]},{"id":"8ee0b80b.800658","type":"comment","z":"f9a34738.f12c28","name":"Motion Sensors","info":"","x":140,"y":2400,"wires":[]},{"id":"9b3443eb.7f318","type":"hb-event","z":"f9a34738.f12c28","name":"Eve Motion Passthrough","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerEve Motion Passthrough00000049","conf":"df59aa47.b26148","x":710,"y":2480,"wires":[["6b3e7071.2fb57"]]},{"id":"9eacb317.51d7c","type":"hb-event","z":"f9a34738.f12c28","name":"Gratuity Thermostat","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Thermostat","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat0000004A","conf":"df59aa47.b26148","x":690,"y":2360,"wires":[["57b61fd.c48b8e"]]},{"id":"95f99121.2cccd","type":"hb-event","z":"f9a34738.f12c28","name":"Gratuity Thermostat - Fan","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Fan","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Fan00000040","conf":"df59aa47.b26148","x":710,"y":2280,"wires":[["ef866360.cdb2f"]]},{"id":"781c5ae7.1ade54","type":"hb-event","z":"f9a34738.f12c28","name":"Gratuity Thermostat - Eco Mode","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Eco Mode00000049","conf":"df59aa47.b26148","x":730,"y":2200,"wires":[["9d5d566.2ff75a8"]]},{"id":"b32422bd.d01b","type":"hb-event","z":"f9a34738.f12c28","name":"Downstairs Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Motion00000085","conf":"df59aa47.b26148","x":690,"y":2560,"wires":[["636d300.353bbd"]]},{"id":"befc182.a3c90e8","type":"hb-event","z":"f9a34738.f12c28","name":"Eva Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Motion00000085","conf":"df59aa47.b26148","x":690,"y":2640,"wires":[["4b4d6e64.d94ae"]]},{"id":"92f7d254.e5e24","type":"hb-event","z":"f9a34738.f12c28","name":"Evas Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2720,"wires":[["d286bd34.626bc"]]},{"id":"18dc8b04.70cc65","type":"hb-event","z":"f9a34738.f12c28","name":"Game Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Motion00000085","conf":"df59aa47.b26148","x":690,"y":2800,"wires":[["f9e0d4d6.f72528"]]},{"id":"29e7a548.6f8a5a","type":"hb-event","z":"f9a34738.f12c28","name":"Guest Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2880,"wires":[["7bf58fcc.11142"]]},{"id":"cc7e1bfa.bddc38","type":"hb-event","z":"f9a34738.f12c28","name":"Master Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2960,"wires":[["59ae9905.4884b8"]]},{"id":"33414bae.7dce84","type":"hb-event","z":"f9a34738.f12c28","name":"Toy Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Motion00000085","conf":"df59aa47.b26148","x":680,"y":3040,"wires":[["d52ef045.cd6d5"]]},{"id":"4b571d69.850e34","type":"hb-event","z":"f9a34738.f12c28","name":"Toy Room Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Motion00000085","conf":"df59aa47.b26148","x":710,"y":3120,"wires":[["9b2c44ce.7a9758"]]},{"id":"f1184b12.2b2b48","type":"hb-event","z":"f9a34738.f12c28","name":"Downstairs Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3240,"wires":[["84bd556d.20f958"]]},{"id":"2b010923.710376","type":"hb-event","z":"f9a34738.f12c28","name":"Eva Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3320,"wires":[["17fe7b33.7df185"]]},{"id":"cf2fe02a.9e6e5","type":"hb-event","z":"f9a34738.f12c28","name":"Evas Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3400,"wires":[["ca08351c.a95028"]]},{"id":"51d9e16c.9d1aa","type":"hb-event","z":"f9a34738.f12c28","name":"Game Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3480,"wires":[["42f7c1d5.c7d4f"]]},{"id":"e8f08cec.2494f","type":"hb-event","z":"f9a34738.f12c28","name":"Guest Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3560,"wires":[["d0a6e049.ebc7"]]},{"id":"89119260.e835","type":"hb-event","z":"f9a34738.f12c28","name":"Master Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3640,"wires":[["f61875b0.4d5f98"]]},{"id":"78b46a33.31d464","type":"hb-event","z":"f9a34738.f12c28","name":"Toy Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Smoke00000087","conf":"df59aa47.b26148","x":680,"y":3720,"wires":[["459b6782.84a098"]]},{"id":"49decd71.acbd04","type":"hb-event","z":"f9a34738.f12c28","name":"Toy Room Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3800,"wires":[["58f0cb48.60e4a4"]]},{"id":"7b371695.401bc8","type":"hb-event","z":"f9a34738.f12c28","name":"Downstairs Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":700,"y":1520,"wires":[["5b95acb3.6703c4"]]},{"id":"9f3c275c.0c8f78","type":"hb-event","z":"f9a34738.f12c28","name":"Eva Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1600,"wires":[["db5046b9.ea5b68"]]},{"id":"9ac0f0fd.fca53","type":"hb-event","z":"f9a34738.f12c28","name":"Evas Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1680,"wires":[["c53a4c63.fae2f"]]},{"id":"b02821e.f1ac3e","type":"hb-event","z":"f9a34738.f12c28","name":"Game Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1760,"wires":[["1f972683.0eaff9"]]},{"id":"fef20ede.6177a","type":"hb-event","z":"f9a34738.f12c28","name":"Guest Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1840,"wires":[["16523dae.1d4ab2"]]},{"id":"4e35d578.3c110c","type":"hb-event","z":"f9a34738.f12c28","name":"Master Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1920,"wires":[["980378d9.2ceb48"]]},{"id":"e8b918b1.147db8","type":"hb-event","z":"f9a34738.f12c28","name":"Toy Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":700,"y":2000,"wires":[["e0d4f5c5.a1b428"]]},{"id":"1f806b72.fa6b25","type":"hb-event","z":"f9a34738.f12c28","name":"Toy Room Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":2080,"wires":[["cdee6060.7dc84"]]},{"id":"cefbdf8.a07b92","type":"hb-event","z":"f9a34738.f12c28","name":"Anyone","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerAnyone00000086","conf":"df59aa47.b26148","x":390,"y":760,"wires":[["f7257b5f.36fde8"]]},{"id":"4b2aa4b1.3fcc5c","type":"hb-event","z":"f9a34738.f12c28","name":"Mike iPhone Home","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerMike iPhone Home00000086","conf":"df59aa47.b26148","x":430,"y":840,"wires":[["63cab4e2.8e7d6c"]]},{"id":"4f285b5d.c38f54","type":"link out","z":"f9a34738.f12c28","name":"Go To Prepopulate When Triggered","links":["27360a42.d6fb36","a7412d51.61ec2","b4d90ffd.ff375","2ebae543.d8331a","20b20d29.bcd242","27122768.aab468","1477ba60.9984b6","f0808b86.806db8"],"x":240,"y":40,"wires":[],"l":true},{"id":"2ebae543.d8331a","type":"link in","z":"f9a34738.f12c28","name":"Prepopulate","links":["4f285b5d.c38f54"],"x":230,"y":760,"wires":[["202dcb4.a2a8734","b583e09d.b680f"]],"l":true},{"id":"20b20d29.bcd242","type":"link in","z":"f9a34738.f12c28","name":"Prepopulate","links":["4f285b5d.c38f54"],"x":430,"y":1760,"wires":[["1b13a87.0d07e58","78318771.a939e8","6b6855e9.dac06c","adfeed17.0987e","1c0ae1de.24557e","3caf4319.a1ecfc","a0bd1182.45b31","f4585f0b.b4c2b"]],"l":true},{"id":"27122768.aab468","type":"link in","z":"f9a34738.f12c28","name":"Prepopulate","links":["4f285b5d.c38f54"],"x":450,"y":2240,"wires":[["bedd60b7.1ca69","18d88d36.df96f3","660ce4a4.5c000c"]],"l":true},{"id":"1477ba60.9984b6","type":"link in","z":"f9a34738.f12c28","name":"Prepopulate","links":["4f285b5d.c38f54"],"x":450,"y":2800,"wires":[["9c027d37.ed6e6","d26af67.632a608","aab44d16.50feb","a2e52c08.00d87","eeae0d7f.b3561","b13bd099.b9d3e","1b89af40.f8f521","cc1cf75c.d6be08","40db4052.cf63f"]],"l":true},{"id":"f0808b86.806db8","type":"link in","z":"f9a34738.f12c28","name":"Prepopulate","links":["4f285b5d.c38f54"],"x":450,"y":3480,"wires":[["cd850a69.e4ed28","3be02020.93799","9e5d8bab.af25b8","11192dbb.00ea72","364b41.bb52b4c","925697a0.b848f8","65db2405.46f30c","7d4a10e7.f416e"]],"l":true},{"id":"3edad613.53a94a","type":"inject","z":"54cae49c.6ee04c","name":"Start Monitoring All Homebridge Controlled Devices","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":250,"y":240,"wires":[[]]},{"id":"5639da50.b600d4","type":"subflow:f9a34738.f12c28","z":"54cae49c.6ee04c","name":"","env":[],"x":750,"y":220,"wires":[]},{"id":"93bfa32b.86b9a","type":"debug","z":"5b6a6e66.a3209","name":"auto","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":510,"y":100,"wires":[]},{"id":"e700d7e.04e2c28","type":"debug","z":"5b6a6e66.a3209","name":"Parsed Json","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":530,"y":280,"wires":[]},{"id":"d664350e.ba0208","type":"debug","z":"5b6a6e66.a3209","name":"Buffer","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":510,"y":160,"wires":[]},{"id":"c562fb42.f4d488","type":"debug","z":"5b6a6e66.a3209","name":"String","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":510,"y":220,"wires":[]},{"id":"acbdc765.f70fe8","type":"debug","z":"5b6a6e66.a3209","name":"Base 64","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":520,"y":340,"wires":[]},{"id":"f0b87739.700818","type":"function","z":"5b6a6e66.a3209","name":"Splitting Preprocessor","func":"/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value\n                --msg.payload.value\n             }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else\n                {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else\n            {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else\n                    {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else\n                {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else\n                {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else\n            {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else\n                {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        latestMsg.payload.name = name + \":\" + key;\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n    //Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \":\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":940,"y":300,"wires":[["6c771950.f0e768","3294095d.83be86"]]},{"id":"6c771950.f0e768","type":"function","z":"5b6a6e66.a3209","name":"Format for InfluxDB & MQTT","func":"/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.payload.deviceId;\n\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar typeOfMeasurement = msg.payload.name;\n\n//gather the actual measurement value that was sent by the device to be included as the data for the field (when the measurement is valid) sent to InfluxDB\nvar theData = msg.payload.value;\n\n//initialize the measurements object\nvar measurementsObj = {};\n\n//initialize the tags (indices) object\nvar tagsObj = {};\n\n//create the object that will later be used to combine the measurementsObj and tagsObj\nvar combinedObj;\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\n\n\n\nif ((typeof theData == msg.payload.dataType.toLowerCase()) || (msg.payload.dataType == 'ENUM') || (theData === null)) {\n    if (typeof theData == 'number') {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched number\" });\n\n        if (!theData.isNaN) {\n            validMeasurement = true;\n        }\n    } else if (typeof theData == 'string') {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched string\" });\n        if (theData.length >= 0) {\n            validMeasurement = true;\n        }\n    } else if (msg.payload.dataType == 'ENUM') { //This is checking to make sure the value matches one of the values in the ENUM from the device \n        node.status({ fill: \"red\", shape: \"ring\", text: msg.payload.dataType + \" matched ENUM\" });\n\n        msg.payload.values.forEach(element => {\n            if (flow.get(deviceID +element) == theData) {\n                validMeasurement = true;\n            }\n        })\n    } else if (theData === null) {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched null data\" });\n        nullData = true;\n    } else {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"matched nonstandardtype\" });\n        nonStandardType = true;\n    }\n} else {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"measurement type mismatch\" });\n    measurementTypeMismatch = true;\n}\n\n\n\n\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\", \"PhysicalDigitalRegular\"]\ncommonTags.forEach(element => {\n    if (flow.get(deviceID +element).length > 0) {\n        tagsObj[element] = flow.get(deviceID + element)\n        validTag = true\n    }\n});\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n\n//put the object into the payload\nmsg.payload = combinedObj;\n\n//build the status to be shown on the status of the subnode\nmsg.status = typeOfMeasurement + \": \" + theData;\n\n/* MQTT section \n * \n * \n * \n */\n\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = \"Hubitat/\" + flow.get(deviceID +\"MQTTDeviceTopic\") + \"/\" + typeOfMeasurement\n//add the data to be recorded to MQTT\nmsg2.payload = theData\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nif (!nullData) {\n    return [msg, msg2]\n}","outputs":2,"noerr":0,"x":960,"y":340,"wires":[[],[]]},{"id":"3294095d.83be86","type":"debug","z":"5b6a6e66.a3209","name":"Mike thing","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1190,"y":260,"wires":[]},{"id":"2f464d73.081182","type":"function","z":"f9a34738.f12c28","name":"","func":"global.set(\"1Before\", msg)\nreturn msg;","outputs":1,"noerr":0,"x":2760,"y":520,"wires":[[]]},{"id":"52488330.f17efc","type":"config","z":"5b6a6e66.a3209","name":"HB009 Anyone Presence","properties":[{"p":"HB009Floor","pt":"flow","to":"","tot":"str"},{"p":"HB009Location","pt":"flow","to":"","tot":"str"},{"p":"HB009Room","pt":"flow","to":"","tot":"str"},{"p":"HB009DeviceType","pt":"flow","to":"Presence","tot":"str"},{"p":"HB009Manufacturer","pt":"flow","to":"homebridge-people-geofence","tot":"str"},{"p":"HB009AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB009PhysicalVirtualType","pt":"flow","to":"Virtual","tot":"str"},{"p":"HB009PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB009House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB009MQTTDeviceTopic","pt":"flow","to":"Mike Home","tot":"str"},{"p":"HB009OccupancyDetected","pt":"flow","to":"10TF","tot":"str"}],"active":true,"x":330,"y":520,"wires":[]},{"id":"777bf417.0ecbbc","type":"function","z":"f9a34738.f12c28","name":"","func":"global.set(\"2InfluxOut\", msg)\nreturn msg;","outputs":1,"noerr":0,"x":3080,"y":540,"wires":[[]]},{"id":"244a5829.ac4bb8","type":"function","z":"f9a34738.f12c28","name":"","func":"global.set(\"3MQTTOut\", msg)\nreturn msg;","outputs":1,"noerr":0,"x":3220,"y":540,"wires":[[]]},{"id":"e876b0ec.44e9d","type":"mqtt in","z":"5b6a6e66.a3209","name":"","topic":"zigbee2mqtt/Bulb_C7DE_Color_600lm","qos":"2","datatype":"auto","broker":"a5bf81ee.27852","x":270,"y":280,"wires":[["e700d7e.04e2c28","75677854.2045a8"]]},{"id":"75677854.2045a8","type":"function","z":"5b6a6e66.a3209","name":"","func":"global.set(\"4Z2M\", msg)\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":400,"wires":[[]]},{"id":"ab91d8ac.6e4a78","type":"function","z":"d8750012.11f37","name":"","func":"\nreturn msg;","outputs":2,"noerr":0,"x":190,"y":40,"wires":[[],[]]},{"id":"3902c9f.2f36d36","type":"mqtt in","z":"98a6e865.a02ea8","name":"","topic":"zigbee2mqtt/Remote_5_Buttons","qos":"2","datatype":"json","broker":"a5bf81ee.27852","x":250,"y":480,"wires":[["a6ca8257.77159"]]},{"id":"ce29bce9.08eb1","type":"debug","z":"98a6e865.a02ea8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":910,"y":460,"wires":[]},{"id":"a6ca8257.77159","type":"switch","z":"98a6e865.a02ea8","name":"","property":"payload.action","propertyType":"msg","rules":[{"t":"eq","v":"toggle","vt":"str"},{"t":"eq","v":"brightness_down_click","vt":"str"},{"t":"eq","v":"brightness_up_click","vt":"str"},{"t":"eq","v":"arrow_left_click","vt":"str"},{"t":"eq","v":"arrow_right_click","vt":"str"}],"checkall":"true","repair":false,"outputs":5,"x":490,"y":480,"wires":[["6338070a.bcc328"],[],[],[],[]]},{"id":"6338070a.bcc328","type":"hubitat device","z":"98a6e865.a02ea8","name":"Mike Credenza Light","server":"55e4481a.722098","deviceId":"388","attribute":"switch","sendEvent":false,"x":690,"y":360,"wires":[["4550010.2bf78"]]},{"id":"4550010.2bf78","type":"switch","z":"98a6e865.a02ea8","name":"Off/On","property":"payload.value","propertyType":"msg","rules":[{"t":"eq","v":"off","vt":"str"},{"t":"eq","v":"on","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":910,"y":360,"wires":[["7be32827.eeaac8"],["e006e93f.81f6b8"]]},{"id":"7be32827.eeaac8","type":"change","z":"98a6e865.a02ea8","name":"On","rules":[{"t":"set","p":"command","pt":"msg","to":"on","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1030,"y":340,"wires":[["a122e4d8.6d4938"]]},{"id":"e006e93f.81f6b8","type":"change","z":"98a6e865.a02ea8","name":"Off","rules":[{"t":"set","p":"command","pt":"msg","to":"off","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1030,"y":380,"wires":[["b1b0bd6f.3f716"]]},{"id":"a122e4d8.6d4938","type":"hubitat command","z":"98a6e865.a02ea8","name":"Mike Credenza Light","server":"55e4481a.722098","deviceId":"388","command":"off","commandArgs":"","x":1240,"y":340,"wires":[[]]},{"id":"b1b0bd6f.3f716","type":"hubitat command","z":"98a6e865.a02ea8","name":"Mike Credenza Light","server":"55e4481a.722098","deviceId":"388","command":"on","commandArgs":"","x":1240,"y":380,"wires":[[]]},{"id":"d0c066c4.642c18","type":"function","z":"1a0aa13a.9d7b8f","name":"Format for InfluxDB & MQTT Homebridge","func":"/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.payload.deviceId;\n//node.warn(\"11 \"+ deviceID)\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar registration = msg.payload.registration;\nvar  flight = msg.payload.flight;\nvar  callsign = msg.payload.callsign;\nvar  origin = msg.payload.origin;\nvar  destination= msg.payload.destination;\nvar altitude = msg.payload.altitude;\nvar  bearing = msg.payload.bearing;\nvar  speed = msg.payload.speed;\nvar  rateOfClimb = msg.payload.rateOfClimb;\nvar  squawkCode = msg.payload.squawkCode;\nvar  model = msg.payload.model;\nvar  lat = msg.payload.lat;\nvar  longitude = msg.payload.lon;\nvar  timestamp = msg.payload.timestamp;\nvar  name = msg.payload.name;\n\nvar measurementsObj = {};\nvar tagsObj = {};\nvar combinedObj;\n\nmeasurementsObj[\"altitude\"] = altitude;\nmeasurementsObj[\"bearing\"] = bearing;\nmeasurementsObj[\"speed\"] = speed;\nmeasurementsObj[\"rateOfClimb\"] = rateOfClimb;\nmeasurementsObj[\"lat\"] = lat;\nmeasurementsObj[\"longitude\"] = longitude;\n//measurementsObj[\"timestamp\"] = timestamp;\ntagsObj[\"registration\"] = registration\ntagsObj[\"flight\"] = flight\ntagsObj[\"callsign\"] = callsign\ntagsObj[\"origin\"] = origin\ntagsObj[\"destination\"] = destination\ntagsObj[\"rateOfClimb\"] = rateOfClimb\ntagsObj[\"squawkCode\"] = squawkCode\ntagsObj[\"model\"] = model\ntagsObj[\"name\"] = name\n\n/*\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\n\n\n\n\n/*\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\", \"PhysicalDigitalRegular\"]\ncommonTags.forEach(element => {\n    //node.warn(\"84 length\")\n    //node.warn(element)\n    //node.warn(deviceID)\n    if (flow.get(deviceID + element).length > 0) {\n        tagsObj[element] = flow.get(deviceID + element)\n        validTag = true\n    }\n}); \n\n\n\n\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    //node.warn(\"94 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"113 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"123 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n*/\ncombinedObj = [measurementsObj, tagsObj]\nmsg.payload = combinedObj;\n\n\n//build the status to be shown on the status of the subnode\n\n/* MQTT section \n * \n * \n * \n */\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = \"Homebridge/\"\n//add the data to be recorded to MQTT\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nreturn [msg, msg2]\n","outputs":2,"noerr":0,"x":1660,"y":340,"wires":[["d385232.c1709e"],[]]},{"id":"d385232.c1709e","type":"influxdb out","z":"1a0aa13a.9d7b8f","influxdb":"577b1b11.27d264","name":"","measurement":"Aircraft2","precision":"","retentionPolicy":"","x":2000,"y":260,"wires":[]},{"id":"957294dc.580f68","type":"function","z":"72970ac0.70cf94","name":"1 Func From Global with checks and Filter Trick","func":"//retrieve the data to be examined from the global variable\nvar devices = global.get(msg.globalsource)\n//check if there was in fact a global variable with the correct name \n//devices !== undefined means that there was something in a variable with that name\n//devices == undefined (the else option) means that the variable did not exist\nif (devices !== undefined)\n{\n    //find the column with the header equal to the keyname\n    keyColumnLocation = devices[0].findIndex(element => element == msg.keyname)\n    // keyColumnLocation == -1 means that the item wasn't found\n    if (keyColumnLocation == -1)\n    {\n        msg.error = \"Key with value \\\"\" + msg.keyname + \"\\\" not found amongst the \" + (devices[0].length + 1) + \" entries, which include \" + devices[0]\n        //either create the error count with value of 1 or increment it if it already exists\n        if (typeof msg.searchErrorCount !== undefined)\n        {\n            msg.searchErrorCount = 1\n        }\n        else\n        {\n            msg.searchErrorCount++\n        }\n    }\n    // when column is found then do this work\n    else\n    {\n        // try to find name of the column where the desired data resides\n        dataHeaderColumnLocation = devices[0].findIndex(element => element == msg.datacolumnname)\n        // (dataHeaderColumnLocation == -1) means that the item wasn't found\n        if (dataHeaderColumnLocation == -1)\n        {\n            //Put info into error to explain why no result was returned\n            msg.error = \"The data column with the value \\\"\" + msg.datacolumnname + \"\\\" not found amongst the \" + (devices[0].length + 1) + \" entries, which include \" + devices[0]\n        }\n        else\n        {\n            // find which row to look at\n            searchTargetRowLocation = devices.findIndex(element => element[keyColumnLocation] == msg.searchtarget)\n            // (searchTargetRowLocation == -1) means that no row was found\n            if (searchTargetRowLocation == -1)\n            {\n                //Put info into error to explain why no result was returned\n                msg.error = \"The item searched for \\\"\" + msg.searchtarget + \"\\\" was not found not found in the \\\"\" + msg.keyname + \"\\\" column\"\n            }\n            else\n            {\n                //retrieve the desired data from the cell in the table and put into the value\n                msg.value = devices[searchTargetRowLocation][dataHeaderColumnLocation]\n            }\n        }\n    }\n    //becaue actual results are being returned delete the accumulate error message\n    delete msg.error\n    return [msg, null, null]\n}\nelse {\n    //Populate the error message with info of the undesired outcome\n    msg.error = \"Global variable Devices not found\"\n    //send warning to the debug window and log\n    node.warn(\"Global variable \" + msg.globalsource + \" not found. 1 attempt will be made to reload from the Google Sheet.\")\n}\n//check to see if the code has reached this point without finding an error\n// (typeof msg.searchErrorCount !== undefined) means that there is an msg.searchErrorCount\nif (typeof msg.searchErrorCount !== undefined)\n{\n    // since it exists, check to see how many errors have occured.\n    if (msg.searchErrorCount > 1)\n    {\n        // when multiple erors exist, then output the results to the fatal error output\n        msg.error = msg.error + \" Errors persist despite trying to update the global variable from the Google sheets data source.\"\n        return [null, null, msg]\n    }\n    else\n    {\n        //when just 1 error has been encountered send to the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n        return [null, msg, null]\n    }\n}\nelse\n{\n    //since it did not exist, populate it with 1 and return on the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n    msg.searchErrorCount = 1\n    return [null, msg, null]\n}","outputs":3,"noerr":0,"x":340,"y":80,"wires":[[],[],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"cb7455c5.7df208","type":"function","z":"72970ac0.70cf94","name":"Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":500,"y":400,"wires":[["957294dc.580f68"]]},{"id":"a7ce59f8.ce2778","type":"inject","z":"2b2a4010.a6b5e","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":160,"y":180,"wires":[["cd02f6b.a626f08"]]},{"id":"cd02f6b.a626f08","type":"change","z":"2b2a4010.a6b5e","name":"Set Search Variables","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyname","pt":"msg","to":"Device","tot":"str"},{"t":"set","p":"searchtarget","pt":"msg","to":"Corner Lamp","tot":"str"},{"t":"set","p":"datacolumnname","pt":"msg","to":"Manufacturer","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":180,"wires":[["68bcea7a.3da214"]]},{"id":"68bcea7a.3da214","type":"subflow:72970ac0.70cf94","z":"2b2a4010.a6b5e","name":"","x":620,"y":180,"wires":[["e0ebb91b.9ce548"],[],[]]},{"id":"e0ebb91b.9ce548","type":"debug","z":"2b2a4010.a6b5e","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":880,"y":160,"wires":[]},{"id":"e967a06f.d0126","type":"inject","z":"9d262d68.d01aa","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":140,"y":100,"wires":[["e9439687.893628"]]},{"id":"e9439687.893628","type":"change","z":"9d262d68.d01aa","name":"Set Search Variables","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyname","pt":"msg","to":"Device","tot":"str"},{"t":"set","p":"searchtarget","pt":"msg","to":"Corner Lamp","tot":"str"},{"t":"set","p":"datacolumnname","pt":"msg","to":"Manufacturer","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":330,"y":100,"wires":[["a4aa3ed6.857","f13cf9a0.e09148"]]},{"id":"f13cf9a0.e09148","type":"subflow:72970ac0.70cf94","z":"9d262d68.d01aa","name":"","env":[],"x":600,"y":100,"wires":[["d55b8c57.d04ef"],[],[]]},{"id":"d55b8c57.d04ef","type":"debug","z":"9d262d68.d01aa","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":860,"y":80,"wires":[]},{"id":"a4aa3ed6.857","type":"function","z":"9d262d68.d01aa","name":"1 Func From Global with checks and Filter Trick","func":"//retrieve the data to be examined from the global variable\nvar devices = global.get(msg.globalsource)\n//check if there was in fact a global variable with the correct name \n//devices !== undefined means that there was something in a variable with that name\n//devices == undefined (the else option) means that the variable did not exist\nif (devices !== undefined)\n{\n    //find the column with the header equal to the keyname\n    keyColumnLocation = devices[0].findIndex(element => element == msg.keyname)\n    // keyColumnLocation == -1 means that the item wasn't found\n    if (keyColumnLocation == -1)\n    {\n        msg.error = \"Key with value \\\"\" + msg.keyname + \"\\\" not found amongst the \" + (devices[0].length + 1) + \" entries, which include \" + devices[0]\n        //either create the error count with value of 1 or increment it if it already exists\n        if (typeof msg.searchErrorCount !== undefined)\n        {\n            msg.searchErrorCount = 1\n        }\n        else\n        {\n            msg.searchErrorCount++\n        }\n    }\n    // when column is found then do this work\n    else\n    {\n        // try to find name of the column where the desired data resides\n        dataHeaderColumnLocation = devices[0].findIndex(element => element == msg.datacolumnname)\n        // (dataHeaderColumnLocation == -1) means that the item wasn't found\n        if (dataHeaderColumnLocation == -1)\n        {\n            //Put info into error to explain why no result was returned\n            msg.error = \"The data column with the value \\\"\" + msg.datacolumnname + \"\\\" not found amongst the \" + (devices[0].length + 1) + \" entries, which include \" + devices[0]\n        }\n        else\n        {\n            // find which row to look at\n            searchTargetRowLocation = devices.findIndex(element => element[keyColumnLocation] == msg.searchtarget)\n            // (searchTargetRowLocation == -1) means that no row was found\n            if (searchTargetRowLocation == -1)\n            {\n                //Put info into error to explain why no result was returned\n                msg.error = \"The item searched for \\\"\" + msg.searchtarget + \"\\\" was not found not found in the \\\"\" + msg.keyname + \"\\\" column\"\n            }\n            else\n            {\n                //retrieve the desired data from the cell in the table and put into the value\n                msg.value = devices[searchTargetRowLocation][dataHeaderColumnLocation]\n            }\n        }\n    }\n    //becaue actual results are being returned delete the accumulate error message\n    delete msg.error\n    return [msg, null, null]\n}\nelse {\n    //Populate the error message with info of the undesired outcome\n    msg.error = \"Global variable Devices not found\"\n    //send warning to the debug window and log\n    node.warn(\"Global variable \" + msg.globalsource + \" not found. 1 attempt will be made to reload from the Google Sheet.\")\n}\n//check to see if the code has reached this point without finding an error\n// (typeof msg.searchErrorCount !== undefined) means that there is an msg.searchErrorCount\nif (typeof msg.searchErrorCount !== undefined)\n{\n    // since it exists, check to see how many errors have occured.\n    if (msg.searchErrorCount > 1)\n    {\n        // when multiple erors exist, then output the results to the fatal error output\n        msg.error = msg.error + \" Errors persist despite trying to update the global variable from the Google sheets data source.\"\n        return [null, null, msg]\n    }\n    else\n    {\n        //when just 1 error has been encountered send to the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n        return [null, msg, null]\n    }\n}\nelse\n{\n    //since it did not exist, populate it with 1 and return on the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n    msg.searchErrorCount = 1\n    return [null, msg, null]\n}","outputs":3,"noerr":0,"x":780,"y":220,"wires":[["d55b8c57.d04ef"],["40fa0c97.db2414"],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"7e79a580.efbe9c","type":"function","z":"9d262d68.d01aa","name":"Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":730,"y":352,"wires":[["a4aa3ed6.857"]]},{"id":"edbb356e.58e178","type":"comment","z":"9d262d68.d01aa","name":"Single key, Single value","info":"","x":160,"y":40,"wires":[]},{"id":"1ede2075.a1d7d","type":"inject","z":"9d262d68.d01aa","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":520,"wires":[["b63a6e5d.be0c4"]]},{"id":"b63a6e5d.be0c4","type":"change","z":"9d262d68.d01aa","name":"Set Search Variables","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"keyname","pt":"msg","to":"DeviceID","tot":"str"},{"t":"set","p":"searchtarget","pt":"msg","to":"HB007","tot":"str"},{"t":"set","p":"datacolumnname","pt":"msg","to":"TranslationType","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"M","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":310,"y":520,"wires":[["45113583.81dbac","e6a33264.a9685"]]},{"id":"e6a33264.a9685","type":"debug","z":"9d262d68.d01aa","name":"0","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":840,"y":500,"wires":[]},{"id":"45113583.81dbac","type":"function","z":"9d262d68.d01aa","name":"1 Func From Global with checks and Filter Trick","func":"//retrieve the data to be examined from the global variable\nvar datatable = global.get(msg.globalsource)\n//check if there was in fact a global variable with the correct name \n//datatable !== undefined means that there was something in a variable with that name\n//datatable == undefined (the else option) means that the variable did not exist\nif (datatable !== undefined) {\n    //find the column with the header equal to the keyname\n    //XXXXXXXXXXXXXXXX\n    node.warn(\"8\")\n    node.warn(datatable)\n    keyColumnLocation = datatable[0].findIndex(element => element == msg.keyname)\n    // keyColumnLocation == -1 means that the item wasn't found\n    if (keyColumnLocation == -1) {\n        msg.error = \"Key with value \\\"\" + msg.keyname + \"\\\" not found amongst the \" + (datatable[0].length + 1) + \" entries, which include \" + datatable[0]\n        //either create the error count with value of 1 or increment it if it already exists\n        if (typeof msg.searchErrorCount !== undefined) {\n            msg.searchErrorCount = 1\n        }\n        else {\n            msg.searchErrorCount++\n        }\n    }\n    // when column is found then do this work\n    else {\n        // try to find name of the column where the desired data resides\n        //YYYYYYYYYYYYYYYY\n        dataHeaderColumnLocation = datatable[0].findIndex(element => element == msg.datacolumnname)\n        // (dataHeaderColumnLocation == -1) means that the item wasn't found\n        if (dataHeaderColumnLocation == -1) {\n            //Put info into error to explain why no result was returned\n            msg.error = \"The data column with the value \\\"\" + msg.datacolumnname + \"\\\" not found amongst the \" + (datatable[0].length + 1) + \" entries, which include \" + datatable[0]\n        }\n        else {\n            // find which row to look at\n            searchTargetRowLocation = datatable.findIndex(element => element[keyColumnLocation] == msg.searchtarget)\n            // (searchTargetRowLocation == -1) means that no row was found\n            if (searchTargetRowLocation == -1) {\n                //Put info into error to explain why no result was returned\n                msg.error = \"The item searched for \\\"\" + msg.searchtarget + \"\\\" was not found not found in the \\\"\" + msg.keyname + \"\\\" column\"\n            }\n            else {\n                //retrieve the desired data from the cell in the table and put into the value\n                msg.value = datatable[searchTargetRowLocation][dataHeaderColumnLocation]\n            }\n        }\n    }\n    //becaue actual results are being returned delete the accumulate error message\n    delete msg.error\n    return [msg, null, null]\n}\nelse {\n    //Populate the error message with info of the undesired outcome\n    msg.error = \"Global variable datatable not found\"\n    //send warning to the debug window and log\n    node.warn(\"Global variable \" + msg.globalsource + \" not found. 1 attempt will be made to reload from the Google Sheet.\")\n}\n//check to see if the code has reached this point without finding an error\n// (typeof msg.searchErrorCount !== undefined) means that there is an msg.searchErrorCount\nif (typeof msg.searchErrorCount !== undefined) {\n    // since it exists, check to see how many errors have occured.\n    if (msg.searchErrorCount > 1) {\n        // when multiple erors exist, then output the results to the fatal error output\n        msg.error = msg.error + \" Errors persist despite trying to update the global variable from the Google sheets data source.\"\n        return [null, null, msg]\n    }\n    else {\n        //when just 1 error has been encountered send to the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n        return [null, msg, null]\n    }\n}\nelse {\n    //since it did not exist, populate it with 1 and return on the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n    msg.searchErrorCount = 1\n    return [null, msg, null]\n}","outputs":3,"noerr":0,"x":760,"y":640,"wires":[["ca722004.d0676"],["40fa0c97.db2414"],["ac9c2534.dab078"]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"f2bf48a2.277dc8","type":"function","z":"9d262d68.d01aa","name":"Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":810,"y":780,"wires":[["45113583.81dbac"]]},{"id":"b54d4c19.5ece1","type":"comment","z":"9d262d68.d01aa","name":"Multiple Keys, Single value","info":"","x":150,"y":460,"wires":[]},{"id":"40fa0c97.db2414","type":"debug","z":"9d262d68.d01aa","name":"2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1160,"y":640,"wires":[]},{"id":"ca722004.d0676","type":"debug","z":"9d262d68.d01aa","name":"1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1130,"y":580,"wires":[]},{"id":"ac9c2534.dab078","type":"debug","z":"9d262d68.d01aa","name":"3","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1150,"y":720,"wires":[]},{"id":"90df27a2.698da8","type":"debug","z":"9d262d68.d01aa","name":"4","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":530,"y":820,"wires":[]},{"id":"668f7b94.1eac24","type":"debug","z":"a73af62e.c418b8","name":"Ready to clean for Hubitat","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1990,"y":200,"wires":[]},{"id":"5c6d60df.4daf9","type":"debug","z":"a73af62e.c418b8","name":"Show Influx input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3150,"y":120,"wires":[]},{"id":"3a90711b.47f7ce","type":"change","z":"a73af62e.c418b8","name":"Add MQTT Master (different per source)","rules":[{"t":"set","p":"MQTTName","pt":"msg","to":"Hubitat","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1660,"y":40,"wires":[["668f7b94.1eac24"]]},{"id":"67fca0f9.da6f8","type":"function","z":"a73af62e.c418b8","name":"Common function to rename the measurement name (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2320,"y":40,"wires":[["b3e7fb11.52ea28"]]},{"id":"b3e7fb11.52ea28","type":"function","z":"a73af62e.c418b8","name":"Common Function to get translation/scaling label device+pay.name+table = TranslationType (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2440,"y":80,"wires":[["9eaeb6cb.347278","21a5a085.807e9"]]},{"id":"9eaeb6cb.347278","type":"function","z":"a73af62e.c418b8","name":"Translation Path (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2200,"y":120,"wires":[["21a5a085.807e9"]]},{"id":"4eea1052.e1383","type":"function","z":"a73af62e.c418b8","name":"Write to MQTT prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2860,"y":200,"wires":[["a469e97f.ec8658"]]},{"id":"502b902f.6756d","type":"function","z":"a73af62e.c418b8","name":"Write to InfluxDB prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2860,"y":120,"wires":[["5c6d60df.4daf9"]]},{"id":"21a5a085.807e9","type":"function","z":"a73af62e.c418b8","name":"Gather both types (incomplete","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2510,"y":120,"wires":[["502b902f.6756d","4eea1052.e1383","6a83e86a.f6d388"]]},{"id":"6a83e86a.f6d388","type":"function","z":"a73af62e.c418b8","name":"Write to subflow status prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2880,"y":160,"wires":[["a3143829.4bbc58"]]},{"id":"a3143829.4bbc58","type":"debug","z":"a73af62e.c418b8","name":"Show Status input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3150,"y":160,"wires":[]},{"id":"a469e97f.ec8658","type":"debug","z":"a73af62e.c418b8","name":"Show MQTT input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3150,"y":200,"wires":[]},{"id":"831c7de9.65f3c","type":"change","z":"f9a34738.f12c28","name":"Add MQTT Master (different per source)","rules":[{"t":"set","p":"MQTTName","pt":"msg","to":"Homebridge","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1560,"y":320,"wires":[["bee29f25.e7e95"]]},{"id":"bfdbd6c1.2d3018","type":"debug","z":"f9a34738.f12c28","name":"Show Influx input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2930,"y":260,"wires":[]},{"id":"b0b291e4.5e00f","type":"function","z":"f9a34738.f12c28","name":"Common function to rename the measurement name (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2100,"y":180,"wires":[["df1261a1.172fd"]]},{"id":"df1261a1.172fd","type":"function","z":"f9a34738.f12c28","name":"Common Function to get translation/scaling label device+pay.name+table = TranslationType (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2220,"y":220,"wires":[["a3efdb98.fa4898","6980ef5d.8b46c"]]},{"id":"a3efdb98.fa4898","type":"function","z":"f9a34738.f12c28","name":"Translation Path (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":1980,"y":260,"wires":[["6980ef5d.8b46c"]]},{"id":"abc799ae.c873e8","type":"function","z":"f9a34738.f12c28","name":"Write to MQTT prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2640,"y":340,"wires":[["ec4c94c2.bb27b8"]]},{"id":"6c3d76c8.be2408","type":"function","z":"f9a34738.f12c28","name":"Write to InfluxDB prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2640,"y":260,"wires":[["bfdbd6c1.2d3018"]]},{"id":"6980ef5d.8b46c","type":"function","z":"f9a34738.f12c28","name":"Gather both types (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2290,"y":260,"wires":[["6c3d76c8.be2408","abc799ae.c873e8","d85541bb.f9609"]]},{"id":"d85541bb.f9609","type":"function","z":"f9a34738.f12c28","name":"Write to subflow status prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":2660,"y":300,"wires":[["554a29c9.ea75b8"]]},{"id":"554a29c9.ea75b8","type":"debug","z":"f9a34738.f12c28","name":"Show Status input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2930,"y":300,"wires":[]},{"id":"ec4c94c2.bb27b8","type":"debug","z":"f9a34738.f12c28","name":"Show MQTT input","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2930,"y":340,"wires":[]},{"id":"6170399.49c02c8","type":"mqtt in","z":"54cae49c.6ee04c","name":"","topic":"zigbee2mqtt/#","qos":"2","datatype":"auto","broker":"a5bf81ee.27852","x":170,"y":360,"wires":[["d3c99000.08394"]]},{"id":"3d8d9475.6ec05c","type":"subflow:f14b69ba.8b2da8","z":"54cae49c.6ee04c","name":"","env":[],"x":590,"y":320,"wires":[]},{"id":"1263d8e6.0b9287","type":"debug","z":"f14b69ba.8b2da8","name":"MQTT Payloads","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":160,"y":120,"wires":[]},{"id":"6ca07f0d.53213","type":"inject","z":"54cae49c.6ee04c","name":"Toggle gate on/off","topic":"control","payload":"toggle","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":150,"y":320,"wires":[["d3c99000.08394"]]},{"id":"d3c99000.08394","type":"gate","z":"54cae49c.6ee04c","name":"","controlTopic":"control","defaultState":"closed","openCmd":"open","closeCmd":"close","toggleCmd":"toggle","defaultCmd":"default","persist":false,"x":350,"y":320,"wires":[["3d8d9475.6ec05c"]]},{"id":"6d51c224.f73b6c","type":"mqtt in","z":"9d262d68.d01aa","name":"","topic":"zigbee2mqtt/#","qos":"2","datatype":"auto","broker":"a5bf81ee.27852","x":210,"y":1040,"wires":[["79788de4.db27a4"]]},{"id":"9ce885cc.69e5b8","type":"inject","z":"9d262d68.d01aa","name":"Toggle gate on/off","topic":"control","payload":"toggle","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":190,"y":1000,"wires":[["79788de4.db27a4"]]},{"id":"79788de4.db27a4","type":"gate","z":"9d262d68.d01aa","name":"","controlTopic":"control","defaultState":"open","openCmd":"open","closeCmd":"close","toggleCmd":"toggle","defaultCmd":"default","persist":false,"x":390,"y":1000,"wires":[["19f49303.98d40d"]]},{"id":"6baf081e.97f9a8","type":"debug","z":"9d262d68.d01aa","name":"MQTT Output","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1300,"y":1260,"wires":[]},{"id":"19f49303.98d40d","type":"string","z":"9d262d68.d01aa","name":"Remove zigbee2mqtt/ from the topic","methods":[{"name":"chompLeft","params":[{"type":"str","value":"zigbee2mqtt/"}]}],"prop":"topic","propout":"topic","object":"msg","objectout":"msg","x":610,"y":1000,"wires":[["9b871090.fe804"]]},{"id":"9ca796c9.1fbc78","type":"change","z":"9d262d68.d01aa","name":"Add MQTT Master (different per source)","rules":[{"t":"set","p":"MQTTName","pt":"msg","to":"zb2mqtt","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":980,"y":1040,"wires":[["c9d4805.3dca98"]]},{"id":"e9bb1041.58068","type":"function","z":"9d262d68.d01aa","name":"Common function to rename the measurement name (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":700,"y":1340,"wires":[["6585d7f0.7393e8"]]},{"id":"6585d7f0.7393e8","type":"function","z":"9d262d68.d01aa","name":"Common Function to get translation/scaling label device+pay.name+table = TranslationType (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":820,"y":1380,"wires":[["26807d56.577972","b81b40ee.9d399"]]},{"id":"26807d56.577972","type":"function","z":"9d262d68.d01aa","name":"Translation Path (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":580,"y":1420,"wires":[["b81b40ee.9d399"]]},{"id":"3be3b8f2.9083c8","type":"function","z":"9d262d68.d01aa","name":"Write to MQTT prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":1240,"y":1500,"wires":[[]]},{"id":"f4d235d3.6f2b58","type":"function","z":"9d262d68.d01aa","name":"Write to InfluxDB prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":1240,"y":1420,"wires":[[]]},{"id":"b81b40ee.9d399","type":"function","z":"9d262d68.d01aa","name":"Gather both types (incomplete","func":"\nreturn msg;","outputs":1,"noerr":0,"x":890,"y":1420,"wires":[["f4d235d3.6f2b58","3be3b8f2.9083c8","5a22b22e.7d9ffc"]]},{"id":"5a22b22e.7d9ffc","type":"function","z":"9d262d68.d01aa","name":"Write to subflow status prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":1260,"y":1460,"wires":[[]]},{"id":"193ef5bc.ad23ea","type":"debug","z":"f14b69ba.8b2da8","name":"MQTT Output","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":780,"y":4740,"wires":[]},{"id":"adfca76f.7df238","type":"string","z":"f14b69ba.8b2da8","name":"Remove zigbee2mqtt/ from the topic","methods":[{"name":"chompLeft","params":[{"type":"str","value":"zigbee2mqtt/"}]}],"prop":"topic","propout":"topic","object":"msg","objectout":"msg","x":230,"y":4620,"wires":[["5d083dd4.376254"]]},{"id":"5d083dd4.376254","type":"function","z":"f14b69ba.8b2da8","name":"Put device ID into msg (incomplete use lookup)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":260,"y":4660,"wires":[["6974d333.96eeec"]]},{"id":"6974d333.96eeec","type":"change","z":"f14b69ba.8b2da8","name":"Add MQTT Master (different per source)","rules":[{"t":"set","p":"MQTTName","pt":"msg","to":"zb2mqtt","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":240,"y":4700,"wires":[["a4b99b21.e62628"]]},{"id":"a4b99b21.e62628","type":"function","z":"f14b69ba.8b2da8","name":"5.\tSplit kv pairs (from value) into 1-n msg stream (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":300,"y":4740,"wires":[["193ef5bc.ad23ea","b4e074f2.a5d3d8"]]},{"id":"b4e074f2.a5d3d8","type":"function","z":"f14b69ba.8b2da8","name":"Common function to rename the measurement name (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":320,"y":4780,"wires":[["102a2801.d77578"]]},{"id":"102a2801.d77578","type":"function","z":"f14b69ba.8b2da8","name":"Common Function to get translation/scaling label device+pay.name+table = TranslationType (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":440,"y":4820,"wires":[["e5cbba82.1d9c68","5f5555fd.9a8a8c"]]},{"id":"e5cbba82.1d9c68","type":"function","z":"f14b69ba.8b2da8","name":"Translation Path (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":200,"y":4860,"wires":[["5f5555fd.9a8a8c"]]},{"id":"f590b600.ed2bd8","type":"function","z":"f14b69ba.8b2da8","name":"Write to MQTT prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":860,"y":4940,"wires":[[]]},{"id":"54b95c8a.6ff6d4","type":"function","z":"f14b69ba.8b2da8","name":"Write to InfluxDB prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":860,"y":4860,"wires":[[]]},{"id":"5f5555fd.9a8a8c","type":"function","z":"f14b69ba.8b2da8","name":"Gather both types (incomplete","func":"\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":4860,"wires":[["54b95c8a.6ff6d4","f590b600.ed2bd8","746d74ff.8e835c"]]},{"id":"746d74ff.8e835c","type":"function","z":"f14b69ba.8b2da8","name":"Write to subflow status prep (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":880,"y":4900,"wires":[[]]},{"id":"9b871090.fe804","type":"change","z":"9d262d68.d01aa","name":"Put device ID into msg.deviceID and payload into payload.value","rules":[{"t":"set","p":"deviceID","pt":"msg","to":"topic","tot":"msg"},{"t":"set","p":"temp","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"set","p":"payload.value","pt":"msg","to":"temp","tot":"msg"},{"t":"delete","p":"temp","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1050,"y":1000,"wires":[["9ca796c9.1fbc78"]]},{"id":"c9d4805.3dca98","type":"function","z":"9d262d68.d01aa","name":"Split kv pairs (from value) into 1-n msg stream (ready for testing)","func":"/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value;\n                --msg.payload.value;\n            }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        if (typeof name === 'undefined') \n        {\n            latestMsg.payload.name = key;\n        } \n        else \n        {\n            latestMsg.payload.name = name + \"/\" + key;\n        }\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n//Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \"/\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":1050,"y":1080,"wires":[["995a268f.4fc018"]]},{"id":"995a268f.4fc018","type":"function","z":"9d262d68.d01aa","name":"Move data to proper places (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":980,"y":1120,"wires":[["1c7d8fee.61fda"]]},{"id":"9392480e.f981f8","type":"debug","z":"f9a34738.f12c28","name":"Ready to be cleaned Homebridge","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2000,"y":180,"wires":[]},{"id":"1c7d8fee.61fda","type":"change","z":"9d262d68.d01aa","name":"","rules":[{"t":"delete","p":"qos","pt":"msg"},{"t":"delete","p":"retain","pt":"msg"},{"t":"delete","p":"payload.dataType","pt":"msg"},{"t":"delete","p":"deviceID","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"MQTTName","tot":"msg"},{"t":"delete","p":"MQTTName","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"topic","tot":"msg"},{"t":"delete","p":"topic","pt":"msg"},{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"payload.value","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":900,"y":1160,"wires":[["1b66ad1b.b0b423"]]},{"id":"1b66ad1b.b0b423","type":"function","z":"9d262d68.d01aa","name":"Device ID Lookup (incomplete)","func":"\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":1200,"wires":[["eec724b0.144c98"]]},{"id":"16cc5e6d.374172","type":"link in","z":"9d262d68.d01aa","name":"Get DeviceID","links":["eec724b0.144c98"],"x":130,"y":2900,"wires":[["fe51bd12.0b915"]],"l":true},{"id":"eec724b0.144c98","type":"link out","z":"9d262d68.d01aa","name":"Get DeviceID","links":["16cc5e6d.374172","a7c7f2d7.dc4a7"],"x":230,"y":1240,"wires":[],"l":true},{"id":"1ece25a3.40074a","type":"link in","z":"9d262d68.d01aa","name":"Got DeviceID","links":["5fb8fdf9.b2fee4","91aaddec.ae4b4"],"x":930,"y":1260,"wires":[["e9bb1041.58068"]],"l":true},{"id":"5fb8fdf9.b2fee4","type":"link out","z":"9d262d68.d01aa","name":"Got DeviceID","links":["1ece25a3.40074a"],"x":1130,"y":2040,"wires":[],"l":true},{"id":"653c1be0.99f754","type":"change","z":"9d262d68.d01aa","name":"Set Search Variables","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyname","pt":"msg","to":"Device","tot":"str"},{"t":"set","p":"searchtarget","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"datacolumnname","pt":"msg","to":"DeviceID","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":390,"y":2053,"wires":[["87e7fce6.79fde","d677a94a.cec048"]]},{"id":"d677a94a.cec048","type":"subflow:72970ac0.70cf94","z":"9d262d68.d01aa","name":"","env":[],"x":650,"y":2053,"wires":[["b5d9b3f4.d5ee7"],[],[]]},{"id":"87e7fce6.79fde","type":"function","z":"9d262d68.d01aa","name":"1 Func From Global with checks and Filter Trick","func":"//retrieve the data to be examined from the global variable\nvar devices = global.get(msg.globalsource)\n//check if there was in fact a global variable with the correct name \n//devices !== undefined means that there was something in a variable with that name\n//devices == undefined (the else option) means that the variable did not exist\nif (devices !== undefined)\n{\n    //find the column with the header equal to the keyname\n    keyColumnLocation = devices[0].findIndex(element => element == msg.keyname)\n    // keyColumnLocation == -1 means that the item wasn't found\n    if (keyColumnLocation == -1)\n    {\n        msg.error = \"Key with value \\\"\" + msg.keyname + \"\\\" not found amongst the \" + (devices[0].length + 1) + \" entries, which include \" + devices[0]\n        //either create the error count with value of 1 or increment it if it already exists\n        if (typeof msg.searchErrorCount !== undefined)\n        {\n            msg.searchErrorCount = 1\n        }\n        else\n        {\n            msg.searchErrorCount++\n        }\n    }\n    // when column is found then do this work\n    else\n    {\n        // try to find name of the column where the desired data resides\n        dataHeaderColumnLocation = devices[0].findIndex(element => element == msg.datacolumnname)\n        // (dataHeaderColumnLocation == -1) means that the item wasn't found\n        if (dataHeaderColumnLocation == -1)\n        {\n            //Put info into error to explain why no result was returned\n            msg.error = \"The data column with the value \\\"\" + msg.datacolumnname + \"\\\" not found amongst the \" + (devices[0].length + 1) + \" entries, which include \" + devices[0]\n        }\n        else\n        {\n            // find which row to look at\n            searchTargetRowLocation = devices.findIndex(element => element[keyColumnLocation] == msg.searchtarget)\n            // (searchTargetRowLocation == -1) means that no row was found\n            if (searchTargetRowLocation == -1)\n            {\n                //Put info into error to explain why no result was returned\n                msg.error = \"The item searched for \\\"\" + msg.searchtarget + \"\\\" was not found not found in the \\\"\" + msg.keyname + \"\\\" column\"\n            }\n            else\n            {\n                //retrieve the desired data from the cell in the table and put into the value\n                msg.value = devices[searchTargetRowLocation][dataHeaderColumnLocation]\n            }\n        }\n    }\n    //becaue actual results are being returned delete the accumulate error message\n    delete msg.error\n    return [msg, null, null]\n}\nelse {\n    //Populate the error message with info of the undesired outcome\n    msg.error = \"Global variable Devices not found\"\n    //send warning to the debug window and log\n    node.warn(\"Global variable \" + msg.globalsource + \" not found. 1 attempt will be made to reload from the Google Sheet.\")\n}\n//check to see if the code has reached this point without finding an error\n// (typeof msg.searchErrorCount !== undefined) means that there is an msg.searchErrorCount\nif (typeof msg.searchErrorCount !== undefined)\n{\n    // since it exists, check to see how many errors have occured.\n    if (msg.searchErrorCount > 1)\n    {\n        // when multiple erors exist, then output the results to the fatal error output\n        msg.error = msg.error + \" Errors persist despite trying to update the global variable from the Google sheets data source.\"\n        return [null, null, msg]\n    }\n    else\n    {\n        //when just 1 error has been encountered send to the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n        return [null, msg, null]\n    }\n}\nelse\n{\n    //since it did not exist, populate it with 1 and return on the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n    msg.searchErrorCount = 1\n    return [null, msg, null]\n}","outputs":3,"noerr":0,"x":480,"y":2120,"wires":[[],[],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"534d5fed.210c","type":"function","z":"9d262d68.d01aa","name":"Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":690,"y":2300,"wires":[["87e7fce6.79fde"]]},{"id":"b5d9b3f4.d5ee7","type":"change","z":"9d262d68.d01aa","name":"Set Search Variables","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"set","p":"exportableresults.DeviceID","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"value","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":920,"y":2040,"wires":[["5fb8fdf9.b2fee4"]]},{"id":"c4d3d7e5.b8f3b8","type":"change","z":"9d262d68.d01aa","name":"Set Search Variables normal","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":160,"y":2640,"wires":[["8e2a27a7.925018"]]},{"id":"8e2a27a7.925018","type":"function","z":"9d262d68.d01aa","name":"After functionized version 1 Func From Global with checks and Filter Trick","func":"function BuildCacheObject(searchKeysArray, SearchValuesArray, SearchResultKeysArray) {\n    //3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\n    for (index = 0; index < searchKeysArray.length; index++) {\n        cacheKey = cacheKey + searchKeysArray[index] + SearchValuesArray[index]\n    }\n    //add all fields that will be looked for into the cache key\n    for (index = 0; index < SearchResultKeysArray.length; index++) {\n        cacheKey = cacheKey + SearchResultKeysArray[index]\n    }\n    //combine the cache key and the cache time into a single object that can be compared with the cached last search\n    createdCacheObject = {\n        query: cacheKey,\n        time: cacheTime\n    }\n    return createdCacheObject\n}\nfunction CommonLookup(workingMsg, keysForSearchColumn, keysForResultColumn, valuesSearchedFor, requestedDataTable, cacheObject) {\n    //node.warn(\"///////inputs/////////\")\n    //node.warn(workingMsg)\n    //node.warn(keysForSearchColumn)\n    node.warn(keysForResultColumn)\n    //node.warn(valuesSearchedFor)\n    //node.warn(requestedDataTable)\n    //node.warn(cacheObject)\n    //node.warn(\"///////inputs/////////\")\n    var searchKeyIndices = []\n    var searchResultKeysIndices = []\n    if (requestedDataTable !== undefined) {\n        // iterate through all search keys.\n        //outer index is the place along the array of search keys\n        //node.warn(\"23  requestedDataTable[0]= \" + requestedDataTable[0])\n        //node.warn(\"24  keysForSearchColumn= \" + keysForSearchColumn)\n        //node.warn(\"25  requestedDataTable[0].length = \" + requestedDataTable[0].length)\n//////////////////////////////////////////////////////revision space\n        for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++) {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++) {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                //node.warn(\"29  searchKeyIndices.length= \" + searchKeyIndices.length)\n                //node.warn(\"27 \" + requestedDataTable[0][innerIndex])\n                //node.warn(\"28 \" + keysForSearchColumn[outerIndex])\n                if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex]) {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    //node.warn(\"37 match of  \" + keysForSearchColumn[innerIndex] + \" and \" + requestedDataTable[0][outerIndex])\n                    searchKeyIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    //////////////////////////////////////////////////////////////////////////break may be a problem. Maybe swap inner and outer arrays and then do some if then about getting through the whole data headers without finding. Right now it only looks for 1 failure\n                    break\n                }\n                else {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    //this is accumulating how many times the search key did not match one of the data table headers\n                    //node.warn(\"47 no match of  \" + keysForSearchColumn[outerIndex] + \" and \" + requestedDataTable[0][innerIndex])\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter) {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if (typeof workingMsg.searchErrorCount !== undefined) {\n                            workingMsg.searchErrorCount = 1\n                        } else {\n                            workingMsg.searchErrorCount++\n                        }\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1) {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        }\n                        else {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        }\n                    }\n                    \n                }\n            }\n        }\n        node.warn(\"75 searchKeyIndices =   \" + searchKeyIndices + \" which looks good\")\n//////////////////////////////////////////////////////revision space\n        //if this point is reached, searchKeyIndices has been populated\n        // iterate through all search result keys.\n        //outer index is the place along the array of search keys \n        for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++) {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++) {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                //node.warn(\"95  keysForResultColumn.length= \" + keysForResultColumn.length)\n                //node.warn(\"96 \" + requestedDataTable[0][innerIndex])\n                //node.warn(\"97 \" + keysForResultColumn[outerIndex])\n                if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex]) {\n                    //node.warn(\"100 match of  \" + keysForResultColumn[outerIndex] + \" and \" + requestedDataTable[0][innerIndex])\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchResultKeysIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    break\n                }\n                else {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter) {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if (typeof workingMsg.searchErrorCount !== undefined) {\n                            workingMsg.searchErrorCount = 1\n                        } else {\n                            workingMsg.searchErrorCount++\n                        }\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1) {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        }\n                        else {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        }\n                    }\n                }\n            }\n        }\n        node.warn(\"134 searchResultKeysIndices =   \" + searchResultKeysIndices+\" which looks correct\")\n        //if this point is reached, both searchKeyIndices and searchResultKeysIndices have been populated\n        //loop through all search keys, 1 index at a time and filter to a row that has the desired data in the desired column\n\n        var result = []\n        var pushable\n        for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++) {\n            pushable = false\n            for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++) {\n                if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) {\n                    pushable = true\n                } else {\n                    pushable = false\n                }\n            }\n            if (pushable) {\n                result.push(requestedDataTable[outerIndex])\n            }\n        }\n        ////////////////////////////////////////////////////////\n\n\n\n        node.warn(\"157 result =   \" + result)\n        node.warn(\"158 result.length =   \" + result.length)\n        \n        //if this point is reached then there is a filtered table\n        if (result.length === 0) {\n            workingMsg.error = \"After filtering no data rows were left.\"\n            //either create and populate the error count at 1 or increment it if it already exists\n            if (typeof workingMsg.searchErrorCount !== undefined) {\n                workingMsg.searchErrorCount = 1\n            } else {\n                workingMsg.searchErrorCount++\n            }\n            //return the error on the middle there is an error output,\n            //this retry is in case the column was added to the google sheet since it was last loaded into node red\n            if (workingMsg.searchErrorCount > 1) {\n                //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                return [null, null, workingMsg]\n            }\n            else {\n                //return the error on the middle there is an error output,\n                return [null, workingMsg, null]\n            }\n        }\n        else if (result.length > 1) {\n            //do the warning that multiple were found but will take the first\n            node.warn(\"Normally the filter should leave only 1 row. In this case more than 1 row was left. The data will be populated with the results from the first of \" + result.length + \" rows.\")\n        }\n        //look up the data\n        for (index = 0; index < searchResultKeysIndices.length; index++) {\n            node.warn(\"186 index \" + index)\n            node.warn(\"187 putting this into results \" + result[0][searchResultKeysIndices])\n            node.warn(\"188 name of place to put results \" + keysForResultColumn[index])\n            //workingMsg.searchfor.keysForSearchColumn[index] = result[0][searchResultKeysIndices]\n            // the almost working version\n            //keysForResultColumn[index] = DeviceID\n            workingMsg.searchfor[keysForResultColumn[index]] = result[0][searchResultKeysIndices]\n            node.warn(\"192 putting this into results \" + result[0][searchResultKeysIndices])\n        }\n        //if this point is reached then work workingMsg contains complete info\n        //build and save the LastSearch obect\n        cacheObject.searchfor = workingMsg.searchfor\n        global.set(\"LastSearch\", cacheObject)\n        return [workingMsg, null, null]\n    }\n    else {\n        //return on second output to trigger population of global that feeds datatable\n        //put some details on this configuration into the msg to be output\n        workingMsg.error = \"The data normally loaded from google sheet was not loaded.\"\n        //either create and populate the error count at 1 or increment it if it already exists\n        if (typeof workingMsg.searchErrorCount !== undefined) {\n            workingMsg.searchErrorCount = 1\n        } else {\n            workingMsg.searchErrorCount++\n        }\n        //return the error on the middle there is an error output,\n        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n        if (workingMsg.searchErrorCount > 1) {\n            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n            return [null, null, workingMsg]\n        }\n        else {\n            //return the error on the middle there is an error output,\n            return [null, workingMsg, null]\n        }\n    }\n}\n\n\n\n\n\n//1 Get must have items: searchKeys, searchValues, searchResultKeys, cachedSearch, cacheTime\nvar searchKeys = Object.keys(msg.keyvalues)\nvar searchValues = Object.values(msg.keyvalues)\nvar searchResultKeys = Object.keys(msg.searchfor)\nvar cachedSearch = global.get(\"LastSearch\")\nvar cacheTime = new Date().getTime()\n//2 create working variables searchKeyIndices, searchResultKeysIndices, index, cacheKey\nvar searchResultKeysIndices = []\nvar index\nvar cacheKey = \"\"\n//3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\ncacheObject = BuildCacheObject(searchKeys, searchValues, searchResultKeys)\n//node.warn(\"190 \" + cacheObject)\n//return\n//4\n/*\n * 4.1 t/f cached result is usable\n    *  4.1.true then t/f does it meet criteria\n        * 4.1.true.true\ttrue msg.searchfor = cachedSearch.searchfor\n        * 4.1.true.false do the common lookup\n    *   4.1.false  do the common lookup\n    */\n//4.1\nif (cachedSearch !== undefined) {\n    //4.1.true\n    if ((cachedSearch.query == cacheKey) && (cachedSearch.time < cacheTime + 5000)) {\n        //4.1.true.true\n        node.warn(msg)\n        //delete msg.searchfor\n        node.warn(msg)\n        node.warn(cachedSearch.query.searchfor)\n        msg.searchfor = cachedSearch.query.searchfor\n        node.warn(msg)\n        return\n    }\n    //4.1.true.false\n    else {\n        //4.1.true.false\n        lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n        //return results from the node on 1 of the 3 outputs\n        node.warn(\"lookupResults  next item \")\n        node.warn(lookupResults)\n        if (lookupResults[0] !== null) {\n            return [lookupResults[0], null, null]\n        }\n        else if (lookupResults[1] !== null) {\n            return [null, lookupResults[1], null]\n        }\n        else {\n            return [null, null, lookupResults[2]]\n        }\n    }\n\n}\n//4.1.false\nelse {\n    //4.1.false\n    lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n    //return results from the node on 1 of the 3 outputs\n    if (lookupResults[0] !== null) {\n        return [lookupResults[0], null, null]\n    }\n    else if (lookupResults[1] !== null) {\n        return [null, lookupResults[1], null]\n    }\n    else {\n        return [null, null, lookupResults[2]]\n    }\n}\nnode.warn(\"This Node should not reach this point\")\nreturn","outputs":3,"noerr":0,"x":660,"y":2480,"wires":[[],["9b8e2cb1.8f422"],["9b8e2cb1.8f422"]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"e4da30.4d4645d","type":"function","z":"9d262d68.d01aa","name":"Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":1210,"y":2620,"wires":[["8e2a27a7.925018"]]},{"id":"d26b3264.19eb9","type":"change","z":"9d262d68.d01aa","name":"Set Search Variables","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"set","p":"exportableresults.DeviceID","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"value","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1100,"y":2400,"wires":[[]]},{"id":"9e44d2b3.ed79e","type":"comment","z":"9d262d68.d01aa","name":"separate key target value version","info":"","x":450,"y":1980,"wires":[]},{"id":"4310c076.757f5","type":"comment","z":"9d262d68.d01aa","name":"Single key target value version","info":"","x":390,"y":2360,"wires":[]},{"id":"f6aaa3ac.ff007","type":"debug","z":"9d262d68.d01aa","name":"1111111","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1300,"y":1160,"wires":[]},{"id":"9b8e2cb1.8f422","type":"debug","z":"9d262d68.d01aa","name":"222222","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1320,"y":2360,"wires":[]},{"id":"3a09b091.66244","type":"function","z":"ca5ba022.63ec4","name":"1 Func From Global with checks and Filter Trick","func":"//retrieve the data to be examined from the global variable\nvar devices = global.get(msg.globalsource)\n//check if there was in fact a global variable with the correct name \n//devices !== undefined means that there was something in a variable with that name\n//devices == undefined (the else option) means that the variable did not exist\nif (devices !== undefined)\n{\n    //find the column with the header equal to the keyname\n    keyColumnLocation = devices[0].findIndex(element => element == msg.keyname)\n    // keyColumnLocation == -1 means that the item wasn't found\n    if (keyColumnLocation == -1)\n    {\n        msg.error = \"Key with value \\\"\" + msg.keyname + \"\\\" not found amongst the \" + (devices[0].length + 1) + \" entries, which include \" + devices[0]\n        //either create the error count with value of 1 or increment it if it already exists\n        if (typeof msg.searchErrorCount !== undefined)\n        {\n            msg.searchErrorCount = 1\n        }\n        else\n        {\n            msg.searchErrorCount++\n        }\n    }\n    // when column is found then do this work\n    else\n    {\n        // try to find name of the column where the desired data resides\n        dataHeaderColumnLocation = devices[0].findIndex(element => element == msg.datacolumnname)\n        // (dataHeaderColumnLocation == -1) means that the item wasn't found\n        if (dataHeaderColumnLocation == -1)\n        {\n            //Put info into error to explain why no result was returned\n            msg.error = \"The data column with the value \\\"\" + msg.datacolumnname + \"\\\" not found amongst the \" + (devices[0].length + 1) + \" entries, which include \" + devices[0]\n        }\n        else\n        {\n            // find which row to look at\n            searchTargetRowLocation = devices.findIndex(element => element[keyColumnLocation] == msg.searchtarget)\n            // (searchTargetRowLocation == -1) means that no row was found\n            if (searchTargetRowLocation == -1)\n            {\n                //Put info into error to explain why no result was returned\n                msg.error = \"The item searched for \\\"\" + msg.searchtarget + \"\\\" was not found not found in the \\\"\" + msg.keyname + \"\\\" column\"\n            }\n            else\n            {\n                //retrieve the desired data from the cell in the table and put into the value\n                msg.value = devices[searchTargetRowLocation][dataHeaderColumnLocation]\n            }\n        }\n    }\n    //becaue actual results are being returned delete the accumulate error message\n    delete msg.error\n    return [msg, null, null]\n}\nelse {\n    //Populate the error message with info of the undesired outcome\n    msg.error = \"Global variable Devices not found\"\n    //send warning to the debug window and log\n    node.warn(\"Global variable \" + msg.globalsource + \" not found. 1 attempt will be made to reload from the Google Sheet.\")\n}\n//check to see if the code has reached this point without finding an error\n// (typeof msg.searchErrorCount !== undefined) means that there is an msg.searchErrorCount\nif (typeof msg.searchErrorCount !== undefined)\n{\n    // since it exists, check to see how many errors have occured.\n    if (msg.searchErrorCount > 1)\n    {\n        // when multiple erors exist, then output the results to the fatal error output\n        msg.error = msg.error + \" Errors persist despite trying to update the global variable from the Google sheets data source.\"\n        return [null, null, msg]\n    }\n    else\n    {\n        //when just 1 error has been encountered send to the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n        return [null, msg, null]\n    }\n}\nelse\n{\n    //since it did not exist, populate it with 1 and return on the reprocess output so that an attempt can be made to populate the global variable from the spreadsheet\n    msg.searchErrorCount = 1\n    return [null, msg, null]\n}","outputs":3,"noerr":0,"x":340,"y":80,"wires":[[],[],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"f44036d9.791f58","type":"function","z":"ca5ba022.63ec4","name":"Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":500,"y":400,"wires":[["3a09b091.66244"]]},{"id":"a36a20a5.a4c2","type":"subflow:ca5ba022.63ec4","z":"9d262d68.d01aa","name":"","env":[],"x":700,"y":2420,"wires":[["d26b3264.19eb9"],[],[]]},{"id":"c0a1be9d.f2d42","type":"change","z":"9d262d68.d01aa","name":"Set Search Variables","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyname","pt":"msg","to":"Device","tot":"str"},{"t":"set","p":"searchtarget","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"datacolumnname","pt":"msg","to":"DeviceID","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":180,"y":2600,"wires":[[]]},{"id":"d7243037.19ec1","type":"function","z":"9d262d68.d01aa","name":"Before functionized version 1 Func From Global with checks and Filter Trick","func":"if (true) {\n    //find if there is a cached answer\n    var searchKeys = Object.keys(msg.keyvalues)\n    var searchValues = Object.values(msg.keyvalues)\n    var searchResultKeys = Object.keys(msg.searchfor)\n    var cachedSearch = global.get(\"LastSearch\")\n    var searchKeyIndices = []\n    var searchResultKeysIndices = []\n\n    //create and populate working variables\n    var index\n    var cacheKey = \"\"\n    var cacheTime = new Date().getTime()\n    //build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\n    for (index = 0; index < searchKeys.length; index++) {\n        cacheKey = cacheKey + searchKeys[index] + searchValues[index]\n    }\n    //add all fields that will be looked for into the cache key\n    for (index = 0; index < searchResultKeys.length; index++) {\n        cacheKey = cacheKey + searchResultKeys[index]\n    }\n    //combine the cache key and the cache time into a single object that can be compared with the cached last search\n    cacheObject = {\n        query: cacheKey,\n        time: cacheTime\n    }\n\n    /*\n     * \n     * \n     * If the cached search is usable\n     *  Then use cached results\n     *  Else do new query to Sheet info (also cached)\n     *  \n     */\n    node.warn(\"36\")\n    if (cachedSearch !== undefined) {\n        node.warn(\"38\")\n        if ((cachedSearch.query == cacheKey) && (cachedSearch.time < cacheTime + 5000)) {\n            node.warn(\"40\")\n            //////////////////////////////////////////////////////////\n            //code to replace the msg.searchfor with the version from the cache\n            //////////////////////////////////////////////////////////\n            msg.searchfor = cachedSearch.searchfor\n            //////////////////////////////////////////////////////////\n            //code to replace the msg.searchfor with the version from the cache\n            //////////////////////////////////////////////////////////\n        }\n        else\n        {\n            node.warn(\"51\")\n            node.warn(searchKeys)\n            node.warn(searchValues)\n            node.warn(\"Insert some search code\")\n            //////////////////////////////////////////////////////////\n            //put in code to do the look up into the google info\n            //////////////////////////////////////////////////////////\n            node.warn(msg.globalsource)\n            var requestedDataTable = global.get(msg.globalsource)\n            //check if there was in fact a global variable with the correct name \n            //datatable !== undefined means that there was something in a variable with that name\n            //datatable == undefined (the else option) means that the variable did not exist\n            //node.warn(datatable)\n            //a = datatable\n            node.warn(\"38\")\n            if (requestedDataTable !== undefined) {\n                node.warn(\"made it inside the conditional\")\n                node.warn(requestedDataTable)\n                //find the column with the header equal to the keyname\n                //XXXXXXXXXXXXXXXXvar searchKeys = Object.keys(msg.keyvalues)\n                node.warn(requestedDataTable)\n\n                // iterate through all search keys. This only looks for first\n                for (outerIndex = 0; outerIndex < requestedDataTable[0].length; outerIndex++) {\n                    for (innerIndex = 0; innerIndex < searchKeys.length; innerIndex++) {\n                        node.warn(\"76\")\n                        if (requestedDataTable[0][outerIndex] == searchKeys[innerIndex]) {\n                            searchKeyIndices.push(outerIndex)\n                        }\n                        else {\n                            msg.error = \"Key with value \\\"\" + searchKeys[innerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                            node.warn(\"82\")\n                            if (typeof msg.searchErrorCount !== undefined) {\n                                msg.searchErrorCount = 1\n                            }\n                            else {\n                                msg.searchErrorCount++\n                            }\n                        }\n                    }\n                }\n                //XXXXXXXXXXXXXX    node.warn(\"searchKeyIndices = \" + searchKeyIndices)\n                var result = requestedDataTable\n                for (index = 0; index < searchKeyIndices.length; index++) {\n                    result = result.filter(rows => rows[searchKeyIndices[index]] == searchValues[index]);\n                }\n                node.warn(\"requestedDataTable = \" + requestedDataTable)\n                node.warn(\"result = \" + result)\n                node.warn(\"99\")\n                return\n            }\n            else\n            {\n                node.warn(\"104\")\n                  //return on second output to trigger population of global that feeds datatable\n            }\n\n            //////////////////////////////////////////////////////////\n            //put in code to do the look up into the google info\n            //////////////////////////////////////////////////////////\n        }\n    }\n    else\n    {\n        node.warn(\"115\")\n        //since there was no cached search, do the the actual search\n        node.warn(\"Insert some search code because there was no cache\")\n\n        /*searchResultKeysIndices\n        var searchKeys = Object.keys(msg.keyvalues)\n        var searchValues = Object.values(msg.keyvalues)\n        var searchResultKeys = Object.keys(msg.searchfor)\n        var cachedSearch = global.get(\"LastSearch\")\n        var searchKeyIndices = []\n        var searchResultKeysIndices = []\n        */\n\n        // iterate through all requested data keys.\n        for (outerIndex = 0; outerIndex < requestedDataTable[0].length; outerIndex++) {\n            for (innerIndex = 0; innerIndex < searchResultKeys.length; innerIndex++) {\n                node.warn(\"125\")\n                if (requestedDataTable[0][outerIndex] == searchResultKeys[innerIndex]) {\n                    searchResultKeysIndices.push(outerIndex)\n                }\n                else {\n                    msg.error = \"Key with value \\\"\" + searchResultKeys[innerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                    node.warn(\"131\")\n                    if (typeof msg.searchErrorCount !== undefined) {\n                        msg.searchErrorCount = 1\n                    }\n                    else {\n                        msg.searchErrorCount++\n                    }\n                }\n            }\n        }\n        node.warn(result)\n        for (index = 0; index < searchKeyIndices.length; index++) {\n            msg.searchfor[0] = result[searchKeyIndices]\n        }\n        node.warn(\"requestedDataTable = \" + requestedDataTable)\n        node.warn(\"result = \" + result)\n        node.warn(\"99\")\n\n        //////////////////////////////////////////////////////////\n        //put in code to do the look up into the google info\n        //////////////////////////////////////////////////////////\n    }\n    //////////////////////////////////////////////////////////\n    //put in code to store the results into the cache\n    //////////////////////////////////////////////////////////\n    cacheObject.searchfor = msg.searchfor\n    //////////////////////////////////////////////////////////\n    //code to cache the search and its results\n    //////////////////////////////////////////////////////////\n    global.set(\"LastSearch\", cacheObject)\n}\nnode.warn(msg)\nnode.warn(\"132\")\nreturn  /////Once working as expected, return msg\n\n\n\nif (true) {\n//find if there is a cached answer\n\n//how?     depends on caching scheme\n//then put results into results and exit\n//else\n//create 5 arrays\n//1 key column names \n//2 column # for that name\n//3 lookup value for corresponding key\n//4 results keys\n//5 column # for that key(s)\n//6 result values\n//get the column numbers for each key in array 1 put into array 2\n//if any = -1 then error message and name that key and then don't return values\n//take in datatable, filter recursively to get only those rows that have lookup value from 3 in the column from 2\n//count number of rows a send warning when it is more than 1\n//get the column number for each resultkey in array 1 put into 5\n// user index to from 5 to look at row [0] and put that value into 6\n// make each key (4) and each result (6) into a pair that make up the exportable results object\n\n\n\n\n/*  This is how to do \"take in datatable, filter recursively to get only those rows that have lookup value from 3 in the column from 2\"\nconst words = [['spray','limit'], ['limit'], ['spray', 'limit', 'elite'], ['spray', 'junebug', 'elite'], ['exuberant'], ['destruction'], ['present']];\nconst array2 = [0,2,1]\nconst array3 = ['spray','elite','limit']\n\n//var result1 = words.filter(rows => rows[0] == 'spray');\nvar result = words //= result1.filter(rows => rows[2] == 'elite');\n\n//console.log(result1);\n//console.log(result);\n\nfor (index = 0; index < array2.length; index++) {\n        //console.log(index);\n        //console.log(array2[index])\n        //console.log(words[array2[index]])\n        console.log(array3[index])\n\tresult = result.filter(rows => rows[array2[index]] == array3[index]);\n    }\n// expected output: Array [\"exuberant\", \"destruction\", \"present\"]\nconsole.log(result);\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n/*\n * Build cacheKey and time\n * const object1 = {\n  a: 'somestring',\n  c: 45\n};\nconst object2 = {\n  d: '',\n  e: '',\n  f: ''\n};\nvar k = Object.keys(object1)\nvar v = Object.values(object1)\nvar kr = Object.keys(object2)\nconsole.log(k);\nconsole.log(v);\n// expected output: Array [\"somestring\", 42, false]\nvar cacheKey =\"\"\nfor (index = 0; index < k.length; index++) {\n  cacheKey = cacheKey+k[index]+v[index]\n}\nfor (index = 0; index < kr.length; index++) {\n  cacheKey = cacheKey+kr[index]\n}\nvar cacheTime = new Date().getTime()\nconsole.log(cacheKey)\nconsole.log(cacheTime)\n */\n}","outputs":3,"noerr":0,"x":490,"y":2800,"wires":[[],[],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"]},{"id":"9de971d4.93c26","type":"change","z":"9d262d68.d01aa","name":"1  test Set Search Variables","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Location","pt":"msg","to":"x","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":160,"y":2520,"wires":[["8e2a27a7.925018"]]},{"id":"fe51bd12.0b915","type":"change","z":"9d262d68.d01aa","name":"2 Original test Set Search Variables normal","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":910,"y":2920,"wires":[["afc9fdb.7f79"]]},{"id":"88896982.aa8258","type":"change","z":"9d262d68.d01aa","name":"3  test Set Search Variables","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Location","pt":"msg","to":"x","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":160,"y":2560,"wires":[["8e2a27a7.925018"]]},{"id":"afc9fdb.7f79","type":"gate","z":"9d262d68.d01aa","name":"","controlTopic":"control","defaultState":"closed","openCmd":"open","closeCmd":"close","toggleCmd":"toggle","defaultCmd":"default","persist":false,"x":710,"y":2680,"wires":[["8e2a27a7.925018"]]},{"id":"9708edf4.4bd","type":"inject","z":"9d262d68.d01aa","name":"Toggle gate on/off","topic":"control","payload":"toggle","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":450,"y":2680,"wires":[["afc9fdb.7f79"]]},{"id":"fbdc98c8.9e07b8","type":"lower-case","z":"d0bc7968.d150a8","name":"","x":610,"y":160,"wires":[["25437bdc.280684"]]},{"id":"90368fb.b62457","type":"inject","z":"d0bc7968.d150a8","name":"","topic":"","payload":"hgsasdAFSDDDDDDDDDDDDDDDDD","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":310,"y":260,"wires":[["fbdc98c8.9e07b8","84208d31.bbaaf"]]},{"id":"25437bdc.280684","type":"debug","z":"d0bc7968.d150a8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":770,"y":320,"wires":[]},{"id":"84208d31.bbaaf","type":"function","z":"d0bc7968.d150a8","name":"","func":"debugger;\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":280,"wires":[["25437bdc.280684"]]},{"id":"b36306d5.1140f8","type":"function","z":"32252d88.e55b52","name":"Determine Source For Gsheet lookup properties.","func":"//Read subflow input variables\nif (env.get(\"OverrideEnvVariables\"))\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse if (msg.IgnoreEnvVar)\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse\n{\n    var ColStart = env.get(\"ColStart\");\n    var ColEnd = env.get(\"ColEnd\");\n    var FirstRow = env.get(\"MinRow\");\n    var LastRow = env.get(\"MaxRow\");\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = env.get(\"Spreadsheet ID\");\n    msg.tab = env.get(\"TabName\");\n    msg.cellstart = ColStart + FirstRow\n    msg.cellend = ColEnd + LastRow\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n    //These 2 are needed later to calculate the last populate and first empty rows and columns\n    msg.ColStart = ColStart\n    msg.MinRow = FirstRow\n}\nreturn msg;","outputs":1,"noerr":0,"x":260,"y":20,"wires":[["d4f679ef.4c20e8","5a7c8782.c58018"]],"info":"This node sets up the inputs to the GSheet node.\nThe outputs that make up those inputs are:\n - msg.sheet -the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n - msg.topic - the combination of spreadsheet tab and cell range\n## Note\nThere are 2 very similar booleans evaluated by this node. They are:\n * **OverrideEnvVariables** - This one looks at the environment variable that was set in the flow triggering the subflow\n * **msg.IgnoreEnvVar** - This one is allows the logic to be driven by a message object property and thus can be set at runtime or earlier in the flow based on upstream logic\n\nFirst it checks the boolean value of the **OverrideEnvVariables** environment variable. This is by default false. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming the first was false, it checks the boolean value of the **msg.IgnoreEnvVar** value. This will evaluated as false if not populated, so sending false is unnecessary. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming both are false, then it can build the outputs based on the subflows environment variables. These can either be those set in the calling flow or they may be the default ones built into the subflow.\n\nRegardless of the method used to build the output, the node also removes the input message properties.\n\n\n\nmsg.IgnoreEnvVar"},{"id":"d4f679ef.4c20e8","type":"GSheet","z":"32252d88.e55b52","creds":"adb4e9b8.8beee8","method":"get","action":"","sheet":"","cells":"","name":"Read Input from GSheet","x":610,"y":20,"wires":[["f3abb43f.98f4e8"]],"info":"Use the GSheet node to get the a set of rows from a google spreadsheet.\n\n# **Inputs**\n### **creds**\nThis is the name on the gauth configuration node. How to get the details is beyond the scope of what I am going to put into an individual node instance. Some details are at [node-red-contrib-google-sheets](https://flows.nodered.org/node/node-red-contrib-google-sheets)\n### **Method**\nIn this case using the get cells method to read a set of data.\n### **SpreadsheetID**\nUnused as the spreadsheet ID is passed in as part of the input msg, but if needed it would be the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n### **Cells**\nUnused as the requested cells are passed in as part of the input msg, but if it was being manually built for a static data source the format is made of of 3 parts with specific seperators:\n * **[Sheetname]** like Sheet1\n * **[upper left corner cell address]** like A1\n * **[lower right corner cell address]** like B2\n\nThe format is **[Sheetname]**!**[upper left corner cell address]**:**[lower right corner cell address]** giving an input like **Sheet1!A1:B2**\n "},{"id":"cd9ceb54.45b238","type":"comment","z":"32252d88.e55b52","name":"Error","info":"","x":1090,"y":20,"wires":[]},{"id":"1e96032.0612afd","type":"comment","z":"32252d88.e55b52","name":"Last Populated Row","info":"","x":1130,"y":100,"wires":[]},{"id":"5d994f24.7baba","type":"function","z":"32252d88.e55b52","name":"Prepare Output Parts","func":"/*\n * Row response calculations\n */\nmsg.LastPopulatedRow = msg.payload.length + msg.MinRow - 1\nmsg.FirstEmptyRow = msg.LastPopulatedRow + 1\n\n/*\n *Column response calculation variables\n */\nlet colCount = 1 //number of columns wide from the data retrieved. This will eventually be replace by logic that loops through array find the max width for any given row\nlet index\nlet sheetdata = msg.payload //this is the data that is returned from Google that will then be examined\nlet fCol = msg.ColStart\nlet fColTotal = 0 //to hold the column number\nlet nCol = \"\"   //nCol is new column\nlet lCol = \"\"   //lCol is last column in the range (to be populated from the actual Gsheet calls data)\n\nfCol = fCol.toUpperCase()\n/*\n * validate fCol (done)\n */\nlet validStartCol = false\nvalidStartCol = ((fCol.length == 1) ||\n                ((fCol.substr(0, 1).charCodeAt(0) - 64) < 9) ||\n                (((fCol.substr(0, 1).charCodeAt(0) - 64) == 9) && ((fCol.substr(1, 1).charCodeAt(0) - 64) <= 22)))\n/*\n *Column response calculations\n */\n//look at each row that is an array\nfor (index = 0; index < sheetdata.length; index++)\n{\n    if (Array.isArray(sheetdata[index]))\n    {\n        // when the rows width is greater than any of the previous rows set the column count to the new largest width\n        colCount = Math.max(colCount, sheetdata[index].length)\n    } //if (Array.isArray(sheetdata[index]))\n}  //for (index = 0; index < sheetdata.length; index++)\nswitch (fCol.length) {\n    case 1:\n        fColTotal = (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    case 2:\n        fColTotal = (fCol.substr(1, 1).charCodeAt(0) - 64) + 26 * (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    default:\n        fColTotal = -1\n}\n//Last Populated Column and First Empty Column calculation\nif ((fColTotal <= 25) && (fColTotal >= 1)) {\n    lCol = String.fromCharCode(fColTotal+64)\n    nCol = String.fromCharCode(fColTotal+65)\n} else if (fColTotal == 26) {\n    lCol = \"Z\"\n    nCol = \"AA\"\n} else if (fColTotal >= 27) {\n    lCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 64)\n    nCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 65)\n} else if (fColTotal == -1) {\n    lCol = \"Error\"\n    nCol = \"Error\"\n    //Probably worth putting real error here, but deferred\n} else if (fColTotal == 256) {\n    lCol = \"IV\"\n    nCol = \"None\"\n}\nmsg.LastPopulatedCol = lCol\nmsg.FirstEmptyCol = nCol\nmsg.SpreadsheetArray = msg.payload\nreturn msg;","outputs":1,"noerr":0,"x":560,"y":540,"wires":[["aa6d1a78.1abaa8","19295ae9.4a7b45","2427fd2f.a3a022","77f0a296.84470c","17bd8e89.be33f1","d2a14166.06197"]],"info":"Takes an input from the Gsheet node and calculates a variety of details about the spreadsheet info.\n### **Output**\nmsg.LastPopulatedRow\nmsg.FirstEmptyRow\nmsg.LastPopulatedCol\nmsg.FirstEmptyCol\nmsg.SpreadsheetArray\n"},{"id":"bfb17bc7.c34478","type":"comment","z":"32252d88.e55b52","name":"First Empty Row","info":"","x":1120,"y":180,"wires":[]},{"id":"705c5.5e792a3bc","type":"comment","z":"32252d88.e55b52","name":"Last Populated Column","info":"","x":1140,"y":260,"wires":[]},{"id":"7758f679.9e0a48","type":"comment","z":"32252d88.e55b52","name":"First Empty Column","info":"","x":1130,"y":340,"wires":[]},{"id":"a5ecb477.d27f78","type":"comment","z":"32252d88.e55b52","name":"Spreadsheet Array","info":"","x":1130,"y":420,"wires":[]},{"id":"56fa6509.45a27c","type":"comment","z":"32252d88.e55b52","name":"Full Data","info":"","x":1100,"y":500,"wires":[]},{"id":"c775a468.fea368","type":"comment","z":"32252d88.e55b52","name":"Full Data with Inputs","info":"","x":1130,"y":580,"wires":[]},{"id":"aa6d1a78.1abaa8","type":"change","z":"32252d88.e55b52","name":"Leave Outputs","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":840,"y":540,"wires":[[]],"info":"Deletes a variety of message properties, but leaves all of them that were calculated about the Gsheet nodes results to be returned on the designated subflow output."},{"id":"19295ae9.4a7b45","type":"change","z":"32252d88.e55b52","name":"Leave Last Populated Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":140,"wires":[[]],"info":"Copies msg.theLastPopulatedRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"2427fd2f.a3a022","type":"change","z":"32252d88.e55b52","name":"Leave First Empty Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":220,"wires":[[]],"info":"Copies msg.FirstEmptyRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"77f0a296.84470c","type":"change","z":"32252d88.e55b52","name":"Leave Last Populated Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":300,"wires":[[]],"info":"Copies msg.LastPopulatedCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"17bd8e89.be33f1","type":"change","z":"32252d88.e55b52","name":"Leave First Empty Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":380,"wires":[[]],"info":"Copies msg.FirstEmptyCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"d2a14166.06197","type":"change","z":"32252d88.e55b52","name":"Leave Spreadsheet Array","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"SpreadsheetArray","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":460,"wires":[[]],"info":"Copies msg.SpreadsheetArray into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"49d2751a.53de1c","type":"trigger","z":"32252d88.e55b52","op1":"","op2":"timeout","op1type":"nul","op2type":"str","duration":"10","extend":true,"units":"s","reset":"","bytopic":"all","name":"Watchdog","x":600,"y":140,"wires":[["77f0a296.84470c","19295ae9.4a7b45","17bd8e89.be33f1","d2a14166.06197","aa6d1a78.1abaa8"]],"info":"This trigger node works as a watchdog to see if the request to see if the read of the Google Sheet that was triggered on the other branch is successful. If it is succeful, then it will receive a reset message (msg.reset) from the Reset Watchdog node. If, however, 10 seconds elapse without receiving the reset message, this node sends a timeout message (msg.timeout)."},{"id":"5a7c8782.c58018","type":"change","z":"32252d88.e55b52","name":"","rules":[{"t":"set","p":"timeout","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":420,"y":120,"wires":[["49d2751a.53de1c"]],"info":"Labels what the initial input to the watchdog trigger node is."},{"id":"87591b2a.6867c8","type":"change","z":"32252d88.e55b52","name":"","rules":[{"t":"delete","p":"reset","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":540,"wires":[["5d994f24.7baba"]],"info":"Removes msg.reset that was only intended for the watchdog trigger node."},{"id":"6b34896c.b7c258","type":"catch","z":"32252d88.e55b52","name":"Catch and Relay Errors","scope":null,"uncaught":false,"x":860,"y":60,"wires":[[]],"info":"Passes any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default."},{"id":"f3abb43f.98f4e8","type":"change","z":"32252d88.e55b52","name":"Reset Watchdog","rules":[{"t":"set","p":"reset","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":140,"y":140,"wires":[["49d2751a.53de1c","87591b2a.6867c8"]],"info":"Sends the reset message to the watchdog triger node when there is output from the Gsheet node."},{"id":"9d08adeb.8b976","type":"function","z":"809a2e43.861b6","name":"Determine Source For Gsheet lookup properties.","func":"//Read subflow input variables\nif (env.get(\"OverrideEnvVariables\"))\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse if (msg.IgnoreEnvVar)\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse\n{\n    var ColStart = env.get(\"ColStart\");\n    var ColEnd = env.get(\"ColEnd\");\n    var FirstRow = env.get(\"MinRow\");\n    var LastRow = env.get(\"MaxRow\");\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = env.get(\"Spreadsheet ID\");\n    msg.tab = env.get(\"TabName\");\n    msg.cellstart = ColStart + FirstRow\n    msg.cellend = ColEnd + LastRow\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n    //These 2 are needed later to calculate the last populate and first empty rows and columns\n    msg.ColStart = ColStart\n    msg.MinRow = FirstRow\n}\nreturn msg;","outputs":1,"noerr":0,"x":260,"y":20,"wires":[["6dfd36b5.a00e68","13f6ebeb.275e24"]],"info":"This node sets up the inputs to the GSheet node.\nThe outputs that make up those inputs are:\n - msg.sheet -the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n - msg.topic - the combination of spreadsheet tab and cell range\n## Note\nThere are 2 very similar booleans evaluated by this node. They are:\n * **OverrideEnvVariables** - This one looks at the environment variable that was set in the flow triggering the subflow\n * **msg.IgnoreEnvVar** - This one is allows the logic to be driven by a message object property and thus can be set at runtime or earlier in the flow based on upstream logic\n\nFirst it checks the boolean value of the **OverrideEnvVariables** environment variable. This is by default false. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming the first was false, it checks the boolean value of the **msg.IgnoreEnvVar** value. This will evaluated as false if not populated, so sending false is unnecessary. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming both are false, then it can build the outputs based on the subflows environment variables. These can either be those set in the calling flow or they may be the default ones built into the subflow.\n\nRegardless of the method used to build the output, the node also removes the input message properties.\n\n\n\nmsg.IgnoreEnvVar"},{"id":"6dfd36b5.a00e68","type":"GSheet","z":"809a2e43.861b6","creds":"adb4e9b8.8beee8","method":"get","action":"","sheet":"","cells":"","name":"Read Input from GSheet","x":610,"y":20,"wires":[["6ea04230.b70e1c"]],"info":"Use the GSheet node to get the a set of rows from a google spreadsheet.\n\n# **Inputs**\n### **creds**\nThis is the name on the gauth configuration node. How to get the details is beyond the scope of what I am going to put into an individual node instance. Some details are at [node-red-contrib-google-sheets](https://flows.nodered.org/node/node-red-contrib-google-sheets)\n### **Method**\nIn this case using the get cells method to read a set of data.\n### **SpreadsheetID**\nUnused as the spreadsheet ID is passed in as part of the input msg, but if needed it would be the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n### **Cells**\nUnused as the requested cells are passed in as part of the input msg, but if it was being manually built for a static data source the format is made of of 3 parts with specific seperators:\n * **[Sheetname]** like Sheet1\n * **[upper left corner cell address]** like A1\n * **[lower right corner cell address]** like B2\n\nThe format is **[Sheetname]**!**[upper left corner cell address]**:**[lower right corner cell address]** giving an input like **Sheet1!A1:B2**\n "},{"id":"1ea61fdd.8953a","type":"comment","z":"809a2e43.861b6","name":"Error","info":"","x":1090,"y":20,"wires":[]},{"id":"4895af0.a00af5","type":"comment","z":"809a2e43.861b6","name":"Last Populated Row","info":"","x":1130,"y":100,"wires":[]},{"id":"71231cd6.a786c4","type":"function","z":"809a2e43.861b6","name":"Prepare Output Parts","func":"/*\n * Row response calculations\n */\nmsg.LastPopulatedRow = msg.payload.length + msg.MinRow - 1\nmsg.FirstEmptyRow = msg.LastPopulatedRow + 1\n\n/*\n *Column response calculation variables\n */\nlet colCount = 1 //number of columns wide from the data retrieved. This will eventually be replace by logic that loops through array find the max width for any given row\nlet index\nlet sheetdata = msg.payload //this is the data that is returned from Google that will then be examined\nlet fCol = msg.ColStart\nlet fColTotal = 0 //to hold the column number\nlet nCol = \"\"   //nCol is new column\nlet lCol = \"\"   //lCol is last column in the range (to be populated from the actual Gsheet calls data)\n\nfCol = fCol.toUpperCase()\n/*\n * validate fCol (done)\n */\nlet validStartCol = false\nvalidStartCol = ((fCol.length == 1) ||\n                ((fCol.substr(0, 1).charCodeAt(0) - 64) < 9) ||\n                (((fCol.substr(0, 1).charCodeAt(0) - 64) == 9) && ((fCol.substr(1, 1).charCodeAt(0) - 64) <= 22)))\n/*\n *Column response calculations\n */\n//look at each row that is an array\nfor (index = 0; index < sheetdata.length; index++)\n{\n    if (Array.isArray(sheetdata[index]))\n    {\n        // when the rows width is greater than any of the previous rows set the column count to the new largest width\n        colCount = Math.max(colCount, sheetdata[index].length)\n    } //if (Array.isArray(sheetdata[index]))\n}  //for (index = 0; index < sheetdata.length; index++)\nswitch (fCol.length) {\n    case 1:\n        fColTotal = (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    case 2:\n        fColTotal = (fCol.substr(1, 1).charCodeAt(0) - 64) + 26 * (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    default:\n        fColTotal = -1\n}\n//Last Populated Column and First Empty Column calculation\nif ((fColTotal <= 25) && (fColTotal >= 1)) {\n    lCol = String.fromCharCode(fColTotal+64)\n    nCol = String.fromCharCode(fColTotal+65)\n} else if (fColTotal == 26) {\n    lCol = \"Z\"\n    nCol = \"AA\"\n} else if (fColTotal >= 27) {\n    lCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 64)\n    nCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 65)\n} else if (fColTotal == -1) {\n    lCol = \"Error\"\n    nCol = \"Error\"\n    //Probably worth putting real error here, but deferred\n} else if (fColTotal == 256) {\n    lCol = \"IV\"\n    nCol = \"None\"\n}\nmsg.LastPopulatedCol = lCol\nmsg.FirstEmptyCol = nCol\nmsg.SpreadsheetArray = msg.payload\nreturn msg;","outputs":1,"noerr":0,"x":560,"y":540,"wires":[["115f090d.01a1c7","d8658c5a.0a5ce","8b790e84.fc65e","1efad89c.adecf7","1fc02d15.67a363","f17df7e0.9c87e8"]],"info":"Takes an input from the Gsheet node and calculates a variety of details about the spreadsheet info.\n### **Output**\nmsg.LastPopulatedRow\nmsg.FirstEmptyRow\nmsg.LastPopulatedCol\nmsg.FirstEmptyCol\nmsg.SpreadsheetArray\n"},{"id":"b6267d87.61dc6","type":"comment","z":"809a2e43.861b6","name":"First Empty Row","info":"","x":1120,"y":180,"wires":[]},{"id":"635e6749.536cf8","type":"comment","z":"809a2e43.861b6","name":"Last Populated Column","info":"","x":1140,"y":260,"wires":[]},{"id":"9cc90293.c61cf","type":"comment","z":"809a2e43.861b6","name":"First Empty Column","info":"","x":1130,"y":340,"wires":[]},{"id":"8734a0f1.c040e","type":"comment","z":"809a2e43.861b6","name":"Spreadsheet Array","info":"","x":1130,"y":420,"wires":[]},{"id":"729d5cd3.4f4974","type":"comment","z":"809a2e43.861b6","name":"Full Data","info":"","x":1100,"y":500,"wires":[]},{"id":"e5cb9e20.de65f","type":"comment","z":"809a2e43.861b6","name":"Full Data with Inputs","info":"","x":1130,"y":580,"wires":[]},{"id":"115f090d.01a1c7","type":"change","z":"809a2e43.861b6","name":"Leave Outputs","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":840,"y":540,"wires":[[]],"info":"Deletes a variety of message properties, but leaves all of them that were calculated about the Gsheet nodes results to be returned on the designated subflow output."},{"id":"d8658c5a.0a5ce","type":"change","z":"809a2e43.861b6","name":"Leave Last Populated Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":140,"wires":[[]],"info":"Copies msg.theLastPopulatedRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"8b790e84.fc65e","type":"change","z":"809a2e43.861b6","name":"Leave First Empty Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":220,"wires":[[]],"info":"Copies msg.FirstEmptyRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"1efad89c.adecf7","type":"change","z":"809a2e43.861b6","name":"Leave Last Populated Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":300,"wires":[[]],"info":"Copies msg.LastPopulatedCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"1fc02d15.67a363","type":"change","z":"809a2e43.861b6","name":"Leave First Empty Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":380,"wires":[[]],"info":"Copies msg.FirstEmptyCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"f17df7e0.9c87e8","type":"change","z":"809a2e43.861b6","name":"Leave Spreadsheet Array","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"SpreadsheetArray","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":460,"wires":[[]],"info":"Copies msg.SpreadsheetArray into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"1796c5f3.3f39fa","type":"trigger","z":"809a2e43.861b6","op1":"","op2":"timeout","op1type":"nul","op2type":"str","duration":"10","extend":true,"units":"s","reset":"","bytopic":"all","name":"Watchdog","x":600,"y":140,"wires":[["1efad89c.adecf7","d8658c5a.0a5ce","1fc02d15.67a363","f17df7e0.9c87e8","115f090d.01a1c7"]],"info":"This trigger node works as a watchdog to see if the request to see if the read of the Google Sheet that was triggered on the other branch is successful. If it is succeful, then it will receive a reset message (msg.reset) from the Reset Watchdog node. If, however, 10 seconds elapse without receiving the reset message, this node sends a timeout message (msg.timeout)."},{"id":"13f6ebeb.275e24","type":"change","z":"809a2e43.861b6","name":"","rules":[{"t":"set","p":"timeout","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":420,"y":120,"wires":[["1796c5f3.3f39fa"]],"info":"Labels what the initial input to the watchdog trigger node is."},{"id":"4a7df89c.f12b68","type":"change","z":"809a2e43.861b6","name":"","rules":[{"t":"delete","p":"reset","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":540,"wires":[["71231cd6.a786c4"]],"info":"Removes msg.reset that was only intended for the watchdog trigger node."},{"id":"3ccf56cb.4c037a","type":"catch","z":"809a2e43.861b6","name":"Catch and Relay Errors","scope":null,"uncaught":false,"x":860,"y":60,"wires":[[]],"info":"Passes any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default."},{"id":"6ea04230.b70e1c","type":"change","z":"809a2e43.861b6","name":"Reset Watchdog","rules":[{"t":"set","p":"reset","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":140,"y":140,"wires":[["1796c5f3.3f39fa","4a7df89c.f12b68"]],"info":"Sends the reset message to the watchdog triger node when there is output from the Gsheet node."},{"id":"64e3fe6d.b4a37","type":"function","z":"d078e2a6.ea488","name":"Db Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":389,"wires":[["4ca5af11.b84a7"]],"info":"# **What** #\nThis is a simple function node that stores the msg.payload into a global variable. This is done in a function node, however, because the name of that global variable is passed into the function as a the value of msg.globalsource. \n\n## **Why**\nNormally this would be done in a change node, but change nodes could not as of May 2020 take a msg object component as the name of the global variable to be set."},{"id":"a0c44b55.6f2018","type":"subflow:809a2e43.861b6","z":"d078e2a6.ea488","name":"","env":[],"x":580,"y":189,"wires":[[],[],[],[],[],[],["64e3fe6d.b4a37"],[]],"info":"This subflow shows information in the environment variables. These are good for testing purposes, but it is noteworthy that the override boolean is false. Unless that boolean is changed, they have no impact."},{"id":"4ca5af11.b84a7","type":"function","z":"d078e2a6.ea488","name":"Db Use input to lookup info","func":"//Ref. TMS-000001\n\nif(msg.exportableresults.DeviceName !== \"Switch_Ikea\") {return}\n\n\n\n//1 Get must have items: searchKeys, searchValues, searchResultKeys, cachedSearch, cacheTime\nlet searchKeys = Object.keys(msg.keyvalues)\nlet searchValues = Object.values(msg.keyvalues)\nlet searchResultKeys = Object.keys(msg.searchfor)\nlet cachedSearch = global.get(\"LastSearch\")\nlet cacheTime = new Date().getTime()\n//2 create working variables searchKeyIndices, searchResultKeysIndices, index, cacheKey\nlet searchResultKeysIndices = []\nlet index\nlet cacheObject\n//3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\ncacheObject = BuildCacheObject(searchKeys, searchValues, searchResultKeys)\n//4\n/*\n * 4.1 t/f cached result is usable\n    *  4.1.true then t/f does it meet criteria\n        * 4.1.true.true\ttrue msg.searchfor = cachedSearch.searchfor\n        * 4.1.true.false do the common lookup\n    *   4.1.false  do the common lookup\n    */\n//4.1\nif (cachedSearch !== undefined)\n{\n    //4.1.true\n    if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    {\n        //4.1.true.true\n        msg.searchfor = cachedSearch.searchfor\n        return [msg, null, null]\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    //4.1.true.false\n    else\n    {\n        //4.1.true.false\n        lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n        //return results from the node on 1 of the 3 outputs\n        if (lookupResults[0] !== null)\n        {\n            return [lookupResults[0], null, null]\n        } //if (lookupResults[0] !== null)\n        else if (lookupResults[1] !== null)\n        {\n            return [null, lookupResults[1], null]\n        } //else if (lookupResults[1] !== null)\n        else\n        {\n            return [null, null, lookupResults[2]]\n        } //else if (lookupResults[1] !== null) else\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000)) else\n} //if (cachedSearch !== undefined)\n//4.1.false\nelse\n{\n    //4.1.false\n    lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n    //return results from the node on 1 of the 3 outputs\n    if (lookupResults[0] !== null)\n    {\n        return [lookupResults[0], null, null]\n    } //if (lookupResults[0] !== null)\n    else if (lookupResults[1] !== null)\n    {\n        return [null, lookupResults[1], null]\n    } //else if (lookupResults[1] !== null)\n    else\n    {\n        return [null, null, lookupResults[2]]\n    } //else if (lookupResults[1] !== null) else\n} //if (cachedSearch !== undefined) else\nreturn\n\nfunction BuildCacheObject(searchKeysArray, SearchValuesArray, SearchResultKeysArray) {\n    //3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\n    let newCacheKey =\"\"\n    for (index = 0; index < searchKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + searchKeysArray[index] + SearchValuesArray[index]\n    } //for (index = 0; index < searchKeysArray.length; index++)\n    //add all fields that will be looked for into the cache key\n    for (index = 0; index < SearchResultKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + SearchResultKeysArray[index]\n    } //for (index = 0; index < SearchResultKeysArray.length; index++)\n    //combine the cache key and the cache time into a single object that can be compared with the cached last search\n    let createdCacheObject = \n    {\n        query: newCacheKey,\n        time: cacheTime\n    }\n    return createdCacheObject\n}\nfunction CommonLookup(workingMsg, keysForSearchColumn, keysForResultColumn, valuesSearchedFor, requestedDataTable, passedCacheObject) {\n    let searchKeyIndices = []\n    let searchResultKeysIndices = []\n    let outerIndex\n    let innerLoopCounter\n    let innerIndex\n    let index\n    if (requestedDataTable !== undefined)\n    {\n        // iterate through all search keys.\n        //outer index is the place along the array of search keys\n        for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchKeyIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    //////////////////////////////////////////////////////////////////////////break may be a problem. Maybe swap inner and outer arrays and then do some if then about getting through the whole data headers without finding. Right now it only looks for 1 failure\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    //this is accumulating how many times the search key did not match one of the data table headers\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                                workingMsg.searchErrorCount++\n                        }\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        }\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        }\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        }\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        //if this point is reached, searchKeyIndices has been populated\n        // iterate through all search result keys.\n        //outer index is the place along the array of search keys \n        for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchResultKeysIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                            workingMsg.searchErrorCount++\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        } //if (workingMsg.searchErrorCount > 1)\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        } //if (workingMsg.searchErrorCount > 1) else\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        //if this point is reached, both searchKeyIndices and searchResultKeysIndices have been populated\n        //loop through all search keys, 1 index at a time and filter to a row that has the desired data in the desired column\n        let result = []\n        let pushable\n        pushable = false\n        for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        {\n            for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            {\n                if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                {\n                    pushable = true\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                else\n                {\n                    pushable = false\n                    break\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n            } //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            if (pushable)\n            {\n                result.push(requestedDataTable[outerIndex])\n            } //if (pushable)\n    \n    } //for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        //if this point is reached then there is a filtered table\n        //debugger\n        if (result.length === 0)\n        {\n            workingMsg.error = \"After filtering no data rows were left.\"\n            //either create and populate the error count at 1 or increment it if it already exists\n            if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            {\n                workingMsg.searchErrorCount++\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            else\n            {\n                workingMsg.searchErrorCount = 1\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n            //return the error on the middle there is an error output,\n            //this retry is in case the column was added to the google sheet since it was last loaded into node red\n            if (workingMsg.searchErrorCount > 1)\n            {\n                //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                return [null, null, workingMsg]\n            } //if (workingMsg.searchErrorCount > 1)\n            else\n            {\n                //return the error on the middle there is an error output,\n                return [null, workingMsg, null]\n            } //if (workingMsg.searchErrorCount > 1) else\n        } //if (result.length === 0)\n        else if (result.length > 1)\n        {\n            //do the warning that multiple were found but will take the first\n            node.warn(\"Multiple rows were found that matched the search criteria. Results are from the first row that was found and matched.\")\n        } //else if (result.length > 1)\n        //look up the data\n        for (index = 0; index < searchResultKeysIndices.length; index++)\n        {\n            //workingMsg.searchfor.keysForSearchColumn[index] = result[0][searchResultKeysIndices]\n            // the almost working version\n            workingMsg.searchfor[keysForResultColumn[index]] = result[0][searchResultKeysIndices[index]]\n        } //for (index = 0; index < searchResultKeysIndices.length; index++)\n        //if this point is reached then work workingMsg contains complete info\n        //build and save the LastSearch obect\n        passedCacheObject.searchfor = workingMsg.searchfor\n        global.set(\"LastSearch\", passedCacheObject)\n        return [workingMsg, null, null]\n    } //if (requestedDataTable !== undefined)\n    else\n    {\n        //return on second output to trigger population of global that feeds datatable\n        //put some details on this configuration into the msg to be output\n        workingMsg.error = \"The data normally loaded from google sheet was not loaded.\"\n        //either create and populate the error count at 1 or increment it if it already exists\n        if (workingMsg.hasOwnProperty('searchErrorCount'))\n        {\n            workingMsg.searchErrorCount++\n        } //if (workingMsg.hasOwnProperty('searchErrorCount'))\n        else\n        {\n            workingMsg.searchErrorCount = 1\n        } //if (workingMsg.hasOwnProperty('searchErrorCount')) else\n        //return the error on the middle there is an error output,\n        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n        if (workingMsg.searchErrorCount > 1)\n        {\n            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n            return [null, null, workingMsg]\n        } //if (workingMsg.searchErrorCount > 1)\n        else\n        {\n            //return the error on the middle there is an error output,\n            return [null, workingMsg, null]\n        } //if (workingMsg.searchErrorCount > 1) else\n    } //if (requestedDataTable !== undefined) else\n}","outputs":3,"noerr":0,"x":240,"y":80,"wires":[[],["a0c44b55.6f2018"],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"],"info":"# **Conceptual Explanation**\nThis node is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows.\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the node has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria. Normally it is used to trigger loading the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure."},{"id":"c2e2345d.446a38","type":"change","z":"d078e2a6.ea488","name":"Devices table, 1 search key with variable input, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":980,"y":100,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"1a8cd32a.7b920d","type":"change","z":"d078e2a6.ea488","name":"Devices table, 1 search key, 2 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Motion_Ikea","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":180,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Motion_Ikea\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** and **\"Manufacturer\"** columns."},{"id":"40a32932.5aa1b8","type":"change","z":"d078e2a6.ea488","name":"Devices table, 1 search key, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":60,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"**. Notice unlike some examples this includes a space in the value. This has no negative impact.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column."},{"id":"96422911.d26e68","type":"change","z":"d078e2a6.ea488","name":"Devices table, 2 search keys, 1 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"keyvalues.Manufacturer","pt":"msg","to":"homebridge-people-geofence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":140,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"** and the **\"Manufacturer\"** column for the value **\"homebridge-people-geofence\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** columns."},{"id":"7f2dd6ae.079bd8","type":"comment","z":"d078e2a6.ea488","name":"Examples of preformating the inputs","info":"","x":920,"y":20,"wires":[]},{"id":"df25c86c.b56128","type":"change","z":"d078e2a6.ea488","name":"Spreadsheet Lookup Settings Example","rules":[{"t":"set","p":"IgnoreEnvVar ","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":260,"wires":[[]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"d02aace0.75997","type":"debug","z":"d078e2a6.ea488","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":160,"y":240,"wires":[]},{"id":"d17934c7.820378","type":"string","z":"f14b69ba.8b2da8","name":"Remove zigbee2mqtt/ from the topic","methods":[{"name":"chompLeft","params":[{"type":"str","value":"zigbee2mqtt/"}]}],"prop":"topic","propout":"topic","object":"msg","objectout":"msg","x":950,"y":60,"wires":[["c2f367a9.6e5a38"]]},{"id":"c712febc.b71e3","type":"change","z":"f14b69ba.8b2da8","name":"Add MQTT Master (different per source)","rules":[{"t":"set","p":"MQTTName","pt":"msg","to":"zb2mqtt","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1320,"y":100,"wires":[["15517c22.4c7e64"]]},{"id":"c2f367a9.6e5a38","type":"change","z":"f14b69ba.8b2da8","name":"Put device ID into msg.deviceID and payload into payload.value","rules":[{"t":"set","p":"deviceID","pt":"msg","to":"topic","tot":"msg"},{"t":"set","p":"temp","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"set","p":"payload.value","pt":"msg","to":"temp","tot":"msg"},{"t":"delete","p":"temp","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1390,"y":60,"wires":[["c712febc.b71e3"]]},{"id":"15517c22.4c7e64","type":"function","z":"f14b69ba.8b2da8","name":"Split kv pairs (from value) into 1-n msg stream (ready for testing)","func":"/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value;\n                --msg.payload.value;\n            }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        if (typeof name === 'undefined') \n        {\n            latestMsg.payload.name = key;\n        } \n        else \n        {\n            latestMsg.payload.name = name + \"/\" + key;\n        }\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n//Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \"/\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":1390,"y":140,"wires":[["2d0789f6.1eebc6"]]},{"id":"2d0789f6.1eebc6","type":"change","z":"f14b69ba.8b2da8","name":"","rules":[{"t":"delete","p":"qos","pt":"msg"},{"t":"delete","p":"retain","pt":"msg"},{"t":"delete","p":"payload.dataType","pt":"msg"},{"t":"delete","p":"deviceID","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"MQTTName","tot":"msg"},{"t":"delete","p":"MQTTName","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"topic","tot":"msg"},{"t":"delete","p":"topic","pt":"msg"},{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"payload.value","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1240,"y":180,"wires":[["f07d3b90.672788"]]},{"id":"f07d3b90.672788","type":"link out","z":"f14b69ba.8b2da8","name":"Get DeviceID","links":["2163d00a.19ea2"],"x":1430,"y":180,"wires":[],"l":true},{"id":"2d499f0.10a2b62","type":"function","z":"88b1bb66.b78488","name":"Determine Source For Gsheet lookup properties.","func":"//Read subflow input variables\nif (env.get(\"OverrideEnvVariables\"))\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse if (msg.IgnoreEnvVar)\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse\n{\n    var ColStart = env.get(\"ColStart\");\n    var ColEnd = env.get(\"ColEnd\");\n    var FirstRow = env.get(\"MinRow\");\n    var LastRow = env.get(\"MaxRow\");\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = env.get(\"Spreadsheet ID\");\n    msg.tab = env.get(\"TabName\");\n    msg.cellstart = ColStart + FirstRow\n    msg.cellend = ColEnd + LastRow\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n    //These 2 are needed later to calculate the last populate and first empty rows and columns\n    msg.ColStart = ColStart\n    msg.MinRow = FirstRow\n}\nreturn msg;","outputs":1,"noerr":0,"x":260,"y":20,"wires":[["cff1ac49.1501e","d6abc01d.b16b7"]],"info":"This node sets up the inputs to the GSheet node.\nThe outputs that make up those inputs are:\n - msg.sheet -the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n - msg.topic - the combination of spreadsheet tab and cell range\n## Note\nThere are 2 very similar booleans evaluated by this node. They are:\n * **OverrideEnvVariables** - This one looks at the environment variable that was set in the flow triggering the subflow\n * **msg.IgnoreEnvVar** - This one is allows the logic to be driven by a message object property and thus can be set at runtime or earlier in the flow based on upstream logic\n\nFirst it checks the boolean value of the **OverrideEnvVariables** environment variable. This is by default false. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming the first was false, it checks the boolean value of the **msg.IgnoreEnvVar** value. This will evaluated as false if not populated, so sending false is unnecessary. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming both are false, then it can build the outputs based on the subflows environment variables. These can either be those set in the calling flow or they may be the default ones built into the subflow.\n\nRegardless of the method used to build the output, the node also removes the input message properties.\n\n\n\nmsg.IgnoreEnvVar"},{"id":"cff1ac49.1501e","type":"GSheet","z":"88b1bb66.b78488","creds":"adb4e9b8.8beee8","method":"get","action":"","sheet":"","cells":"","name":"Read Input from GSheet","x":610,"y":20,"wires":[["94c0f236.ee459"]],"info":"Use the GSheet node to get the a set of rows from a google spreadsheet.\n\n# **Inputs**\n### **creds**\nThis is the name on the gauth configuration node. How to get the details is beyond the scope of what I am going to put into an individual node instance. Some details are at [node-red-contrib-google-sheets](https://flows.nodered.org/node/node-red-contrib-google-sheets)\n### **Method**\nIn this case using the get cells method to read a set of data.\n### **SpreadsheetID**\nUnused as the spreadsheet ID is passed in as part of the input msg, but if needed it would be the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n### **Cells**\nUnused as the requested cells are passed in as part of the input msg, but if it was being manually built for a static data source the format is made of of 3 parts with specific seperators:\n * **[Sheetname]** like Sheet1\n * **[upper left corner cell address]** like A1\n * **[lower right corner cell address]** like B2\n\nThe format is **[Sheetname]**!**[upper left corner cell address]**:**[lower right corner cell address]** giving an input like **Sheet1!A1:B2**\n "},{"id":"6fa0e545.9bcb9c","type":"comment","z":"88b1bb66.b78488","name":"Error","info":"","x":1090,"y":20,"wires":[]},{"id":"7c5285b8.8ae67c","type":"comment","z":"88b1bb66.b78488","name":"Last Populated Row","info":"","x":1130,"y":100,"wires":[]},{"id":"c2f995a2.54ffd8","type":"function","z":"88b1bb66.b78488","name":"Prepare Output Parts","func":"/*\n * Row response calculations\n */\nmsg.LastPopulatedRow = msg.payload.length + msg.MinRow - 1\nmsg.FirstEmptyRow = msg.LastPopulatedRow + 1\n\n/*\n *Column response calculation variables\n */\nlet colCount = 1 //number of columns wide from the data retrieved. This will eventually be replace by logic that loops through array find the max width for any given row\nlet index\nlet sheetdata = msg.payload //this is the data that is returned from Google that will then be examined\nlet fCol = msg.ColStart\nlet fColTotal = 0 //to hold the column number\nlet nCol = \"\"   //nCol is new column\nlet lCol = \"\"   //lCol is last column in the range (to be populated from the actual Gsheet calls data)\n\nfCol = fCol.toUpperCase()\n/*\n * validate fCol (done)\n */\nlet validStartCol = false\nvalidStartCol = ((fCol.length == 1) ||\n                ((fCol.substr(0, 1).charCodeAt(0) - 64) < 9) ||\n                (((fCol.substr(0, 1).charCodeAt(0) - 64) == 9) && ((fCol.substr(1, 1).charCodeAt(0) - 64) <= 22)))\n/*\n *Column response calculations\n */\n//look at each row that is an array\nfor (index = 0; index < sheetdata.length; index++)\n{\n    if (Array.isArray(sheetdata[index]))\n    {\n        // when the rows width is greater than any of the previous rows set the column count to the new largest width\n        colCount = Math.max(colCount, sheetdata[index].length)\n    } //if (Array.isArray(sheetdata[index]))\n}  //for (index = 0; index < sheetdata.length; index++)\nswitch (fCol.length) {\n    case 1:\n        fColTotal = (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    case 2:\n        fColTotal = (fCol.substr(1, 1).charCodeAt(0) - 64) + 26 * (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    default:\n        fColTotal = -1\n}\n//Last Populated Column and First Empty Column calculation\nif ((fColTotal <= 25) && (fColTotal >= 1)) {\n    lCol = String.fromCharCode(fColTotal+64)\n    nCol = String.fromCharCode(fColTotal+65)\n} else if (fColTotal == 26) {\n    lCol = \"Z\"\n    nCol = \"AA\"\n} else if (fColTotal >= 27) {\n    lCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 64)\n    nCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 65)\n} else if (fColTotal == -1) {\n    lCol = \"Error\"\n    nCol = \"Error\"\n    //Probably worth putting real error here, but deferred\n} else if (fColTotal == 256) {\n    lCol = \"IV\"\n    nCol = \"None\"\n}\nmsg.LastPopulatedCol = lCol\nmsg.FirstEmptyCol = nCol\nmsg.SpreadsheetArray = msg.payload\nreturn msg;","outputs":1,"noerr":0,"x":560,"y":540,"wires":[["d1e7b582.91d168","c7139127.7efa8","e336bdeb.a1ed4","ddb445f3.4541d8","89a29d6e.b7516","dc118d10.32edb"]],"info":"Takes an input from the Gsheet node and calculates a variety of details about the spreadsheet info.\n### **Output**\nmsg.LastPopulatedRow\nmsg.FirstEmptyRow\nmsg.LastPopulatedCol\nmsg.FirstEmptyCol\nmsg.SpreadsheetArray\n"},{"id":"a5f60237.14a49","type":"comment","z":"88b1bb66.b78488","name":"First Empty Row","info":"","x":1120,"y":180,"wires":[]},{"id":"e17e9b0d.00ffc8","type":"comment","z":"88b1bb66.b78488","name":"Last Populated Column","info":"","x":1140,"y":260,"wires":[]},{"id":"2ba9ee87.e6a7f2","type":"comment","z":"88b1bb66.b78488","name":"First Empty Column","info":"","x":1130,"y":340,"wires":[]},{"id":"f0bb356b.465258","type":"comment","z":"88b1bb66.b78488","name":"Spreadsheet Array","info":"","x":1130,"y":420,"wires":[]},{"id":"9581689d.923c18","type":"comment","z":"88b1bb66.b78488","name":"Full Data","info":"","x":1100,"y":500,"wires":[]},{"id":"855709c1.557608","type":"comment","z":"88b1bb66.b78488","name":"Full Data with Inputs","info":"","x":1130,"y":580,"wires":[]},{"id":"d1e7b582.91d168","type":"change","z":"88b1bb66.b78488","name":"Leave Outputs","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":840,"y":540,"wires":[[]],"info":"Deletes a variety of message properties, but leaves all of them that were calculated about the Gsheet nodes results to be returned on the designated subflow output."},{"id":"c7139127.7efa8","type":"change","z":"88b1bb66.b78488","name":"Leave Last Populated Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":140,"wires":[[]],"info":"Copies msg.theLastPopulatedRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"e336bdeb.a1ed4","type":"change","z":"88b1bb66.b78488","name":"Leave First Empty Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":220,"wires":[[]],"info":"Copies msg.FirstEmptyRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"ddb445f3.4541d8","type":"change","z":"88b1bb66.b78488","name":"Leave Last Populated Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":300,"wires":[[]],"info":"Copies msg.LastPopulatedCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"89a29d6e.b7516","type":"change","z":"88b1bb66.b78488","name":"Leave First Empty Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":380,"wires":[[]],"info":"Copies msg.FirstEmptyCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"dc118d10.32edb","type":"change","z":"88b1bb66.b78488","name":"Leave Spreadsheet Array","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"SpreadsheetArray","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":460,"wires":[[]],"info":"Copies msg.SpreadsheetArray into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"47e2aa4.95a2354","type":"trigger","z":"88b1bb66.b78488","op1":"","op2":"timeout","op1type":"nul","op2type":"str","duration":"10","extend":true,"units":"s","reset":"","bytopic":"all","name":"Watchdog","x":600,"y":140,"wires":[["ddb445f3.4541d8","c7139127.7efa8","89a29d6e.b7516","dc118d10.32edb","d1e7b582.91d168"]],"info":"This trigger node works as a watchdog to see if the request to see if the read of the Google Sheet that was triggered on the other branch is successful. If it is succeful, then it will receive a reset message (msg.reset) from the Reset Watchdog node. If, however, 10 seconds elapse without receiving the reset message, this node sends a timeout message (msg.timeout)."},{"id":"d6abc01d.b16b7","type":"change","z":"88b1bb66.b78488","name":"","rules":[{"t":"set","p":"timeout","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":420,"y":120,"wires":[["47e2aa4.95a2354"]],"info":"Labels what the initial input to the watchdog trigger node is."},{"id":"d9429817.54f548","type":"change","z":"88b1bb66.b78488","name":"","rules":[{"t":"delete","p":"reset","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":540,"wires":[["c2f995a2.54ffd8"]],"info":"Removes msg.reset that was only intended for the watchdog trigger node."},{"id":"56c3aeb2.ff1f4","type":"catch","z":"88b1bb66.b78488","name":"Catch and Relay Errors","scope":null,"uncaught":false,"x":860,"y":60,"wires":[[]],"info":"Passes any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default."},{"id":"94c0f236.ee459","type":"change","z":"88b1bb66.b78488","name":"Reset Watchdog","rules":[{"t":"set","p":"reset","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":140,"y":140,"wires":[["47e2aa4.95a2354","d9429817.54f548"]],"info":"Sends the reset message to the watchdog triger node when there is output from the Gsheet node."},{"id":"202839c5.35e086","type":"function","z":"2a6ce360.19688c","name":"Db Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":389,"wires":[["e81b20c8.9dbf5"]],"info":"# **What** #\nThis is a simple function node that stores the msg.payload into a global variable. This is done in a function node, however, because the name of that global variable is passed into the function as a the value of msg.globalsource. \n\n## **Why**\nNormally this would be done in a change node, but change nodes could not as of May 2020 take a msg object component as the name of the global variable to be set."},{"id":"ac71b231.85d5c","type":"subflow:88b1bb66.b78488","z":"2a6ce360.19688c","name":"","env":[],"x":580,"y":189,"wires":[[],[],[],[],[],[],["202839c5.35e086"],[]],"info":"This subflow shows information in the environment variables. These are good for testing purposes, but it is noteworthy that the override boolean is false. Unless that boolean is changed, they have no impact."},{"id":"e81b20c8.9dbf5","type":"function","z":"2a6ce360.19688c","name":"Db Use input to lookup info","func":"//Ref. TMS-000001\n\n//if(msg.exportableresults.DeviceName !== \"Switch_Ikea\") {return}\n\n\n\n//1 Get must have items: searchKeys, searchValues, searchResultKeys, cachedSearch, cacheTime\nlet searchKeys = Object.keys(msg.keyvalues)\nlet searchValues = Object.values(msg.keyvalues)\nlet searchResultKeys = Object.keys(msg.searchfor)\nlet cachedSearch = global.get(\"LastSearch\")\nlet cacheTime = new Date().getTime()\n//2 create working variables searchKeyIndices, searchResultKeysIndices, index, cacheKey\nlet searchResultKeysIndices = []\nlet index\nlet cacheObject\n//3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\ncacheObject = BuildCacheObject(searchKeys, searchValues, searchResultKeys)\n//4\n/*\n * 4.1 t/f cached result is usable\n    *  4.1.true then t/f does it meet criteria\n        * 4.1.true.true\ttrue msg.searchfor = cachedSearch.searchfor\n        * 4.1.true.false do the common lookup\n    *   4.1.false  do the common lookup\n    */\n//4.1\nif (cachedSearch !== undefined)\n{\n    //4.1.true\n    if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    {\n        //4.1.true.true\n        msg.searchfor = cachedSearch.searchfor\n        return [msg, null, null]\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    //4.1.true.false\n    else\n    {\n        //4.1.true.false\n        lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n        //return results from the node on 1 of the 3 outputs\n        if (lookupResults[0] !== null)\n        {\n            return [lookupResults[0], null, null]\n        } //if (lookupResults[0] !== null)\n        else if (lookupResults[1] !== null)\n        {\n            return [null, lookupResults[1], null]\n        } //else if (lookupResults[1] !== null)\n        else\n        {\n            return [null, null, lookupResults[2]]\n        } //else if (lookupResults[1] !== null) else\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000)) else\n} //if (cachedSearch !== undefined)\n//4.1.false\nelse\n{\n    //4.1.false\n    lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n    //return results from the node on 1 of the 3 outputs\n    if (lookupResults[0] !== null)\n    {\n        return [lookupResults[0], null, null]\n    } //if (lookupResults[0] !== null)\n    else if (lookupResults[1] !== null)\n    {\n        return [null, lookupResults[1], null]\n    } //else if (lookupResults[1] !== null)\n    else\n    {\n        return [null, null, lookupResults[2]]\n    } //else if (lookupResults[1] !== null) else\n} //if (cachedSearch !== undefined) else\nreturn\n\nfunction BuildCacheObject(searchKeysArray, SearchValuesArray, SearchResultKeysArray) {\n    //3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\n    let newCacheKey =\"\"\n    for (index = 0; index < searchKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + searchKeysArray[index] + SearchValuesArray[index]\n    } //for (index = 0; index < searchKeysArray.length; index++)\n    //add all fields that will be looked for into the cache key\n    for (index = 0; index < SearchResultKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + SearchResultKeysArray[index]\n    } //for (index = 0; index < SearchResultKeysArray.length; index++)\n    //combine the cache key and the cache time into a single object that can be compared with the cached last search\n    let createdCacheObject = \n    {\n        query: newCacheKey,\n        time: cacheTime\n    }\n    return createdCacheObject\n}\nfunction CommonLookup(workingMsg, keysForSearchColumn, keysForResultColumn, valuesSearchedFor, requestedDataTable, passedCacheObject) {\n    let searchKeyIndices = []\n    let searchResultKeysIndices = []\n    let outerIndex\n    let innerLoopCounter\n    let innerIndex\n    let index\n    if (requestedDataTable !== undefined)\n    {\n        // iterate through all search keys.\n        //outer index is the place along the array of search keys\n        for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchKeyIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    //////////////////////////////////////////////////////////////////////////break may be a problem. Maybe swap inner and outer arrays and then do some if then about getting through the whole data headers without finding. Right now it only looks for 1 failure\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    //this is accumulating how many times the search key did not match one of the data table headers\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                                workingMsg.searchErrorCount++\n                        }\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        }\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        }\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        }\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        //if this point is reached, searchKeyIndices has been populated\n        // iterate through all search result keys.\n        //outer index is the place along the array of search keys \n        for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchResultKeysIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                            workingMsg.searchErrorCount++\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        } //if (workingMsg.searchErrorCount > 1)\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        } //if (workingMsg.searchErrorCount > 1) else\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        //if this point is reached, both searchKeyIndices and searchResultKeysIndices have been populated\n        //loop through all search keys, 1 index at a time and filter to a row that has the desired data in the desired column\n        let result = []\n        let pushable\n        pushable = false\n        for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        {\n            for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            {\n                if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                {\n                    pushable = true\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                else\n                {\n                    pushable = false\n                    break\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n            } //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            if (pushable)\n            {\n                result.push(requestedDataTable[outerIndex])\n            } //if (pushable)\n    \n    } //for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        //if this point is reached then there is a filtered table\n        //debugger\n        if (result.length === 0)\n        {\n            workingMsg.error = \"After filtering no data rows were left.\"\n            //either create and populate the error count at 1 or increment it if it already exists\n            if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            {\n                workingMsg.searchErrorCount++\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            else\n            {\n                workingMsg.searchErrorCount = 1\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n            //return the error on the middle there is an error output,\n            //this retry is in case the column was added to the google sheet since it was last loaded into node red\n            if (workingMsg.searchErrorCount > 1)\n            {\n                //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                return [null, null, workingMsg]\n            } //if (workingMsg.searchErrorCount > 1)\n            else\n            {\n                //return the error on the middle there is an error output,\n                return [null, workingMsg, null]\n            } //if (workingMsg.searchErrorCount > 1) else\n        } //if (result.length === 0)\n        else if (result.length > 1)\n        {\n            //do the warning that multiple were found but will take the first\n            node.warn(\"Multiple rows were found that matched the search criteria. Results are from the first row that was found and matched.\")\n        } //else if (result.length > 1)\n        //look up the data\n        for (index = 0; index < searchResultKeysIndices.length; index++)\n        {\n            //workingMsg.searchfor.keysForSearchColumn[index] = result[0][searchResultKeysIndices]\n            // the almost working version\n            workingMsg.searchfor[keysForResultColumn[index]] = result[0][searchResultKeysIndices[index]]\n        } //for (index = 0; index < searchResultKeysIndices.length; index++)\n        //if this point is reached then work workingMsg contains complete info\n        //build and save the LastSearch obect\n        passedCacheObject.searchfor = workingMsg.searchfor\n        global.set(\"LastSearch\", passedCacheObject)\n        return [workingMsg, null, null]\n    } //if (requestedDataTable !== undefined)\n    else\n    {\n        //return on second output to trigger population of global that feeds datatable\n        //put some details on this configuration into the msg to be output\n        workingMsg.error = \"The data normally loaded from google sheet was not loaded.\"\n        //either create and populate the error count at 1 or increment it if it already exists\n        if (workingMsg.hasOwnProperty('searchErrorCount'))\n        {\n            workingMsg.searchErrorCount++\n        } //if (workingMsg.hasOwnProperty('searchErrorCount'))\n        else\n        {\n            workingMsg.searchErrorCount = 1\n        } //if (workingMsg.hasOwnProperty('searchErrorCount')) else\n        //return the error on the middle there is an error output,\n        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n        if (workingMsg.searchErrorCount > 1)\n        {\n            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n            return [null, null, workingMsg]\n        } //if (workingMsg.searchErrorCount > 1)\n        else\n        {\n            //return the error on the middle there is an error output,\n            return [null, workingMsg, null]\n        } //if (workingMsg.searchErrorCount > 1) else\n    } //if (requestedDataTable !== undefined) else\n}","outputs":3,"noerr":0,"x":240,"y":80,"wires":[[],["ac71b231.85d5c"],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"],"info":"# **Conceptual Explanation**\nThis node is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows.\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the node has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria. Normally it is used to trigger loading the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure."},{"id":"ac6ce7d0.604158","type":"change","z":"2a6ce360.19688c","name":"Devices table, 1 search key with variable input, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":980,"y":100,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"bf2101f6.eea8f","type":"change","z":"2a6ce360.19688c","name":"Devices table, 1 search key, 2 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Motion_Ikea","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":180,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Motion_Ikea\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** and **\"Manufacturer\"** columns."},{"id":"c42217af.1bcde8","type":"change","z":"2a6ce360.19688c","name":"Devices table, 1 search key, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":60,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"**. Notice unlike some examples this includes a space in the value. This has no negative impact.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column."},{"id":"97b64fd9.d3121","type":"change","z":"2a6ce360.19688c","name":"Devices table, 2 search keys, 1 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"keyvalues.Manufacturer","pt":"msg","to":"homebridge-people-geofence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":140,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"** and the **\"Manufacturer\"** column for the value **\"homebridge-people-geofence\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** columns."},{"id":"765c424c.1a0b5c","type":"comment","z":"2a6ce360.19688c","name":"Examples of preformating the inputs","info":"","x":920,"y":20,"wires":[]},{"id":"c3207c45.d0e1f","type":"change","z":"2a6ce360.19688c","name":"Spreadsheet Lookup Settings Example","rules":[{"t":"set","p":"IgnoreEnvVar ","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":260,"wires":[[]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"5886f9dc.9cb3b8","type":"debug","z":"2a6ce360.19688c","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":160,"y":240,"wires":[]},{"id":"7d789dce.3f3284","type":"comment","z":"2a6ce360.19688c","name":"Maybe insert check of how long since last Google read and skip step","info":"","x":520,"y":140,"wires":[]},{"id":"2163d00a.19ea2","type":"link in","z":"f14b69ba.8b2da8","name":"Get DeviceID (Homekit, z2m)","links":["f07d3b90.672788"],"x":120,"y":380,"wires":[["38e7b14f.715b3e"]],"l":true},{"id":"25261af3.55cc46","type":"link in","z":"f14b69ba.8b2da8","name":"Got DeviceID","links":["68f00dd3.a8c354"],"x":150,"y":440,"wires":[["29527785.4a75a8"]],"l":true},{"id":"389fa07a.7c31b","type":"change","z":"f14b69ba.8b2da8","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"set","p":"exportableresults.DeviceID","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1140,"y":360,"wires":[["2eb01e52.6b4c82"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"dde18780.d28628","type":"subflow:2a6ce360.19688c","z":"f14b69ba.8b2da8","name":"","env":[],"x":881,"y":380,"wires":[["389fa07a.7c31b","df201aab.b37668"],["df201aab.b37668"],["df201aab.b37668"]]},{"id":"b77e22a4.49718","type":"inject","z":"f14b69ba.8b2da8","name":"Delete Devices for Testing","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":190,"y":320,"wires":[["b102c1b7.89a12"]]},{"id":"b102c1b7.89a12","type":"change","z":"f14b69ba.8b2da8","name":"","rules":[{"t":"delete","p":"Devices","pt":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":460,"y":320,"wires":[[]]},{"id":"2eb01e52.6b4c82","type":"function","z":"f14b69ba.8b2da8","name":"Move Data from searchfor to exportableresults","func":"//debugger\nlet foundKeys = Object.keys(msg.searchfor)\nlet foundValues = Object.values(msg.searchfor)\n//loop through all keys and a\nfor (index = 0; index < foundKeys.length; index++)\n{\n    if(foundValues[index]!== \"\")\n    {\n    msg.exportableresults[foundKeys[index]] = foundValues[index]\n    }\n}\ndelete msg.searchfor\nreturn msg","outputs":1,"noerr":0,"x":1460,"y":360,"wires":[["68f00dd3.a8c354","9c72d332.eaa6c"]],"info":"This node moves each property under the msg.searchfor property to the msg.exportableresults property."},{"id":"38e7b14f.715b3e","type":"change","z":"f14b69ba.8b2da8","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":391,"y":380,"wires":[["d1e7c38f.8ee7a"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"d1e7c38f.8ee7a","type":"change","z":"f14b69ba.8b2da8","name":"Devices Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Floor","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Location","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Room","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.DeviceType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.AccessProtocol","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.PhysicalVirtualType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.House","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.MQTTDeviceTopic","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Hub","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":651,"y":380,"wires":[["dde18780.d28628","c2409854.f39c18"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"3a8c25a7.ddbb7a","type":"link in","z":"f14b69ba.8b2da8","name":"Get Measurement Name Update (All 3)","links":["29527785.4a75a8"],"x":190,"y":480,"wires":[["8f1f43f6.1adb9"]],"l":true},{"id":"29527785.4a75a8","type":"link out","z":"f14b69ba.8b2da8","name":"Get Measurement Name Update","links":["3a8c25a7.ddbb7a"],"x":550,"y":440,"wires":[],"l":true},{"id":"a82ae378.41468","type":"link in","z":"f14b69ba.8b2da8","name":"Got Measurement Name Update","links":["2ab7224c.ed015e"],"x":210,"y":520,"wires":[["58bc8ff3.b42fe"]],"l":true},{"id":"68f00dd3.a8c354","type":"link out","z":"f14b69ba.8b2da8","name":"Got Device ID","links":["25261af3.55cc46"],"x":1760,"y":360,"wires":[],"l":true},{"id":"87d75a8e.93d158","type":"comment","z":"f14b69ba.8b2da8","name":"DeviceID lookup is needed for MQTT (and Homebridge?), but not Hubitat devices","info":"","x":360,"y":280,"wires":[]},{"id":"283ffd8f.097ac2","type":"change","z":"f14b69ba.8b2da8","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1360,"y":420,"wires":[["8b8d8b11.23ec48"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"5df479e4.db1db8","type":"subflow:2a6ce360.19688c","z":"f14b69ba.8b2da8","name":"","env":[],"x":1080,"y":480,"wires":[["283ffd8f.097ac2"],["b379ff4a.96f98"],["84eb4558.3c11b8","faaec494.aaa018"]]},{"id":"8f1f43f6.1adb9","type":"change","z":"f14b69ba.8b2da8","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"E","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"100","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":490,"y":480,"wires":[["8a2e1eb2.006dc"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"8a2e1eb2.006dc","type":"change","z":"f14b69ba.8b2da8","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"keyvalues.SourceDevice","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.ChangeNameTo","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":800,"y":480,"wires":[["5df479e4.db1db8"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"9c72d332.eaa6c","type":"debug","z":"f14b69ba.8b2da8","name":"1 DevID Lookup Success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1790,"y":320,"wires":[]},{"id":"b379ff4a.96f98","type":"debug","z":"f14b69ba.8b2da8","name":"flow 2 temp no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1330,"y":460,"wires":[]},{"id":"84eb4558.3c11b8","type":"debug","z":"f14b69ba.8b2da8","name":"flow 2 perm no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1330,"y":540,"wires":[]},{"id":"87317361.c073b","type":"debug","z":"f14b69ba.8b2da8","name":"2 rename lookup success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2090,"y":420,"wires":[]},{"id":"8b8d8b11.23ec48","type":"function","z":"f14b69ba.8b2da8","name":"Move Name Change from searchfor to exportableresults","func":"msg.exportableresults.Measure = msg.searchfor.ChangeNameTo\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":1710,"y":420,"wires":[["87317361.c073b","2ab7224c.ed015e"]]},{"id":"2ab7224c.ed015e","type":"link out","z":"f14b69ba.8b2da8","name":"Got Measurement Name Update","links":["a82ae378.41468"],"x":2110,"y":500,"wires":[],"l":true},{"id":"58bc8ff3.b42fe","type":"link out","z":"f14b69ba.8b2da8","name":"Get Potential Translation Update","links":["78034414.999e2c"],"x":550,"y":520,"wires":[],"l":true},{"id":"78034414.999e2c","type":"link in","z":"f14b69ba.8b2da8","name":"Get Potential Translation Update (Homebridge Only)","links":["58bc8ff3.b42fe"],"x":210,"y":600,"wires":[["65bde5e7.3658fc"]],"l":true},{"id":"2cca7c19.be84f4","type":"link in","z":"f14b69ba.8b2da8","name":"Got Potential Translation Update","links":["4fb57237.a90b2c","4391ddc7.30a294","edc2ac7a.b3006","22aae31a.d0e07c","719d677e.7901d8"],"x":210,"y":760,"wires":[["33a8efe8.1fc5c"]],"l":true},{"id":"4fb57237.a90b2c","type":"link out","z":"f14b69ba.8b2da8","name":"Got Potential Translation Update","links":["2cca7c19.be84f4"],"x":2950,"y":520,"wires":[],"l":true},{"id":"38d336b8.1f3f2a","type":"function","z":"f14b69ba.8b2da8","name":"Move Name Change from searchfor to exportableresults","func":"msg.TranslationType = msg.searchfor.TranslationType\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":1810,"y":580,"wires":[["94cdf9f3.672d38"]]},{"id":"a7767fa0.788ab","type":"change","z":"f14b69ba.8b2da8","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1460,"y":580,"wires":[["38d336b8.1f3f2a"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"43b27bb8.eb4824","type":"subflow:2a6ce360.19688c","z":"f14b69ba.8b2da8","name":"","env":[],"x":1200,"y":600,"wires":[["a7767fa0.788ab"],[],["13c3ab1a.8dc805"]]},{"id":"d541de63.360e3","type":"change","z":"f14b69ba.8b2da8","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.TranslationType","pt":"msg","to":"","tot":"str"},{"t":"delete","p":"searchErrorCount","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":920,"y":600,"wires":[["43b27bb8.eb4824"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"65bde5e7.3658fc","type":"change","z":"f14b69ba.8b2da8","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"C","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"100","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":610,"y":600,"wires":[["d541de63.360e3"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"faaec494.aaa018","type":"change","z":"f14b69ba.8b2da8","name":"Remove Excess Properties when No Name Change Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1460,"y":500,"wires":[["2ab7224c.ed015e"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"13c3ab1a.8dc805","type":"change","z":"f14b69ba.8b2da8","name":"Remove Excess Properties when No Name Change Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1560,"y":620,"wires":[["719d677e.7901d8"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"7d098329.4c269c","type":"switch","z":"f14b69ba.8b2da8","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":2720,"y":460,"wires":[["78e1a02c.de9d2"],["9ecd4936.ac0468"]],"outputLabels":["True","False"]},{"id":"78e1a02c.de9d2","type":"change","z":"f14b69ba.8b2da8","name":"Value True","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":2890,"y":440,"wires":[["4391ddc7.30a294"]]},{"id":"9ecd4936.ac0468","type":"change","z":"f14b69ba.8b2da8","name":"Value False","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"false","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":2890,"y":480,"wires":[["4391ddc7.30a294"]]},{"id":"491f4073.1aa5c","type":"change","z":"f14b69ba.8b2da8","name":"CtoF Translate","rules":[{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"msg.name&\"F\"\t","tot":"jsonata"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"payload*9/5+32","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":2720,"y":520,"wires":[["4fb57237.a90b2c"]]},{"id":"363318cb.159428","type":"switch","z":"f14b69ba.8b2da8","name":"CurrentHeatingCoolingState Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"},{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":2790,"y":620,"wires":[["8361cdf9.17f3e"],["616211a8.ffda1"],["16a789ea.31a1b6"],["a9d801bc.916c3"]],"outputLabels":["off","heat","cool","heat-cool"]},{"id":"8361cdf9.17f3e","type":"change","z":"f14b69ba.8b2da8","name":"Value Off","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"off","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3040,"y":560,"wires":[["edc2ac7a.b3006"]]},{"id":"616211a8.ffda1","type":"change","z":"f14b69ba.8b2da8","name":"Value Heat","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3050,"y":600,"wires":[["edc2ac7a.b3006"]]},{"id":"16a789ea.31a1b6","type":"change","z":"f14b69ba.8b2da8","name":"Value Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3050,"y":640,"wires":[["edc2ac7a.b3006"]]},{"id":"a9d801bc.916c3","type":"change","z":"f14b69ba.8b2da8","name":"Value Heat-Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat-cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":3060,"y":680,"wires":[["edc2ac7a.b3006"]]},{"id":"43da177.80afbe8","type":"switch","z":"f14b69ba.8b2da8","name":"","property":"TranslationType","propertyType":"msg","rules":[{"t":"eq","v":"10TF","vt":"str"},{"t":"eq","v":"C2F","vt":"str"},{"t":"eq","v":"NestThMap","vt":"str"},{"t":"eq","v":"012CF","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":2510,"y":560,"wires":[["7d098329.4c269c"],["491f4073.1aa5c"],["363318cb.159428"],["d953d8e9.9309c8"]],"outputLabels":["1 or 0 to True or False Map","Celcius to Fahrenheit Conversion","Nest Thermostat Map","Celcius or Fahrenheit Map"]},{"id":"d953d8e9.9309c8","type":"switch","z":"f14b69ba.8b2da8","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":2720,"y":740,"wires":[["397cf3c8.ec4cac"],["54ccc16a.7267e"]],"outputLabels":["True","False"]},{"id":"397cf3c8.ec4cac","type":"change","z":"f14b69ba.8b2da8","name":"Value Fahrenheit","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Fahrenheit","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2910,"y":720,"wires":[["22aae31a.d0e07c"]]},{"id":"54ccc16a.7267e","type":"change","z":"f14b69ba.8b2da8","name":"Value Celcius","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Celcius","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2900,"y":760,"wires":[["22aae31a.d0e07c"]]},{"id":"94cdf9f3.672d38","type":"switch","z":"f14b69ba.8b2da8","name":"Translation Needed?","property":"TranslationType","propertyType":"msg","rules":[{"t":"nnull"},{"t":"null"}],"checkall":"false","repair":false,"outputs":2,"x":2140,"y":580,"wires":[["43da177.80afbe8"],["719d677e.7901d8"]]},{"id":"33a8efe8.1fc5c","type":"change","z":"f14b69ba.8b2da8","name":"","rules":[{"t":"delete","p":"searchErrorCount","pt":"msg"},{"t":"delete","p":"error","pt":"msg"},{"t":"delete","p":"TranslationType","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":500,"y":760,"wires":[["93037869.397808","aacb33f4.4e70f"]]},{"id":"93037869.397808","type":"debug","z":"f14b69ba.8b2da8","name":"4 After change","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":700,"y":800,"wires":[]},{"id":"4391ddc7.30a294","type":"link out","z":"f14b69ba.8b2da8","name":"Got Potential Translation Update","links":["2cca7c19.be84f4"],"x":3110,"y":460,"wires":[],"l":true},{"id":"edc2ac7a.b3006","type":"link out","z":"f14b69ba.8b2da8","name":"Got Potential Translation Update","links":["2cca7c19.be84f4"],"x":3330,"y":620,"wires":[],"l":true},{"id":"22aae31a.d0e07c","type":"link out","z":"f14b69ba.8b2da8","name":"Got Potential Translation Update","links":["2cca7c19.be84f4"],"x":3150,"y":740,"wires":[],"l":true},{"id":"719d677e.7901d8","type":"link out","z":"f14b69ba.8b2da8","name":"Got Potential Translation Update","links":["2cca7c19.be84f4"],"x":2410,"y":620,"wires":[],"l":true},{"id":"aacb33f4.4e70f","type":"function","z":"f14b69ba.8b2da8","name":"Format for InfluxDB & MQTT","func":"//Ref. TMS-000002\n/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.exportableresults.DeviceID;\n//node.warn(\"11 \"+ deviceID)\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar typeOfMeasurement = msg.exportableresults.Measure;\n\n//gather the actual measurement value that was sent by the device to be included as the data for the field (when the measurement is valid) sent to InfluxDB\nvar theData = msg.exportableresults.Reading;\n//initialize the measurements object\nvar measurementsObj = {};\n\n//initialize the tags (indices) object\nvar tagsObj = {};\n\n//create the object that will later be used to combine the measurementsObj and tagsObj\nvar combinedObj;\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\nif (msg.exportableresults.hasOwnProperty('dataType'))\n{\n    if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    {\n        if (typeof theData == 'number')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched number\" });\n            if (!theData.isNaN)\n            {\n                validMeasurement = true;\n            }\n        }\n        else if (typeof theData == 'string')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched string\" });\n            if (theData.length >= 0)\n            {\n                validMeasurement = true;\n            }\n        } \n        else if (typeof theData == 'boolean')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched boolean\" });\n            validMeasurement = true;\n        }\n        else if (msg.exportableresults.dataType == 'ENUM')\n        { //This is checking to make sure the value matches one of the values in the ENUM from the device \n            node.status({ fill: \"red\", shape: \"ring\", text: msg.exportableresults.dataType + \" matched ENUM\" });\n            msg.exportableresults.values.forEach(element => {\n                if (flow.get(deviceID + element) == theData)\n                {\n                    validMeasurement = true;\n                }\n            })\n        }\n        else if (theData === null)\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched null data\" });\n            nullData = true;\n        }\n        else\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched nonstandardtype\" });\n            nonStandardType = true;\n        }\n    } //if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    else\n    {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"measurement type mismatch\" });\n        measurementTypeMismatch = true;\n    } //else  if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n}//if(msg.exportableresults.hasOwnProperty('dataType'))\nelse\n{\n    validMeasurement = true;\n}// else      if(msg.exportableresults.hasOwnProperty('dataType')) else\n\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\", \"PhysicalDigitalRegular\"]\nfor (innerIndex = 0; innerIndex < commonTags.length; innerIndex++)\n{\n    if (msg.exportableresults.hasOwnProperty(commonTags[innerIndex]))\n    {\n        tagsObj[commonTags[innerIndex]] = msg.exportableresults[commonTags[innerIndex]]\n    } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n} //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    //node.warn(\"94 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"113 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"123 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n\n//put the object into the payload\nmsg.payload = combinedObj;\n\n//build the status to be shown on the status of the subnode\nmsg.status = msg.exportableresults.DeviceName + \": \" + typeOfMeasurement + \": \" + theData;\n\n/* MQTT section \n * \n * \n * \n */\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = msg.exportableresults.MQTTname +\"/\"+msg.exportableresults.DeviceName+\"/\"+ msg.exportableresults.Measure\n//add the data to be recorded to MQTT\nmsg2.payload = theData\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nif (!nullData) {\n    return [msg, msg2]\n}\ndebugger\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n","outputs":2,"noerr":0,"x":740,"y":760,"wires":[["4d210d2d.a14734","151ee38f.19fffc","e90820c6.94152"],["9f2808f1.e56388","8eff26e6.443808"]]},{"id":"4d210d2d.a14734","type":"debug","z":"f14b69ba.8b2da8","name":"4.1 Output 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1010,"y":680,"wires":[]},{"id":"9f2808f1.e56388","type":"debug","z":"f14b69ba.8b2da8","name":"4.2 Output 2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1010,"y":860,"wires":[]},{"id":"151ee38f.19fffc","type":"influxdb out","z":"f14b69ba.8b2da8","influxdb":"e95739a9.f90a28","name":"","measurement":"Smarthome","precision":"","retentionPolicy":"","x":1130,"y":720,"wires":[]},{"id":"e90820c6.94152","type":"change","z":"f14b69ba.8b2da8","name":"Move Status to Payload for Consumption by Status Node","rules":[{"t":"set","p":"payload","pt":"msg","to":"status","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1150,"y":760,"wires":[["18a1baff.947c45"]]},{"id":"8eff26e6.443808","type":"mqtt out","z":"f14b69ba.8b2da8","name":"Write reading to MQTT","topic":"","qos":"1","retain":"true","broker":"a5bf81ee.27852","x":1040,"y":800,"wires":[]},{"id":"18a1baff.947c45","type":"debug","z":"f14b69ba.8b2da8","name":"4.3 Output  For Status node","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1520,"y":720,"wires":[]},{"id":"ffe3afda.74d5c","type":"comment","z":"f9a34738.f12c28","name":"before major overhaul version","info":"","x":1500,"y":80,"wires":[]},{"id":"e09f04a.9d506f8","type":"comment","z":"f9a34738.f12c28","name":"after major overhaul version","info":"","x":1660,"y":680,"wires":[]},{"id":"74eef5f0.8ccdbc","type":"function","z":"c5ccb11d.87221","name":"Determine Source For Gsheet lookup properties.","func":"//Read subflow input variables\nif (env.get(\"OverrideEnvVariables\"))\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse if (msg.IgnoreEnvVar)\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse\n{\n    var ColStart = env.get(\"ColStart\");\n    var ColEnd = env.get(\"ColEnd\");\n    var FirstRow = env.get(\"MinRow\");\n    var LastRow = env.get(\"MaxRow\");\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = env.get(\"Spreadsheet ID\");\n    msg.tab = env.get(\"TabName\");\n    msg.cellstart = ColStart + FirstRow\n    msg.cellend = ColEnd + LastRow\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n    //These 2 are needed later to calculate the last populate and first empty rows and columns\n    msg.ColStart = ColStart\n    msg.MinRow = FirstRow\n}\nreturn msg;","outputs":1,"noerr":0,"x":260,"y":20,"wires":[["603c205a.b0331","9fe2a10e.aae73"]],"info":"This node sets up the inputs to the GSheet node.\nThe outputs that make up those inputs are:\n - msg.sheet -the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n - msg.topic - the combination of spreadsheet tab and cell range\n## Note\nThere are 2 very similar booleans evaluated by this node. They are:\n * **OverrideEnvVariables** - This one looks at the environment variable that was set in the flow triggering the subflow\n * **msg.IgnoreEnvVar** - This one is allows the logic to be driven by a message object property and thus can be set at runtime or earlier in the flow based on upstream logic\n\nFirst it checks the boolean value of the **OverrideEnvVariables** environment variable. This is by default false. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming the first was false, it checks the boolean value of the **msg.IgnoreEnvVar** value. This will evaluated as false if not populated, so sending false is unnecessary. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming both are false, then it can build the outputs based on the subflows environment variables. These can either be those set in the calling flow or they may be the default ones built into the subflow.\n\nRegardless of the method used to build the output, the node also removes the input message properties.\n\n\n\nmsg.IgnoreEnvVar"},{"id":"603c205a.b0331","type":"GSheet","z":"c5ccb11d.87221","creds":"adb4e9b8.8beee8","method":"get","action":"","sheet":"","cells":"","name":"Read Input from GSheet","x":610,"y":20,"wires":[["dbd52898.8d0788"]],"info":"Use the GSheet node to get the a set of rows from a google spreadsheet.\n\n# **Inputs**\n### **creds**\nThis is the name on the gauth configuration node. How to get the details is beyond the scope of what I am going to put into an individual node instance. Some details are at [node-red-contrib-google-sheets](https://flows.nodered.org/node/node-red-contrib-google-sheets)\n### **Method**\nIn this case using the get cells method to read a set of data.\n### **SpreadsheetID**\nUnused as the spreadsheet ID is passed in as part of the input msg, but if needed it would be the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n### **Cells**\nUnused as the requested cells are passed in as part of the input msg, but if it was being manually built for a static data source the format is made of of 3 parts with specific seperators:\n * **[Sheetname]** like Sheet1\n * **[upper left corner cell address]** like A1\n * **[lower right corner cell address]** like B2\n\nThe format is **[Sheetname]**!**[upper left corner cell address]**:**[lower right corner cell address]** giving an input like **Sheet1!A1:B2**\n "},{"id":"7397c4cf.169e5c","type":"comment","z":"c5ccb11d.87221","name":"Error","info":"","x":1090,"y":20,"wires":[]},{"id":"7d4ee29.f631f1c","type":"comment","z":"c5ccb11d.87221","name":"Last Populated Row","info":"","x":1130,"y":100,"wires":[]},{"id":"4a364e2.bc44db","type":"function","z":"c5ccb11d.87221","name":"Prepare Output Parts","func":"/*\n * Row response calculations\n */\nmsg.LastPopulatedRow = msg.payload.length + msg.MinRow - 1\nmsg.FirstEmptyRow = msg.LastPopulatedRow + 1\n\n/*\n *Column response calculation variables\n */\nlet colCount = 1 //number of columns wide from the data retrieved. This will eventually be replace by logic that loops through array find the max width for any given row\nlet index\nlet sheetdata = msg.payload //this is the data that is returned from Google that will then be examined\nlet fCol = msg.ColStart\nlet fColTotal = 0 //to hold the column number\nlet nCol = \"\"   //nCol is new column\nlet lCol = \"\"   //lCol is last column in the range (to be populated from the actual Gsheet calls data)\n\nfCol = fCol.toUpperCase()\n/*\n * validate fCol (done)\n */\nlet validStartCol = false\nvalidStartCol = ((fCol.length == 1) ||\n                ((fCol.substr(0, 1).charCodeAt(0) - 64) < 9) ||\n                (((fCol.substr(0, 1).charCodeAt(0) - 64) == 9) && ((fCol.substr(1, 1).charCodeAt(0) - 64) <= 22)))\n/*\n *Column response calculations\n */\n//look at each row that is an array\nfor (index = 0; index < sheetdata.length; index++)\n{\n    if (Array.isArray(sheetdata[index]))\n    {\n        // when the rows width is greater than any of the previous rows set the column count to the new largest width\n        colCount = Math.max(colCount, sheetdata[index].length)\n    } //if (Array.isArray(sheetdata[index]))\n}  //for (index = 0; index < sheetdata.length; index++)\nswitch (fCol.length) {\n    case 1:\n        fColTotal = (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    case 2:\n        fColTotal = (fCol.substr(1, 1).charCodeAt(0) - 64) + 26 * (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    default:\n        fColTotal = -1\n}\n//Last Populated Column and First Empty Column calculation\nif ((fColTotal <= 25) && (fColTotal >= 1)) {\n    lCol = String.fromCharCode(fColTotal+64)\n    nCol = String.fromCharCode(fColTotal+65)\n} else if (fColTotal == 26) {\n    lCol = \"Z\"\n    nCol = \"AA\"\n} else if (fColTotal >= 27) {\n    lCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 64)\n    nCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 65)\n} else if (fColTotal == -1) {\n    lCol = \"Error\"\n    nCol = \"Error\"\n    //Probably worth putting real error here, but deferred\n} else if (fColTotal == 256) {\n    lCol = \"IV\"\n    nCol = \"None\"\n}\nmsg.LastPopulatedCol = lCol\nmsg.FirstEmptyCol = nCol\nmsg.SpreadsheetArray = msg.payload\nreturn msg;","outputs":1,"noerr":0,"x":560,"y":540,"wires":[["b383d4a7.b31098","99ff283b.587b38","5d7a9aee.af6c34","2fa1add7.1958f2","5b88e253.4c4f2c","e965d93a.aff398"]],"info":"Takes an input from the Gsheet node and calculates a variety of details about the spreadsheet info.\n### **Output**\nmsg.LastPopulatedRow\nmsg.FirstEmptyRow\nmsg.LastPopulatedCol\nmsg.FirstEmptyCol\nmsg.SpreadsheetArray\n"},{"id":"27accc4a.8ee1a4","type":"comment","z":"c5ccb11d.87221","name":"First Empty Row","info":"","x":1120,"y":180,"wires":[]},{"id":"325a9a23.77eb66","type":"comment","z":"c5ccb11d.87221","name":"Last Populated Column","info":"","x":1140,"y":260,"wires":[]},{"id":"724d8cd0.055314","type":"comment","z":"c5ccb11d.87221","name":"First Empty Column","info":"","x":1130,"y":340,"wires":[]},{"id":"a98a82.7ccf658","type":"comment","z":"c5ccb11d.87221","name":"Spreadsheet Array","info":"","x":1130,"y":420,"wires":[]},{"id":"d7356d4b.cb6f7","type":"comment","z":"c5ccb11d.87221","name":"Full Data","info":"","x":1100,"y":500,"wires":[]},{"id":"370583c1.fb1a5c","type":"comment","z":"c5ccb11d.87221","name":"Full Data with Inputs","info":"","x":1130,"y":580,"wires":[]},{"id":"b383d4a7.b31098","type":"change","z":"c5ccb11d.87221","name":"Leave Outputs","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":840,"y":540,"wires":[[]],"info":"Deletes a variety of message properties, but leaves all of them that were calculated about the Gsheet nodes results to be returned on the designated subflow output."},{"id":"99ff283b.587b38","type":"change","z":"c5ccb11d.87221","name":"Leave Last Populated Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":140,"wires":[[]],"info":"Copies msg.theLastPopulatedRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"5d7a9aee.af6c34","type":"change","z":"c5ccb11d.87221","name":"Leave First Empty Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":220,"wires":[[]],"info":"Copies msg.FirstEmptyRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"2fa1add7.1958f2","type":"change","z":"c5ccb11d.87221","name":"Leave Last Populated Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":300,"wires":[[]],"info":"Copies msg.LastPopulatedCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"5b88e253.4c4f2c","type":"change","z":"c5ccb11d.87221","name":"Leave First Empty Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":380,"wires":[[]],"info":"Copies msg.FirstEmptyCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"e965d93a.aff398","type":"change","z":"c5ccb11d.87221","name":"Leave Spreadsheet Array","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"SpreadsheetArray","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":460,"wires":[[]],"info":"Copies msg.SpreadsheetArray into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"f1a21086.ad433","type":"trigger","z":"c5ccb11d.87221","op1":"","op2":"timeout","op1type":"nul","op2type":"str","duration":"10","extend":true,"units":"s","reset":"","bytopic":"all","name":"Watchdog","x":600,"y":140,"wires":[["2fa1add7.1958f2","99ff283b.587b38","5b88e253.4c4f2c","e965d93a.aff398","b383d4a7.b31098"]],"info":"This trigger node works as a watchdog to see if the request to see if the read of the Google Sheet that was triggered on the other branch is successful. If it is succeful, then it will receive a reset message (msg.reset) from the Reset Watchdog node. If, however, 10 seconds elapse without receiving the reset message, this node sends a timeout message (msg.timeout)."},{"id":"9fe2a10e.aae73","type":"change","z":"c5ccb11d.87221","name":"","rules":[{"t":"set","p":"timeout","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":420,"y":120,"wires":[["f1a21086.ad433"]],"info":"Labels what the initial input to the watchdog trigger node is."},{"id":"f32c273a.e61738","type":"change","z":"c5ccb11d.87221","name":"","rules":[{"t":"delete","p":"reset","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":540,"wires":[["4a364e2.bc44db"]],"info":"Removes msg.reset that was only intended for the watchdog trigger node."},{"id":"64cd2a10.a267c4","type":"catch","z":"c5ccb11d.87221","name":"Catch and Relay Errors","scope":null,"uncaught":false,"x":860,"y":60,"wires":[[]],"info":"Passes any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default."},{"id":"dbd52898.8d0788","type":"change","z":"c5ccb11d.87221","name":"Reset Watchdog","rules":[{"t":"set","p":"reset","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":140,"y":140,"wires":[["f1a21086.ad433","f32c273a.e61738"]],"info":"Sends the reset message to the watchdog triger node when there is output from the Gsheet node."},{"id":"eb5300a8.ab683","type":"function","z":"20c22900.896628","name":"Db Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":389,"wires":[["dbf60bd1.e6d018"]],"info":"# **What** #\nThis is a simple function node that stores the msg.payload into a global variable. This is done in a function node, however, because the name of that global variable is passed into the function as a the value of msg.globalsource. \n\n## **Why**\nNormally this would be done in a change node, but change nodes could not as of May 2020 take a msg object component as the name of the global variable to be set."},{"id":"d84471d1.ac3ec","type":"subflow:c5ccb11d.87221","z":"20c22900.896628","name":"","env":[],"x":580,"y":189,"wires":[[],[],[],[],[],[],["eb5300a8.ab683"],[]],"info":"This subflow shows information in the environment variables. These are good for testing purposes, but it is noteworthy that the override boolean is false. Unless that boolean is changed, they have no impact."},{"id":"dbf60bd1.e6d018","type":"function","z":"20c22900.896628","name":"Db Use input to lookup info","func":"//Ref. TMS-000001\n\n//if(msg.exportableresults.DeviceName !== \"Switch_Ikea\") {return}\n\n\n\n//1 Get must have items: searchKeys, searchValues, searchResultKeys, cachedSearch, cacheTime\n\nlet searchKeys = Object.keys(msg.keyvalues)\nlet searchValues = Object.values(msg.keyvalues)\nlet searchResultKeys = Object.keys(msg.searchfor)\nlet cachedSearch = global.get(\"LastSearch\")\nlet cacheTime = new Date().getTime()\n//2 create working variables searchKeyIndices, searchResultKeysIndices, index, cacheKey\nlet searchResultKeysIndices = []\nlet index\nlet cacheObject\n//3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\ncacheObject = BuildCacheObject(searchKeys, searchValues, searchResultKeys)\n//4\n/*\n * 4.1 t/f cached result is usable\n    *  4.1.true then t/f does it meet criteria\n        * 4.1.true.true\ttrue msg.searchfor = cachedSearch.searchfor\n        * 4.1.true.false do the common lookup\n    *   4.1.false  do the common lookup\n    */\n//4.1\nif (cachedSearch !== undefined)\n{\n    //4.1.true\n    if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    {\n        //4.1.true.true\n        msg.searchfor = cachedSearch.searchfor\n        return [msg, null, null]\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    //4.1.true.false\n    else\n    {\n        //4.1.true.false\n        lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n        //return results from the node on 1 of the 3 outputs\n        if (lookupResults[0] !== null)\n        {\n            return [lookupResults[0], null, null]\n        } //if (lookupResults[0] !== null)\n        else if (lookupResults[1] !== null)\n        {\n            return [null, lookupResults[1], null]\n        } //else if (lookupResults[1] !== null)\n        else\n        {\n            return [null, null, lookupResults[2]]\n        } //else if (lookupResults[1] !== null) else\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000)) else\n} //if (cachedSearch !== undefined)\n//4.1.false\nelse\n{\n    //4.1.false\n    lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n    //return results from the node on 1 of the 3 outputs\n    if (lookupResults[0] !== null)\n    {\n        return [lookupResults[0], null, null]\n    } //if (lookupResults[0] !== null)\n    else if (lookupResults[1] !== null)\n    {\n        return [null, lookupResults[1], null]\n    } //else if (lookupResults[1] !== null)\n    else\n    {\n        return [null, null, lookupResults[2]]\n    } //else if (lookupResults[1] !== null) else\n} //if (cachedSearch !== undefined) else\nreturn\n\nfunction BuildCacheObject(searchKeysArray, SearchValuesArray, SearchResultKeysArray) {\n    //3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\n    let newCacheKey =\"\"\n    for (index = 0; index < searchKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + searchKeysArray[index] + SearchValuesArray[index]\n    } //for (index = 0; index < searchKeysArray.length; index++)\n    //add all fields that will be looked for into the cache key\n    for (index = 0; index < SearchResultKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + SearchResultKeysArray[index]\n    } //for (index = 0; index < SearchResultKeysArray.length; index++)\n    //combine the cache key and the cache time into a single object that can be compared with the cached last search\n    let createdCacheObject = \n    {\n        query: newCacheKey,\n        time: cacheTime\n    }\n    return createdCacheObject\n}\nfunction CommonLookup(workingMsg, keysForSearchColumn, keysForResultColumn, valuesSearchedFor, requestedDataTable, passedCacheObject) {\n    let searchKeyIndices = []\n    let searchResultKeysIndices = []\n    let outerIndex\n    let innerLoopCounter\n    let innerIndex\n    let index\n    if (requestedDataTable !== undefined)\n    {\n        // iterate through all search keys.\n        //outer index is the place along the array of search keys\n        for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchKeyIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    //////////////////////////////////////////////////////////////////////////break may be a problem. Maybe swap inner and outer arrays and then do some if then about getting through the whole data headers without finding. Right now it only looks for 1 failure\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    //this is accumulating how many times the search key did not match one of the data table headers\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                                workingMsg.searchErrorCount++\n                        }\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        }\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        }\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        }\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        //if this point is reached, searchKeyIndices has been populated\n        // iterate through all search result keys.\n        //outer index is the place along the array of search keys \n        for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchResultKeysIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                            workingMsg.searchErrorCount++\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        } //if (workingMsg.searchErrorCount > 1)\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        } //if (workingMsg.searchErrorCount > 1) else\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        //if this point is reached, both searchKeyIndices and searchResultKeysIndices have been populated\n        //loop through all search keys, 1 index at a time and filter to a row that has the desired data in the desired column\n        let result = []\n        let pushable\n        pushable = false\n        for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        {\n            for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            {\n                if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                {\n                    pushable = true\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                else\n                {\n                    pushable = false\n                    break\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n            } //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            if (pushable)\n            {\n                result.push(requestedDataTable[outerIndex])\n            } //if (pushable)\n    \n    } //for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        //if this point is reached then there is a filtered table\n        //debugger\n        if (result.length === 0)\n        {\n            workingMsg.error = \"After filtering no data rows were left.\"\n            //either create and populate the error count at 1 or increment it if it already exists\n            if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            {\n                workingMsg.searchErrorCount++\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            else\n            {\n                workingMsg.searchErrorCount = 1\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n            //return the error on the middle there is an error output,\n            //this retry is in case the column was added to the google sheet since it was last loaded into node red\n            if (workingMsg.searchErrorCount > 1)\n            {\n                //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                return [null, null, workingMsg]\n            } //if (workingMsg.searchErrorCount > 1)\n            else\n            {\n                //return the error on the middle there is an error output,\n                return [null, workingMsg, null]\n            } //if (workingMsg.searchErrorCount > 1) else\n        } //if (result.length === 0)\n        else if (result.length > 1)\n        {\n            //do the warning that multiple were found but will take the first\n            node.warn(\"Multiple rows were found that matched the search criteria. Results are from the first row that was found and matched.\")\n        } //else if (result.length > 1)\n        //look up the data\n        for (index = 0; index < searchResultKeysIndices.length; index++)\n        {\n            //workingMsg.searchfor.keysForSearchColumn[index] = result[0][searchResultKeysIndices]\n            // the almost working version\n            workingMsg.searchfor[keysForResultColumn[index]] = result[0][searchResultKeysIndices[index]]\n        } //for (index = 0; index < searchResultKeysIndices.length; index++)\n        //if this point is reached then work workingMsg contains complete info\n        //build and save the LastSearch obect\n        passedCacheObject.searchfor = workingMsg.searchfor\n        global.set(\"LastSearch\", passedCacheObject)\n        return [workingMsg, null, null]\n    } //if (requestedDataTable !== undefined)\n    else\n    {\n        //return on second output to trigger population of global that feeds datatable\n        //put some details on this configuration into the msg to be output\n        workingMsg.error = \"The data normally loaded from google sheet was not loaded.\"\n        //either create and populate the error count at 1 or increment it if it already exists\n        if (workingMsg.hasOwnProperty('searchErrorCount'))\n        {\n            workingMsg.searchErrorCount++\n        } //if (workingMsg.hasOwnProperty('searchErrorCount'))\n        else\n        {\n            workingMsg.searchErrorCount = 1\n        } //if (workingMsg.hasOwnProperty('searchErrorCount')) else\n        //return the error on the middle there is an error output,\n        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n        if (workingMsg.searchErrorCount > 1)\n        {\n            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n            return [null, null, workingMsg]\n        } //if (workingMsg.searchErrorCount > 1)\n        else\n        {\n            //return the error on the middle there is an error output,\n            return [null, workingMsg, null]\n        } //if (workingMsg.searchErrorCount > 1) else\n    } //if (requestedDataTable !== undefined) else\n}","outputs":3,"noerr":0,"x":240,"y":80,"wires":[[],["d84471d1.ac3ec"],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"],"info":"# **Conceptual Explanation**\nThis node is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows.\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the node has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria. Normally it is used to trigger loading the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure."},{"id":"ff4aa3f9.f2658","type":"change","z":"20c22900.896628","name":"Devices table, 1 search key with variable input, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":980,"y":100,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"89e3875b.349698","type":"change","z":"20c22900.896628","name":"Devices table, 1 search key, 2 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Motion_Ikea","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":180,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Motion_Ikea\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** and **\"Manufacturer\"** columns."},{"id":"dc7c3f55.cdc4c","type":"change","z":"20c22900.896628","name":"Devices table, 1 search key, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":60,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"**. Notice unlike some examples this includes a space in the value. This has no negative impact.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column."},{"id":"eae5f57f.09e918","type":"change","z":"20c22900.896628","name":"Devices table, 2 search keys, 1 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"keyvalues.Manufacturer","pt":"msg","to":"homebridge-people-geofence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":140,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"** and the **\"Manufacturer\"** column for the value **\"homebridge-people-geofence\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** columns."},{"id":"ea88bfb8.3855","type":"comment","z":"20c22900.896628","name":"Examples of preformating the inputs","info":"","x":920,"y":20,"wires":[]},{"id":"72a166e6.25b6e8","type":"change","z":"20c22900.896628","name":"Spreadsheet Lookup Settings Example","rules":[{"t":"set","p":"IgnoreEnvVar ","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":260,"wires":[[]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"82a0ae35.8fd61","type":"debug","z":"20c22900.896628","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":160,"y":240,"wires":[]},{"id":"d3a38e47.70d9d","type":"comment","z":"20c22900.896628","name":"Maybe insert check of how long since last Google read and skip step","info":"","x":520,"y":140,"wires":[]},{"id":"585a8652.004658","type":"change","z":"f9a34738.f12c28","name":"Put device ID into msg.deviceID and payload into payload.value","rules":[{"t":"set","p":"temp","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"set","p":"payload.value","pt":"msg","to":"temp","tot":"msg"},{"t":"delete","p":"temp","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"homebridge","tot":"str"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"name","tot":"msg"},{"t":"set","p":"payload.name","pt":"msg","to":"name","tot":"msg"},{"t":"set","p":"MQTTName","pt":"msg","to":"homebridge","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1850,"y":960,"wires":[["b1becd5e.a8ea1","59751680.d64758"]]},{"id":"59751680.d64758","type":"function","z":"f9a34738.f12c28","name":"Split kv pairs (from value) into 1-n msg stream (ready for testing)","func":"///////////////////////////////////////////////////////////////////\n//debugger\n///////////////////////////////////////////////////////////////////\n/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value;\n                --msg.payload.value;\n            }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        if (typeof name === 'undefined') \n        {\n            latestMsg.payload.name = key;\n        } \n        else \n        {\n            latestMsg.payload.name = name + \"/\" + key;\n        }\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n//Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \"/\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":1850,"y":1000,"wires":[["7a3228f6.c13f18","6e959977.a66a68"]]},{"id":"7a3228f6.c13f18","type":"change","z":"f9a34738.f12c28","name":"","rules":[{"t":"delete","p":"qos","pt":"msg"},{"t":"delete","p":"retain","pt":"msg"},{"t":"delete","p":"payload.dataType","pt":"msg"},{"t":"delete","p":"deviceID","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"MQTTName","tot":"msg"},{"t":"delete","p":"MQTTName","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"topic","tot":"msg"},{"t":"delete","p":"topic","pt":"msg"},{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"payload.value","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"name","tot":"msg"},{"t":"delete","p":"Manufacturer","pt":"msg"},{"t":"delete","p":"_device","pt":"msg"},{"t":"delete","p":"_confId","pt":"msg"},{"t":"delete","p":"Homebridge","pt":"msg"},{"t":"delete","p":"_rawMessage","pt":"msg"},{"t":"delete","p":"name","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1710,"y":1040,"wires":[["4c16b527.2f064c","64a1be90.6880c"]]},{"id":"64a1be90.6880c","type":"link out","z":"f9a34738.f12c28","name":"Get DeviceID","links":["cd8ee5de.4e22c8"],"x":1990,"y":1040,"wires":[],"l":true},{"id":"b1becd5e.a8ea1","type":"debug","z":"f9a34738.f12c28","name":"Catch Post change 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2240,"y":960,"wires":[]},{"id":"6e959977.a66a68","type":"debug","z":"f9a34738.f12c28","name":"Catch Stream Split","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2230,"y":1000,"wires":[]},{"id":"4c16b527.2f064c","type":"debug","z":"f9a34738.f12c28","name":"Catch to send to get device","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2080,"y":1160,"wires":[]},{"id":"cd8ee5de.4e22c8","type":"link in","z":"f9a34738.f12c28","name":"Get DeviceID (Homekit, z2m)","links":["64a1be90.6880c"],"x":1640,"y":1440,"wires":[["2ce96cca.686084"]],"l":true},{"id":"10ef9b23.de26a5","type":"link in","z":"f9a34738.f12c28","name":"Got DeviceID","links":["9334307.c3c62d"],"x":1670,"y":1500,"wires":[["8009a52c.cd3bc8"]],"l":true},{"id":"bf85a2c6.09df7","type":"change","z":"f9a34738.f12c28","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"set","p":"exportableresults.DeviceID","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2660,"y":1420,"wires":[["deac7af9.eb82d8"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"d7ff7cf1.52259","type":"subflow:20c22900.896628","z":"f9a34738.f12c28","name":"","env":[],"x":2401,"y":1440,"wires":[["bf85a2c6.09df7"],["59213915.3a4ac8"],["9ced7b16.74d468"]]},{"id":"34c6aaba.43ba56","type":"inject","z":"f9a34738.f12c28","name":"Delete Devices for Testing","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":1710,"y":1380,"wires":[["968f96eb.d5d2c8"]]},{"id":"968f96eb.d5d2c8","type":"change","z":"f9a34738.f12c28","name":"","rules":[{"t":"delete","p":"Devices","pt":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":1980,"y":1380,"wires":[[]]},{"id":"deac7af9.eb82d8","type":"function","z":"f9a34738.f12c28","name":"Move Data from searchfor to exportableresults","func":"//debugger\nlet foundKeys = Object.keys(msg.searchfor)\nlet foundValues = Object.values(msg.searchfor)\n//loop through all keys and a\nfor (index = 0; index < foundKeys.length; index++)\n{\n    msg.exportableresults[foundKeys[index]] = foundValues[index]\n}\ndelete msg.searchfor\nreturn msg","outputs":1,"noerr":0,"x":2980,"y":1420,"wires":[["8a986ea5.9cf49","9334307.c3c62d"]],"info":"This node moves each property under the msg.searchfor property to the msg.exportableresults property."},{"id":"2ce96cca.686084","type":"change","z":"f9a34738.f12c28","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1911,"y":1440,"wires":[["23b8b7a4.d7f8b8"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"23b8b7a4.d7f8b8","type":"change","z":"f9a34738.f12c28","name":"Devices Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Floor","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Location","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Room","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.DeviceType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.AccessProtocol","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.PhysicalVirtualType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.House","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.MQTTDeviceTopic","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Hub","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2171,"y":1440,"wires":[["d7ff7cf1.52259"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"579a7b7a.920b84","type":"link in","z":"f9a34738.f12c28","name":"Get Measurement Name Update (All 3)","links":["8009a52c.cd3bc8"],"x":1710,"y":1540,"wires":[["7feb289f.232c78"]],"l":true},{"id":"8009a52c.cd3bc8","type":"link out","z":"f9a34738.f12c28","name":"Get Measurement Name Update","links":["579a7b7a.920b84"],"x":2070,"y":1500,"wires":[],"l":true},{"id":"a5cdfbc.9477208","type":"link in","z":"f9a34738.f12c28","name":"Got Measurement Name Update","links":["320bd13a.63e02e"],"x":1730,"y":1580,"wires":[["79e101d4.e115b"]],"l":true},{"id":"9334307.c3c62d","type":"link out","z":"f9a34738.f12c28","name":"Got Device ID","links":["10ef9b23.de26a5"],"x":3280,"y":1420,"wires":[],"l":true},{"id":"f21ee1e2.f0daf","type":"comment","z":"f9a34738.f12c28","name":"DeviceID lookup is needed for MQTT (and Homebridge?), but not Hubitat devices","info":"","x":1880,"y":1340,"wires":[]},{"id":"a37190b1.152e6","type":"change","z":"f9a34738.f12c28","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2880,"y":1480,"wires":[["a1c7e258.b7636"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"93cb2b85.b51968","type":"subflow:20c22900.896628","z":"f9a34738.f12c28","name":"","env":[],"x":2600,"y":1540,"wires":[["a37190b1.152e6"],["99906d6a.38631"],["82eda324.4864f","4adfd8be.4f6798"]]},{"id":"7feb289f.232c78","type":"change","z":"f9a34738.f12c28","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"E","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"100","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2010,"y":1540,"wires":[["a7e0ec97.d9521"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"a7e0ec97.d9521","type":"change","z":"f9a34738.f12c28","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"keyvalues.SourceDevice","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.ChangeNameTo","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2320,"y":1540,"wires":[["1bdba9bd.133746","b160c06c.fb41f"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"8a986ea5.9cf49","type":"debug","z":"f9a34738.f12c28","name":"1 DevID Lookup Success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3310,"y":1380,"wires":[]},{"id":"99906d6a.38631","type":"debug","z":"f9a34738.f12c28","name":"flow 2 temp no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2850,"y":1520,"wires":[]},{"id":"82eda324.4864f","type":"debug","z":"f9a34738.f12c28","name":"flow 2 perm no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2850,"y":1600,"wires":[]},{"id":"f069229.e79d5e","type":"debug","z":"f9a34738.f12c28","name":"2 rename lookup success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3570,"y":1440,"wires":[]},{"id":"a1c7e258.b7636","type":"function","z":"f9a34738.f12c28","name":"Move Name Change from searchfor to exportableresults","func":"msg.exportableresults.Measure = msg.searchfor.ChangeNameTo\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":3230,"y":1480,"wires":[["f069229.e79d5e","320bd13a.63e02e"]]},{"id":"320bd13a.63e02e","type":"link out","z":"f9a34738.f12c28","name":"Got Measurement Name Update","links":["a5cdfbc.9477208"],"x":3610,"y":1480,"wires":[],"l":true},{"id":"79e101d4.e115b","type":"link out","z":"f9a34738.f12c28","name":"Get Potential Translation Update","links":["a30a59d2.1e4f48"],"x":2070,"y":1580,"wires":[],"l":true},{"id":"a30a59d2.1e4f48","type":"link in","z":"f9a34738.f12c28","name":"Get Potential Translation Update (Homebridge Only)","links":["79e101d4.e115b"],"x":1730,"y":1660,"wires":[["ee4b5532.f22c78"]],"l":true},{"id":"37f6ffdb.039e","type":"link in","z":"f9a34738.f12c28","name":"Got Potential Translation Update","links":["71b44bcb.1f9b14","d644fcba.8ac25","e3a1e105.d6ea3","68d5dbb2.dba074","aca44224.bdd06"],"x":1730,"y":1820,"wires":[["e0d5c4b0.096618","332acefe.132602"]],"l":true},{"id":"71b44bcb.1f9b14","type":"link out","z":"f9a34738.f12c28","name":"Got Potential Translation Update","links":["37f6ffdb.039e"],"x":4470,"y":1580,"wires":[],"l":true},{"id":"45aa7808.8c33d8","type":"function","z":"f9a34738.f12c28","name":"Move Name Change from searchfor to exportableresults","func":"msg.TranslationType = msg.searchfor.TranslationType\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":3330,"y":1640,"wires":[["cfdc8e29.5620b"]]},{"id":"767e5a85.4a6844","type":"change","z":"f9a34738.f12c28","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2980,"y":1640,"wires":[["45aa7808.8c33d8"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"8d62f17d.e0312","type":"subflow:20c22900.896628","z":"f9a34738.f12c28","name":"","env":[],"x":2720,"y":1660,"wires":[["767e5a85.4a6844"],[],["1845097a.8b6847"]]},{"id":"fa59a402.908af8","type":"change","z":"f9a34738.f12c28","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.TranslationType","pt":"msg","to":"","tot":"str"},{"t":"delete","p":"searchErrorCount","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2440,"y":1660,"wires":[["8d62f17d.e0312"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"ee4b5532.f22c78","type":"change","z":"f9a34738.f12c28","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"C","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"100","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2070,"y":1660,"wires":[["fa59a402.908af8"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"4adfd8be.4f6798","type":"change","z":"f9a34738.f12c28","name":"Remove Excess Properties when No Name Change Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2980,"y":1560,"wires":[["711cd60d.0fd568"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"1845097a.8b6847","type":"change","z":"f9a34738.f12c28","name":"Remove Excess Properties when No Data Translation Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3080,"y":1680,"wires":[["aca44224.bdd06"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"e0b84f64.64b78","type":"switch","z":"f9a34738.f12c28","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":4240,"y":1520,"wires":[["eb240427.c758e8","72c499c6.a8c2d8"],["3ab9ea63.108fb6","72c499c6.a8c2d8"]],"outputLabels":["True","False"]},{"id":"eb240427.c758e8","type":"change","z":"f9a34738.f12c28","name":"Value True","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":4410,"y":1500,"wires":[["e3a1e105.d6ea3","72c499c6.a8c2d8"]]},{"id":"3ab9ea63.108fb6","type":"change","z":"f9a34738.f12c28","name":"Value False","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"false","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":4410,"y":1540,"wires":[["e3a1e105.d6ea3","72c499c6.a8c2d8"]]},{"id":"d3284005.9864c","type":"change","z":"f9a34738.f12c28","name":"CtoF Translate","rules":[{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"msg.exportableresults.Measure&\"F\"\t","tot":"jsonata"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"payload*9/5+32","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":4240,"y":1580,"wires":[["71b44bcb.1f9b14"]]},{"id":"ee20520f.74f8d","type":"switch","z":"f9a34738.f12c28","name":"CurrentHeatingCoolingState Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"},{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":4310,"y":1680,"wires":[["fdaaa181.47afc"],["67eed2e9.60625c"],["4d3b53e.2a431ac"],["a31d9180.9e72"]],"outputLabels":["off","heat","cool","heat-cool"]},{"id":"fdaaa181.47afc","type":"change","z":"f9a34738.f12c28","name":"Value Off","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"off","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4560,"y":1620,"wires":[["68d5dbb2.dba074"]]},{"id":"67eed2e9.60625c","type":"change","z":"f9a34738.f12c28","name":"Value Heat","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4570,"y":1660,"wires":[["68d5dbb2.dba074"]]},{"id":"4d3b53e.2a431ac","type":"change","z":"f9a34738.f12c28","name":"Value Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4570,"y":1700,"wires":[["68d5dbb2.dba074"]]},{"id":"a31d9180.9e72","type":"change","z":"f9a34738.f12c28","name":"Value Heat-Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat-cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4580,"y":1740,"wires":[["68d5dbb2.dba074"]]},{"id":"6741544.6e504ac","type":"switch","z":"f9a34738.f12c28","name":"","property":"TranslationType","propertyType":"msg","rules":[{"t":"eq","v":"10TF","vt":"str"},{"t":"eq","v":"C2F","vt":"str"},{"t":"eq","v":"NestThMap","vt":"str"},{"t":"eq","v":"012CF","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":4030,"y":1620,"wires":[["e0b84f64.64b78"],["d3284005.9864c"],["ee20520f.74f8d"],["fffe6cb5.2f771"]],"outputLabels":["1 or 0 to True or False Map","Celcius to Fahrenheit Conversion","Nest Thermostat Map","Celcius or Fahrenheit Map"]},{"id":"fffe6cb5.2f771","type":"switch","z":"f9a34738.f12c28","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":4240,"y":1800,"wires":[["591b5341.c9913c"],["82554e49.ddf06"]],"outputLabels":["True","False"]},{"id":"591b5341.c9913c","type":"change","z":"f9a34738.f12c28","name":"Value Fahrenheit","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Fahrenheit","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4430,"y":1780,"wires":[["d644fcba.8ac25"]]},{"id":"82554e49.ddf06","type":"change","z":"f9a34738.f12c28","name":"Value Celcius","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Celcius","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4420,"y":1820,"wires":[["d644fcba.8ac25"]]},{"id":"cfdc8e29.5620b","type":"switch","z":"f9a34738.f12c28","name":"Translation Needed?","property":"TranslationType","propertyType":"msg","rules":[{"t":"neq","v":"null","vt":"str"},{"t":"eq","v":"null","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":3660,"y":1640,"wires":[["6741544.6e504ac"],["aca44224.bdd06"]]},{"id":"332acefe.132602","type":"change","z":"f9a34738.f12c28","name":"","rules":[{"t":"delete","p":"searchErrorCount","pt":"msg"},{"t":"delete","p":"error","pt":"msg"},{"t":"delete","p":"TranslationType","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2020,"y":1820,"wires":[["5256595d.ee7998","e81c4326.11658"]]},{"id":"5256595d.ee7998","type":"debug","z":"f9a34738.f12c28","name":"4 After change","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2220,"y":1860,"wires":[]},{"id":"e3a1e105.d6ea3","type":"link out","z":"f9a34738.f12c28","name":"Got Potential Translation Update","links":["37f6ffdb.039e"],"x":4630,"y":1520,"wires":[],"l":true},{"id":"68d5dbb2.dba074","type":"link out","z":"f9a34738.f12c28","name":"Got Potential Translation Update","links":["37f6ffdb.039e"],"x":4850,"y":1680,"wires":[],"l":true},{"id":"d644fcba.8ac25","type":"link out","z":"f9a34738.f12c28","name":"Got Potential Translation Update","links":["37f6ffdb.039e"],"x":4670,"y":1800,"wires":[],"l":true},{"id":"aca44224.bdd06","type":"link out","z":"f9a34738.f12c28","name":"Got Potential Translation Update","links":["37f6ffdb.039e"],"x":3930,"y":1680,"wires":[],"l":true},{"id":"e81c4326.11658","type":"function","z":"f9a34738.f12c28","name":"Format for InfluxDB & MQTT","func":"//Ref. TMS-000002\n/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.exportableresults.DeviceID;\n//node.warn(\"11 \"+ deviceID)\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar typeOfMeasurement = msg.exportableresults.Measure;\n\n//gather the actual measurement value that was sent by the device to be included as the data for the field (when the measurement is valid) sent to InfluxDB\nvar theData = msg.exportableresults.Reading;\n//initialize the measurements object\nvar measurementsObj = {};\n\n//initialize the tags (indices) object\nvar tagsObj = {};\n\n//create the object that will later be used to combine the measurementsObj and tagsObj\nvar combinedObj;\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\nif (msg.exportableresults.hasOwnProperty('dataType'))\n{\n    if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    {\n        if (typeof theData == 'number')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched number\" });\n            if (!theData.isNaN)\n            {\n                validMeasurement = true;\n            }\n        }\n        else if (typeof theData == 'string')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched string\" });\n            if (theData.length >= 0)\n            {\n                validMeasurement = true;\n            }\n        } \n        else if (typeof theData == 'boolean')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched boolean\" });\n            validMeasurement = true;\n        }\n        else if (msg.exportableresults.dataType == 'ENUM')\n        { //This is checking to make sure the value matches one of the values in the ENUM from the device \n            node.status({ fill: \"red\", shape: \"ring\", text: msg.exportableresults.dataType + \" matched ENUM\" });\n            msg.exportableresults.values.forEach(element => {\n                if (flow.get(deviceID + element) == theData)\n                {\n                    validMeasurement = true;\n                }\n            })\n        }\n        else if (theData === null)\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched null data\" });\n            nullData = true;\n        }\n        else\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched nonstandardtype\" });\n            nonStandardType = true;\n        }\n    } //if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    else\n    {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"measurement type mismatch\" });\n        measurementTypeMismatch = true;\n    } //else  if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n}//if(msg.exportableresults.hasOwnProperty('dataType'))\nelse\n{\n    validMeasurement = true;\n}// else      if(msg.exportableresults.hasOwnProperty('dataType')) else\n\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\", \"PhysicalDigitalRegular\"]\nfor (innerIndex = 0; innerIndex < commonTags.length; innerIndex++)\n{\n    if (msg.exportableresults.hasOwnProperty(commonTags[innerIndex]))\n    {\n        tagsObj[commonTags[innerIndex]] = msg.exportableresults[commonTags[innerIndex]]\n    } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n} //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    //node.warn(\"94 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"113 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"123 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n\n//put the object into the payload\nmsg.payload = combinedObj;\n\n//build the status to be shown on the status of the subnode\nmsg.status = msg.exportableresults.DeviceName + \": \" + typeOfMeasurement + \": \" + theData;\n\n/* MQTT section \n * \n * \n * \n */\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = msg.exportableresults.MQTTname +\"/\"+msg.exportableresults.DeviceName+\"/\"+ msg.exportableresults.Measure\n//add the data to be recorded to MQTT\nmsg2.payload = theData\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nif (!nullData) {\n    return [msg, msg2]\n}\ndebugger\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n","outputs":2,"noerr":0,"x":2260,"y":1820,"wires":[["6d73c854.2a6298","1565ca4c.3889e6","59e8cc23.21b694"],["5db0edb2.6097e4","9dac4fa2.a532e"]]},{"id":"6d73c854.2a6298","type":"debug","z":"f9a34738.f12c28","name":"4.1 Output 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2530,"y":1740,"wires":[]},{"id":"5db0edb2.6097e4","type":"debug","z":"f9a34738.f12c28","name":"4.2 Output 2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2530,"y":1920,"wires":[]},{"id":"1565ca4c.3889e6","type":"influxdb out","z":"f9a34738.f12c28","influxdb":"39dac4b7.0333ac","name":"","measurement":"Smarthome","precision":"","retentionPolicy":"","x":2650,"y":1780,"wires":[]},{"id":"59e8cc23.21b694","type":"change","z":"f9a34738.f12c28","name":"Move Status to Payload for Consumption by Status Node","rules":[{"t":"set","p":"payload","pt":"msg","to":"status","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2670,"y":1820,"wires":[["4ec4a915.b1cc78"]]},{"id":"9dac4fa2.a532e","type":"mqtt out","z":"f9a34738.f12c28","name":"Write reading to MQTT","topic":"","qos":"1","retain":"true","broker":"a5bf81ee.27852","x":2560,"y":1860,"wires":[]},{"id":"4ec4a915.b1cc78","type":"debug","z":"f9a34738.f12c28","name":"4.3 Output  For Status node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3040,"y":1820,"wires":[]},{"id":"59213915.3a4ac8","type":"debug","z":"f9a34738.f12c28","name":"flow 1 temp no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2650,"y":1220,"wires":[]},{"id":"9ced7b16.74d468","type":"debug","z":"f9a34738.f12c28","name":"flow 1 Need to update the Devices Table","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2720,"y":1300,"wires":[]},{"id":"1bdba9bd.133746","type":"function","z":"f9a34738.f12c28","name":"Give Descriptive name to this function node","func":"if (msg.keyvalues.Measurement.includes(\"/\"))\n{msg.keyvalues.Measurement = msg.keyvalues.Measurement.substring(msg.keyvalues.Measurement.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2470,"y":1480,"wires":[["93cb2b85.b51968","c63c54d9.489498"]]},{"id":"b160c06c.fb41f","type":"debug","z":"f9a34738.f12c28","name":"before","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2310,"y":1320,"wires":[]},{"id":"c63c54d9.489498","type":"debug","z":"f9a34738.f12c28","name":"after","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2390,"y":1380,"wires":[]},{"id":"711cd60d.0fd568","type":"debug","z":"f9a34738.f12c28","name":"2 Need to update MeasurementTranslations Table","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3670,"y":1560,"wires":[]},{"id":"e0d5c4b0.096618","type":"debug","z":"f9a34738.f12c28","name":"flow 3 output","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1930,"y":1760,"wires":[]},{"id":"72c499c6.a8c2d8","type":"debug","z":"f9a34738.f12c28","name":"flow 3 SS settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4010,"y":1480,"wires":[]},{"id":"cb7f3d05.97917","type":"ui_worldmap","z":"1a0aa13a.9d7b8f","group":"c7810244.5e40a","order":1,"width":"17","height":"14","name":"Common Map","lat":"33.110554","lon":"-96.790415","zoom":"7","layer":"OSM grey","cluster":"","maxage":"","usermenu":"hide","layers":"show","panit":"false","panlock":"false","zoomlock":"false","hiderightclick":"true","coords":"none","showgrid":"false","path":"/worldmapF","x":1680,"y":40,"wires":[]},{"id":"ab6529c.1531ed8","type":"function","z":"d663491c.25a828","name":"Determine Source For Gsheet lookup properties.","func":"//Read subflow input variables\nif (env.get(\"OverrideEnvVariables\"))\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse if (msg.IgnoreEnvVar)\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse\n{\n    var ColStart = env.get(\"ColStart\");\n    var ColEnd = env.get(\"ColEnd\");\n    var FirstRow = env.get(\"MinRow\");\n    var LastRow = env.get(\"MaxRow\");\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = env.get(\"Spreadsheet ID\");\n    msg.tab = env.get(\"TabName\");\n    msg.cellstart = ColStart + FirstRow\n    msg.cellend = ColEnd + LastRow\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n    //These 2 are needed later to calculate the last populate and first empty rows and columns\n    msg.ColStart = ColStart\n    msg.MinRow = FirstRow\n}\nreturn msg;","outputs":1,"noerr":0,"x":260,"y":20,"wires":[["d5c913da.267c4","28b6a2fb.e1756e"]],"info":"This node sets up the inputs to the GSheet node.\nThe outputs that make up those inputs are:\n - msg.sheet -the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n - msg.topic - the combination of spreadsheet tab and cell range\n## Note\nThere are 2 very similar booleans evaluated by this node. They are:\n * **OverrideEnvVariables** - This one looks at the environment variable that was set in the flow triggering the subflow\n * **msg.IgnoreEnvVar** - This one is allows the logic to be driven by a message object property and thus can be set at runtime or earlier in the flow based on upstream logic\n\nFirst it checks the boolean value of the **OverrideEnvVariables** environment variable. This is by default false. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming the first was false, it checks the boolean value of the **msg.IgnoreEnvVar** value. This will evaluated as false if not populated, so sending false is unnecessary. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming both are false, then it can build the outputs based on the subflows environment variables. These can either be those set in the calling flow or they may be the default ones built into the subflow.\n\nRegardless of the method used to build the output, the node also removes the input message properties.\n\n\n\nmsg.IgnoreEnvVar"},{"id":"d5c913da.267c4","type":"GSheet","z":"d663491c.25a828","creds":"adb4e9b8.8beee8","method":"get","action":"","sheet":"","cells":"","name":"Read Input from GSheet","x":610,"y":20,"wires":[["f99ba293.afaa9"]],"info":"Use the GSheet node to get the a set of rows from a google spreadsheet.\n\n# **Inputs**\n### **creds**\nThis is the name on the gauth configuration node. How to get the details is beyond the scope of what I am going to put into an individual node instance. Some details are at [node-red-contrib-google-sheets](https://flows.nodered.org/node/node-red-contrib-google-sheets)\n### **Method**\nIn this case using the get cells method to read a set of data.\n### **SpreadsheetID**\nUnused as the spreadsheet ID is passed in as part of the input msg, but if needed it would be the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n### **Cells**\nUnused as the requested cells are passed in as part of the input msg, but if it was being manually built for a static data source the format is made of of 3 parts with specific seperators:\n * **[Sheetname]** like Sheet1\n * **[upper left corner cell address]** like A1\n * **[lower right corner cell address]** like B2\n\nThe format is **[Sheetname]**!**[upper left corner cell address]**:**[lower right corner cell address]** giving an input like **Sheet1!A1:B2**\n "},{"id":"c158a83c.8db538","type":"comment","z":"d663491c.25a828","name":"Error","info":"","x":1090,"y":20,"wires":[]},{"id":"d1e8278b.2143f8","type":"comment","z":"d663491c.25a828","name":"Last Populated Row","info":"","x":1130,"y":100,"wires":[]},{"id":"a4266569.899ef8","type":"function","z":"d663491c.25a828","name":"Prepare Output Parts","func":"/*\n * Row response calculations\n */\nmsg.LastPopulatedRow = msg.payload.length + msg.MinRow - 1\nmsg.FirstEmptyRow = msg.LastPopulatedRow + 1\n\n/*\n *Column response calculation variables\n */\nlet colCount = 1 //number of columns wide from the data retrieved. This will eventually be replace by logic that loops through array find the max width for any given row\nlet index\nlet sheetdata = msg.payload //this is the data that is returned from Google that will then be examined\nlet fCol = msg.ColStart\nlet fColTotal = 0 //to hold the column number\nlet nCol = \"\"   //nCol is new column\nlet lCol = \"\"   //lCol is last column in the range (to be populated from the actual Gsheet calls data)\n\nfCol = fCol.toUpperCase()\n/*\n * validate fCol (done)\n */\nlet validStartCol = false\nvalidStartCol = ((fCol.length == 1) ||\n                ((fCol.substr(0, 1).charCodeAt(0) - 64) < 9) ||\n                (((fCol.substr(0, 1).charCodeAt(0) - 64) == 9) && ((fCol.substr(1, 1).charCodeAt(0) - 64) <= 22)))\n/*\n *Column response calculations\n */\n//look at each row that is an array\nfor (index = 0; index < sheetdata.length; index++)\n{\n    if (Array.isArray(sheetdata[index]))\n    {\n        // when the rows width is greater than any of the previous rows set the column count to the new largest width\n        colCount = Math.max(colCount, sheetdata[index].length)\n    } //if (Array.isArray(sheetdata[index]))\n}  //for (index = 0; index < sheetdata.length; index++)\nswitch (fCol.length) {\n    case 1:\n        fColTotal = (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    case 2:\n        fColTotal = (fCol.substr(1, 1).charCodeAt(0) - 64) + 26 * (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    default:\n        fColTotal = -1\n}\n//Last Populated Column and First Empty Column calculation\nif ((fColTotal <= 25) && (fColTotal >= 1)) {\n    lCol = String.fromCharCode(fColTotal+64)\n    nCol = String.fromCharCode(fColTotal+65)\n} else if (fColTotal == 26) {\n    lCol = \"Z\"\n    nCol = \"AA\"\n} else if (fColTotal >= 27) {\n    lCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 64)\n    nCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 65)\n} else if (fColTotal == -1) {\n    lCol = \"Error\"\n    nCol = \"Error\"\n    //Probably worth putting real error here, but deferred\n} else if (fColTotal == 256) {\n    lCol = \"IV\"\n    nCol = \"None\"\n}\nmsg.LastPopulatedCol = lCol\nmsg.FirstEmptyCol = nCol\nmsg.SpreadsheetArray = msg.payload\nreturn msg;","outputs":1,"noerr":0,"x":560,"y":540,"wires":[["4d35b8ed.52e478","33c4567d.d9c6ca","1aa4aac9.9051a5","b6ba033f.ff1c7","c4235ad0.b726a8","c4d8e16c.be2b1"]],"info":"Takes an input from the Gsheet node and calculates a variety of details about the spreadsheet info.\n### **Output**\nmsg.LastPopulatedRow\nmsg.FirstEmptyRow\nmsg.LastPopulatedCol\nmsg.FirstEmptyCol\nmsg.SpreadsheetArray\n"},{"id":"daf68b5e.96f058","type":"comment","z":"d663491c.25a828","name":"First Empty Row","info":"","x":1120,"y":180,"wires":[]},{"id":"aecc8ba0.89e908","type":"comment","z":"d663491c.25a828","name":"Last Populated Column","info":"","x":1140,"y":260,"wires":[]},{"id":"6bbd303f.a258b","type":"comment","z":"d663491c.25a828","name":"First Empty Column","info":"","x":1130,"y":340,"wires":[]},{"id":"e199a049.ef594","type":"comment","z":"d663491c.25a828","name":"Spreadsheet Array","info":"","x":1130,"y":420,"wires":[]},{"id":"7b1285e2.f18eec","type":"comment","z":"d663491c.25a828","name":"Full Data","info":"","x":1100,"y":500,"wires":[]},{"id":"40772db6.b81354","type":"comment","z":"d663491c.25a828","name":"Full Data with Inputs","info":"","x":1130,"y":580,"wires":[]},{"id":"4d35b8ed.52e478","type":"change","z":"d663491c.25a828","name":"Leave Outputs","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":840,"y":540,"wires":[[]],"info":"Deletes a variety of message properties, but leaves all of them that were calculated about the Gsheet nodes results to be returned on the designated subflow output."},{"id":"33c4567d.d9c6ca","type":"change","z":"d663491c.25a828","name":"Leave Last Populated Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":140,"wires":[[]],"info":"Copies msg.theLastPopulatedRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"1aa4aac9.9051a5","type":"change","z":"d663491c.25a828","name":"Leave First Empty Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":220,"wires":[[]],"info":"Copies msg.FirstEmptyRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"b6ba033f.ff1c7","type":"change","z":"d663491c.25a828","name":"Leave Last Populated Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":300,"wires":[[]],"info":"Copies msg.LastPopulatedCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"c4235ad0.b726a8","type":"change","z":"d663491c.25a828","name":"Leave First Empty Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":380,"wires":[[]],"info":"Copies msg.FirstEmptyCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"c4d8e16c.be2b1","type":"change","z":"d663491c.25a828","name":"Leave Spreadsheet Array","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"SpreadsheetArray","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":460,"wires":[[]],"info":"Copies msg.SpreadsheetArray into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"91eb7f22.8f9e2","type":"trigger","z":"d663491c.25a828","op1":"","op2":"timeout","op1type":"nul","op2type":"str","duration":"10","extend":true,"units":"s","reset":"","bytopic":"all","name":"Watchdog","x":600,"y":140,"wires":[["b6ba033f.ff1c7","33c4567d.d9c6ca","c4235ad0.b726a8","c4d8e16c.be2b1","4d35b8ed.52e478"]],"info":"This trigger node works as a watchdog to see if the request to see if the read of the Google Sheet that was triggered on the other branch is successful. If it is succeful, then it will receive a reset message (msg.reset) from the Reset Watchdog node. If, however, 10 seconds elapse without receiving the reset message, this node sends a timeout message (msg.timeout)."},{"id":"28b6a2fb.e1756e","type":"change","z":"d663491c.25a828","name":"","rules":[{"t":"set","p":"timeout","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":420,"y":120,"wires":[["91eb7f22.8f9e2"]],"info":"Labels what the initial input to the watchdog trigger node is."},{"id":"fdc51889.336ec8","type":"change","z":"d663491c.25a828","name":"","rules":[{"t":"delete","p":"reset","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":540,"wires":[["a4266569.899ef8"]],"info":"Removes msg.reset that was only intended for the watchdog trigger node."},{"id":"4d8a4132.a5994","type":"catch","z":"d663491c.25a828","name":"Catch and Relay Errors","scope":null,"uncaught":false,"x":860,"y":60,"wires":[[]],"info":"Passes any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default."},{"id":"f99ba293.afaa9","type":"change","z":"d663491c.25a828","name":"Reset Watchdog","rules":[{"t":"set","p":"reset","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":140,"y":140,"wires":[["91eb7f22.8f9e2","fdc51889.336ec8"]],"info":"Sends the reset message to the watchdog triger node when there is output from the Gsheet node."},{"id":"a63fda24.b68788","type":"function","z":"cddaccaf.e0a04","name":"Db Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":389,"wires":[["1e91ae7e.712612"]],"info":"# **What** #\nThis is a simple function node that stores the msg.payload into a global variable. This is done in a function node, however, because the name of that global variable is passed into the function as a the value of msg.globalsource. \n\n## **Why**\nNormally this would be done in a change node, but change nodes could not as of May 2020 take a msg object component as the name of the global variable to be set."},{"id":"8669bfb4.15683","type":"subflow:d663491c.25a828","z":"cddaccaf.e0a04","name":"","env":[],"x":580,"y":189,"wires":[[],[],[],[],[],[],["a63fda24.b68788"],[]],"info":"This subflow shows information in the environment variables. These are good for testing purposes, but it is noteworthy that the override boolean is false. Unless that boolean is changed, they have no impact."},{"id":"1e91ae7e.712612","type":"function","z":"cddaccaf.e0a04","name":"Db Use input to lookup info","func":"//Ref. TMS-000001\n\n//if(msg.exportableresults.DeviceName !== \"Switch_Ikea\") {return}\n\n\n\n//1 Get must have items: searchKeys, searchValues, searchResultKeys, cachedSearch, cacheTime\n\nlet searchKeys = Object.keys(msg.keyvalues)\nlet searchValues = Object.values(msg.keyvalues)\nlet searchResultKeys = Object.keys(msg.searchfor)\nlet cachedSearch = global.get(\"LastSearch\")\nlet cacheTime = new Date().getTime()\n//2 create working variables searchKeyIndices, searchResultKeysIndices, index, cacheKey\nlet searchResultKeysIndices = []\nlet index\nlet cacheObject\n//3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\ncacheObject = BuildCacheObject(searchKeys, searchValues, searchResultKeys)\n//4\n/*\n * 4.1 t/f cached result is usable\n    *  4.1.true then t/f does it meet criteria\n        * 4.1.true.true\ttrue msg.searchfor = cachedSearch.searchfor\n        * 4.1.true.false do the common lookup\n    *   4.1.false  do the common lookup\n    */\n//4.1\nif (cachedSearch !== undefined)\n{\n    //4.1.true\n    if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    {\n        //4.1.true.true\n        msg.searchfor = cachedSearch.searchfor\n        return [msg, null, null]\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    //4.1.true.false\n    else\n    {\n        //4.1.true.false\n        lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n        //return results from the node on 1 of the 3 outputs\n        if (lookupResults[0] !== null)\n        {\n            return [lookupResults[0], null, null]\n        } //if (lookupResults[0] !== null)\n        else if (lookupResults[1] !== null)\n        {\n            return [null, lookupResults[1], null]\n        } //else if (lookupResults[1] !== null)\n        else\n        {\n            return [null, null, lookupResults[2]]\n        } //else if (lookupResults[1] !== null) else\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000)) else\n} //if (cachedSearch !== undefined)\n//4.1.false\nelse\n{\n    //4.1.false\n    lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n    //return results from the node on 1 of the 3 outputs\n    if (lookupResults[0] !== null)\n    {\n        return [lookupResults[0], null, null]\n    } //if (lookupResults[0] !== null)\n    else if (lookupResults[1] !== null)\n    {\n        return [null, lookupResults[1], null]\n    } //else if (lookupResults[1] !== null)\n    else\n    {\n        return [null, null, lookupResults[2]]\n    } //else if (lookupResults[1] !== null) else\n} //if (cachedSearch !== undefined) else\nreturn\n\nfunction BuildCacheObject(searchKeysArray, SearchValuesArray, SearchResultKeysArray) {\n    //3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\n    let newCacheKey =\"\"\n    for (index = 0; index < searchKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + searchKeysArray[index] + SearchValuesArray[index]\n    } //for (index = 0; index < searchKeysArray.length; index++)\n    //add all fields that will be looked for into the cache key\n    for (index = 0; index < SearchResultKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + SearchResultKeysArray[index]\n    } //for (index = 0; index < SearchResultKeysArray.length; index++)\n    //combine the cache key and the cache time into a single object that can be compared with the cached last search\n    let createdCacheObject = \n    {\n        query: newCacheKey,\n        time: cacheTime\n    }\n    return createdCacheObject\n}\nfunction CommonLookup(workingMsg, keysForSearchColumn, keysForResultColumn, valuesSearchedFor, requestedDataTable, passedCacheObject) {\n    let searchKeyIndices = []\n    let searchResultKeysIndices = []\n    let outerIndex\n    let innerLoopCounter\n    let innerIndex\n    let index\n    if (requestedDataTable !== undefined)\n    {\n        // iterate through all search keys.\n        //outer index is the place along the array of search keys\n        for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchKeyIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    //////////////////////////////////////////////////////////////////////////break may be a problem. Maybe swap inner and outer arrays and then do some if then about getting through the whole data headers without finding. Right now it only looks for 1 failure\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    //this is accumulating how many times the search key did not match one of the data table headers\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                                workingMsg.searchErrorCount++\n                        }\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        }\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        }\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        }\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        //if this point is reached, searchKeyIndices has been populated\n        // iterate through all search result keys.\n        //outer index is the place along the array of search keys \n        for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchResultKeysIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                            workingMsg.searchErrorCount++\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        } //if (workingMsg.searchErrorCount > 1)\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        } //if (workingMsg.searchErrorCount > 1) else\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        //if this point is reached, both searchKeyIndices and searchResultKeysIndices have been populated\n        //loop through all search keys, 1 index at a time and filter to a row that has the desired data in the desired column\n        let result = []\n        let pushable\n        pushable = false\n        for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        {\n            for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            {\n                if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                {\n                    pushable = true\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                else\n                {\n                    pushable = false\n                    break\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n            } //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            if (pushable)\n            {\n                result.push(requestedDataTable[outerIndex])\n            } //if (pushable)\n    \n    } //for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        //if this point is reached then there is a filtered table\n        //debugger\n        if (result.length === 0)\n        {\n            workingMsg.error = \"After filtering no data rows were left.\"\n            //either create and populate the error count at 1 or increment it if it already exists\n            if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            {\n                workingMsg.searchErrorCount++\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            else\n            {\n                workingMsg.searchErrorCount = 1\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n            //return the error on the middle there is an error output,\n            //this retry is in case the column was added to the google sheet since it was last loaded into node red\n            if (workingMsg.searchErrorCount > 1)\n            {\n                //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                return [null, null, workingMsg]\n            } //if (workingMsg.searchErrorCount > 1)\n            else\n            {\n                //return the error on the middle there is an error output,\n                return [null, workingMsg, null]\n            } //if (workingMsg.searchErrorCount > 1) else\n        } //if (result.length === 0)\n        else if (result.length > 1)\n        {\n            //do the warning that multiple were found but will take the first\n            node.warn(\"Multiple rows were found that matched the search criteria. Results are from the first row that was found and matched.\")\n        } //else if (result.length > 1)\n        //look up the data\n        for (index = 0; index < searchResultKeysIndices.length; index++)\n        {\n            //workingMsg.searchfor.keysForSearchColumn[index] = result[0][searchResultKeysIndices]\n            // the almost working version\n            workingMsg.searchfor[keysForResultColumn[index]] = result[0][searchResultKeysIndices[index]]\n        } //for (index = 0; index < searchResultKeysIndices.length; index++)\n        //if this point is reached then work workingMsg contains complete info\n        //build and save the LastSearch obect\n        passedCacheObject.searchfor = workingMsg.searchfor\n        global.set(\"LastSearch\", passedCacheObject)\n        return [workingMsg, null, null]\n    } //if (requestedDataTable !== undefined)\n    else\n    {\n        //return on second output to trigger population of global that feeds datatable\n        //put some details on this configuration into the msg to be output\n        workingMsg.error = \"The data normally loaded from google sheet was not loaded.\"\n        //either create and populate the error count at 1 or increment it if it already exists\n        if (workingMsg.hasOwnProperty('searchErrorCount'))\n        {\n            workingMsg.searchErrorCount++\n        } //if (workingMsg.hasOwnProperty('searchErrorCount'))\n        else\n        {\n            workingMsg.searchErrorCount = 1\n        } //if (workingMsg.hasOwnProperty('searchErrorCount')) else\n        //return the error on the middle there is an error output,\n        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n        if (workingMsg.searchErrorCount > 1)\n        {\n            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n            return [null, null, workingMsg]\n        } //if (workingMsg.searchErrorCount > 1)\n        else\n        {\n            //return the error on the middle there is an error output,\n            return [null, workingMsg, null]\n        } //if (workingMsg.searchErrorCount > 1) else\n    } //if (requestedDataTable !== undefined) else\n}","outputs":3,"noerr":0,"x":240,"y":80,"wires":[[],["8669bfb4.15683"],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"],"info":"# **Conceptual Explanation**\nThis node is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows.\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the node has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria. Normally it is used to trigger loading the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure."},{"id":"99a43603.1f3328","type":"change","z":"cddaccaf.e0a04","name":"Devices table, 1 search key with variable input, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":980,"y":100,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"5b511db9.6e3bd4","type":"change","z":"cddaccaf.e0a04","name":"Devices table, 1 search key, 2 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Motion_Ikea","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":180,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Motion_Ikea\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** and **\"Manufacturer\"** columns."},{"id":"5459312e.049ec","type":"change","z":"cddaccaf.e0a04","name":"Devices table, 1 search key, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":60,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"**. Notice unlike some examples this includes a space in the value. This has no negative impact.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column."},{"id":"cdd33185.e861d","type":"change","z":"cddaccaf.e0a04","name":"Devices table, 2 search keys, 1 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"keyvalues.Manufacturer","pt":"msg","to":"homebridge-people-geofence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":140,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"** and the **\"Manufacturer\"** column for the value **\"homebridge-people-geofence\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** columns."},{"id":"c4351cbb.ba6ca","type":"comment","z":"cddaccaf.e0a04","name":"Examples of preformating the inputs","info":"","x":920,"y":20,"wires":[]},{"id":"946fff3b.7f3d8","type":"change","z":"cddaccaf.e0a04","name":"Spreadsheet Lookup Settings Example","rules":[{"t":"set","p":"IgnoreEnvVar ","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":260,"wires":[[]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"7484904a.4832f","type":"debug","z":"cddaccaf.e0a04","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":160,"y":240,"wires":[]},{"id":"aa70c695.8d4248","type":"comment","z":"cddaccaf.e0a04","name":"Maybe insert check of how long since last Google read and skip step","info":"","x":520,"y":140,"wires":[]},{"id":"9226bcdd.22d13","type":"hb-status","z":"ff6040a4.0af3a","name":"Downstairs Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1480,"wires":[["813e3d4b.f9652"]]},{"id":"1f1110a2.bc948f","type":"config","z":"ff6040a4.0af3a","name":"HB001 Anyone Presence","properties":[{"p":"HB001Floor","pt":"flow","to":"","tot":"str"},{"p":"HB001Location","pt":"flow","to":"","tot":"str"},{"p":"HB001Room","pt":"flow","to":"","tot":"str"},{"p":"HB001DeviceType","pt":"flow","to":"Presence","tot":"str"},{"p":"HB001Manufacturer","pt":"flow","to":"homebridge-people-geofence","tot":"str"},{"p":"HB001AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB001PhysicalVirtualType","pt":"flow","to":"Virtual","tot":"str"},{"p":"HB001PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB001House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB001MQTTDeviceTopic","pt":"flow","to":"Anyone Present","tot":"str"},{"p":"HB001OccupancyDetected","pt":"flow","to":"10TF","tot":"str"}],"active":true,"x":170,"y":720,"wires":[]},{"id":"fe56f119.8e86b","type":"config","z":"ff6040a4.0af3a","name":"HB002 Downstairs Carbon Monoxide","properties":[{"p":"HB002Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB002Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB002Room","pt":"flow","to":"Mini-Hall","tot":"str"},{"p":"HB002DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB002Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB002AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB002PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB002PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB002House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB002MQTTDeviceTopic","pt":"flow","to":"Downwstair Hall Nest Protect","tot":"str"},{"p":"HB002CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB002StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB002StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB002ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":210,"y":1479,"wires":[]},{"id":"e0063a02.a35008","type":"comment","z":"ff6040a4.0af3a","name":"Presence Sensors","info":"","x":150,"y":680,"wires":[]},{"id":"2f798463.23074c","type":"comment","z":"ff6040a4.0af3a","name":"Placeholder Kathy Home","info":"","x":170,"y":960,"wires":[]},{"id":"6faf09e5.95e288","type":"link in","z":"ff6040a4.0af3a","name":"Jump In","links":["3264f899.8879a8","33682101.3212be","415e85f.bbf397c","813e3d4b.f9652","91fbb3e.bdc265"],"x":1430,"y":780,"wires":[["50982242.373c1c","62252422.94e54c"]],"l":true},{"id":"38f45a8.5354ba6","type":"hb-status","z":"ff6040a4.0af3a","name":"Anyone","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerAnyone00000086","conf":"df59aa47.b26148","x":680,"y":700,"wires":[["3264f899.8879a8"]]},{"id":"415e85f.bbf397c","type":"link out","z":"ff6040a4.0af3a","name":"Go To Jump In","links":["6faf09e5.95e288"],"x":1020,"y":2260,"wires":[],"l":true},{"id":"ce3795c5.e37728","type":"hb-status","z":"ff6040a4.0af3a","name":"Downstairs Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Motion00000085","conf":"df59aa47.b26148","x":690,"y":2520,"wires":[["33682101.3212be"]]},{"id":"26c717da.a357a8","type":"config","z":"ff6040a4.0af3a","name":"HB003 Downstairs Motion Sensor","properties":[{"p":"HB003Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB003Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB003Room","pt":"flow","to":"Mini-Hall","tot":"str"},{"p":"HB003DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB003Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB003AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB003PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB003PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB003House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB003MQTTDeviceTopic","pt":"flow","to":"Downwstair Hall Nest Protect","tot":"str"},{"p":"HB003MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":2520,"wires":[]},{"id":"46f0a2ef.c5843c","type":"hb-status","z":"ff6040a4.0af3a","name":"Downstairs Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3200,"wires":[["91fbb3e.bdc265"]]},{"id":"b29d097e.0d9208","type":"config","z":"ff6040a4.0af3a","name":"HB004 Downstairs Smoke","properties":[{"p":"HB004Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB004Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB004Room","pt":"flow","to":"Mini-Hall","tot":"str"},{"p":"HB004DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB004Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB004AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB004PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB004PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB004House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB004MQTTDeviceTopic","pt":"flow","to":"Downwstair Hall Nest Protect","tot":"str"},{"p":"HB004SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB004StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB004StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB004ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":170,"y":3200,"wires":[]},{"id":"49c85fa.13f89a","type":"hb-status","z":"ff6040a4.0af3a","name":"Gratuity Thermostat - Eco Mode","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Eco Mode00000049","conf":"df59aa47.b26148","x":730,"y":2160,"wires":[["415e85f.bbf397c"]]},{"id":"6da09ee0.35225","type":"config","z":"ff6040a4.0af3a","name":"HB005 Gratuity Thermostat Eco ","properties":[{"p":"HB005Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB005Location","pt":"flow","to":"North","tot":"str"},{"p":"HB005Room","pt":"flow","to":"Upstairs Hall","tot":"str"},{"p":"HB005DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"HB005Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB005AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB005PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB005PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB005House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB005MQTTDeviceTopic","pt":"flow","to":"Nest Thermostat Eco Mode","tot":"str"},{"p":"HB005On","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":2160,"wires":[]},{"id":"3548cebc.d4f4a2","type":"hb-status","z":"ff6040a4.0af3a","name":"Gratuity Thermostat - Fan","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Fan","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Fan00000040","conf":"df59aa47.b26148","x":710,"y":2240,"wires":[["415e85f.bbf397c"]]},{"id":"38e9e817.f85d68","type":"config","z":"ff6040a4.0af3a","name":"HB006 Gratuity Thermostat Fan","properties":[{"p":"HB006Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB006Location","pt":"flow","to":"North","tot":"str"},{"p":"HB006Room","pt":"flow","to":"Upstairs Hall","tot":"str"},{"p":"HB006DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"HB006Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB006AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB006PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB006PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB006House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB006MQTTDeviceTopic","pt":"flow","to":"Nest Thermostat Fan Mode","tot":"str"},{"p":"HB006On","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":2240,"wires":[]},{"id":"4e24a6e2.9b75a8","type":"hb-status","z":"ff6040a4.0af3a","name":"Gratuity Thermostat","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Thermostat","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat0000004A","conf":"df59aa47.b26148","x":690,"y":2320,"wires":[["415e85f.bbf397c"]]},{"id":"31e93136.abf15e","type":"config","z":"ff6040a4.0af3a","name":"HB007 Gratuity Thermostat","properties":[{"p":"HB007Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB007Location","pt":"flow","to":"North","tot":"str"},{"p":"HB007Room","pt":"flow","to":"Upstairs Hall","tot":"str"},{"p":"HB007DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"HB007Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB007AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB007PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB007PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB007House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB007MQTTDeviceTopic","pt":"flow","to":"Nest Thermostat","tot":"str"},{"p":"HB007CurrentHeatingCoolingState","pt":"flow","to":"NestThMap","tot":"str"},{"p":"HB007TargetHeatingCoolingState","pt":"flow","to":"NestThMap","tot":"str"},{"p":"HB007CurrentTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007TargetTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007TemperatureDisplayUnits","pt":"flow","to":"012CF","tot":"str"},{"p":"HB007CurrentRelativeHumidity","pt":"flow","to":"null","tot":"str"},{"p":"HB007CoolingThresholdTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007HeatingThresholdTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB007FanTimerActive","pt":"flow","to":"null","tot":"str"},{"p":"HB007FanTimerDuration","pt":"flow","to":"null","tot":"str"},{"p":"HB007HasLeaf","pt":"flow","to":"null","tot":"str"},{"p":"HB007SunlightCorrectionEnabled","pt":"flow","to":"null","tot":"str"},{"p":"HB007SunlightCorrectionActive","pt":"flow","to":"null","tot":"str"},{"p":"HB007UsingEmergencyHeat","pt":"flow","to":"null","tot":"str"}],"active":true,"x":180,"y":2320,"wires":[]},{"id":"f4ffc67c.e30ea8","type":"config","z":"ff6040a4.0af3a","name":"HB009 Mike Home Presence","properties":[{"p":"HB009Floor","pt":"flow","to":"","tot":"str"},{"p":"HB009Location","pt":"flow","to":"","tot":"str"},{"p":"HB009Room","pt":"flow","to":"","tot":"str"},{"p":"HB009DeviceType","pt":"flow","to":"Presence","tot":"str"},{"p":"HB009Manufacturer","pt":"flow","to":"homebridge-people-geofence","tot":"str"},{"p":"HB009AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB009PhysicalVirtualType","pt":"flow","to":"Virtual","tot":"str"},{"p":"HB009PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB009House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB009MQTTDeviceTopic","pt":"flow","to":"Mike Home","tot":"str"},{"p":"HB009OccupancyDetected","pt":"flow","to":"10TF","tot":"str"}],"active":true,"x":180,"y":800,"wires":[]},{"id":"a42d087f.d2b358","type":"hb-status","z":"ff6040a4.0af3a","name":"Mike iPhone Home","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerMike iPhone Home00000086","conf":"df59aa47.b26148","x":710,"y":780,"wires":[["3264f899.8879a8"]]},{"id":"a5b3ac13.2f71b","type":"comment","z":"ff6040a4.0af3a","name":"Placeholder Eva Home","info":"","x":160,"y":1040,"wires":[]},{"id":"5f2771e5.62b02","type":"comment","z":"ff6040a4.0af3a","name":"Placeholder Eva LTHS","info":"","x":160,"y":1120,"wires":[]},{"id":"7f6b1d0c.801024","type":"comment","z":"ff6040a4.0af3a","name":"Placeholder Eva CTE","info":"","x":160,"y":1200,"wires":[]},{"id":"769bbcae.38e534","type":"comment","z":"ff6040a4.0af3a","name":"Placeholder Eva Dance","info":"","x":160,"y":1280,"wires":[]},{"id":"fbed7fe4.3fc7c","type":"comment","z":"ff6040a4.0af3a","name":"Placeholder Kathy Dance","info":"","x":170,"y":1360,"wires":[]},{"id":"7ee703e7.a4254c","type":"comment","z":"ff6040a4.0af3a","name":"Placeholder Mike Work","info":"","x":160,"y":880,"wires":[]},{"id":"86296406.c08bc8","type":"comment","z":"ff6040a4.0af3a","name":"Nest Protect CO","info":"","x":140,"y":1440,"wires":[]},{"id":"cd66026b.82cd9","type":"hb-status","z":"ff6040a4.0af3a","name":"Eva Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1560,"wires":[["813e3d4b.f9652"]]},{"id":"5773e9d.6b83818","type":"config","z":"ff6040a4.0af3a","name":"HB010 Eva Hallway Carbon Monoxide","properties":[{"p":"HB010Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB010Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB010Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB010DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB010Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB010AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB010PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB010PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB010House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB010MQTTDeviceTopic","pt":"flow","to":"Eva Hallway Nest Protect","tot":"str"},{"p":"HB010CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB010StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB010StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB010ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":210,"y":1560,"wires":[]},{"id":"534c050d.261e4c","type":"hb-status","z":"ff6040a4.0af3a","name":"Evas Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1640,"wires":[["813e3d4b.f9652"]]},{"id":"ce8d8a9b.bdc698","type":"config","z":"ff6040a4.0af3a","name":"HB011 Eva's Bedroom Carbon Monoxide","properties":[{"p":"HB011Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB011Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB011Room","pt":"flow","to":"Eva's Room","tot":"str"},{"p":"HB011DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB011Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB011AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB011PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB011PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB011House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB011MQTTDeviceTopic","pt":"flow","to":"Eva's Bedroom Nest Protect","tot":"str"},{"p":"HB011CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB011StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB011StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB011ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":220,"y":1640,"wires":[]},{"id":"3a5ed4d3.c1351c","type":"hb-status","z":"ff6040a4.0af3a","name":"Game Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1720,"wires":[["813e3d4b.f9652"]]},{"id":"a0622033.a679f","type":"config","z":"ff6040a4.0af3a","name":"HB012 Game Room Carbon Monoxide","properties":[{"p":"HB012Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB012Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB012Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB012DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB012Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB012AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB012PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB012PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB012House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB012MQTTDeviceTopic","pt":"flow","to":"Game Room Nest Protect","tot":"str"},{"p":"HB012CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB012StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB012StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB012ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":210,"y":1720,"wires":[]},{"id":"3cd984ea.0880dc","type":"hb-status","z":"ff6040a4.0af3a","name":"Guest Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1800,"wires":[["813e3d4b.f9652"]]},{"id":"ac1fd4f2.120f58","type":"config","z":"ff6040a4.0af3a","name":"HB013 Guest Bedroom Carbon Monoxide","properties":[{"p":"HB013Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB013Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB013Room","pt":"flow","to":"Guest Room","tot":"str"},{"p":"HB013DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB013Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB013AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB013PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB013PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB013House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB013MQTTDeviceTopic","pt":"flow","to":"Guest Room Nest Protect","tot":"str"},{"p":"HB013CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB013StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB013StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB013ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":220,"y":1800,"wires":[]},{"id":"a0086d61.d3f3","type":"hb-status","z":"ff6040a4.0af3a","name":"Master Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1880,"wires":[["813e3d4b.f9652"]]},{"id":"e6d81bf5.159148","type":"config","z":"ff6040a4.0af3a","name":"HB014 Master Bedroom Carbon Monoxide","properties":[{"p":"HB014Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB014Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB014Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"HB014DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB014Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB014AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB014PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB014PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB014House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB014MQTTDeviceTopic","pt":"flow","to":"Master Bedroom Nest Protect","tot":"str"},{"p":"HB014CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB014StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB014StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB014ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":230,"y":1880,"wires":[]},{"id":"8c6f74ef.9f8928","type":"hb-status","z":"ff6040a4.0af3a","name":"Toy Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":700,"y":1960,"wires":[["813e3d4b.f9652"]]},{"id":"8442cc2a.99fb1","type":"config","z":"ff6040a4.0af3a","name":"HB015 Toy Room Carbon Monoxide","properties":[{"p":"HB015Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB015Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB015Room","pt":"flow","to":"Toy Room","tot":"str"},{"p":"HB015DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB015Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB015AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB015PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB015PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB015House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB015MQTTDeviceTopic","pt":"flow","to":"Toy Room Nest Protect","tot":"str"},{"p":"HB015CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB015StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB015StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB015ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":1960,"wires":[]},{"id":"f8e3a581.85b9d8","type":"hb-status","z":"ff6040a4.0af3a","name":"Toy Room Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":730,"y":2040,"wires":[["813e3d4b.f9652"]]},{"id":"db84eb3f.172a38","type":"config","z":"ff6040a4.0af3a","name":"HB016 Toy Room Hallway Carbon Monoxide","properties":[{"p":"HB016Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB016Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB016Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB016DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB016Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB016AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB016PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB016PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB016House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB016MQTTDeviceTopic","pt":"flow","to":"Toy Room Hallway Nest Protect","tot":"str"},{"p":"HB016CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB016StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB016StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB016ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":230,"y":2040,"wires":[]},{"id":"813e3d4b.f9652","type":"link out","z":"ff6040a4.0af3a","name":"Go To Jump In","links":["6faf09e5.95e288"],"x":1140,"y":1800,"wires":[],"l":true},{"id":"3264f899.8879a8","type":"link out","z":"ff6040a4.0af3a","name":"Go To Jump In","links":["6faf09e5.95e288"],"x":940,"y":760,"wires":[],"l":true},{"id":"33682101.3212be","type":"link out","z":"ff6040a4.0af3a","name":"Go To Jump In","links":["6faf09e5.95e288"],"x":1040,"y":2800,"wires":[],"l":true},{"id":"c7e14b8e.1343e8","type":"hb-status","z":"ff6040a4.0af3a","name":"Eva Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Motion00000085","conf":"df59aa47.b26148","x":690,"y":2600,"wires":[["33682101.3212be"]]},{"id":"245b547a.2b1c7c","type":"hb-status","z":"ff6040a4.0af3a","name":"Evas Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2680,"wires":[["33682101.3212be"]]},{"id":"b3ea379b.64c0c8","type":"hb-status","z":"ff6040a4.0af3a","name":"Guest Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Motion00000085","conf":"df59aa47.b26148","x":710,"y":2840,"wires":[["33682101.3212be"]]},{"id":"7c74e84f.1b53f8","type":"hb-status","z":"ff6040a4.0af3a","name":"Master Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Motion00000085","conf":"df59aa47.b26148","x":710,"y":2920,"wires":[["33682101.3212be"]]},{"id":"2de8623c.341f8e","type":"hb-status","z":"ff6040a4.0af3a","name":"Toy Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Motion00000085","conf":"df59aa47.b26148","x":690,"y":3000,"wires":[["33682101.3212be"]]},{"id":"4cab8d95.958f64","type":"hb-status","z":"ff6040a4.0af3a","name":"Toy Room Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Motion00000085","conf":"df59aa47.b26148","x":710,"y":3080,"wires":[["33682101.3212be"]]},{"id":"572711c0.50553","type":"config","z":"ff6040a4.0af3a","name":"HB017 Eva Hallway Motion Sensor","properties":[{"p":"HB017Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB017Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB017Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB017DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB017Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB017AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB017PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB017PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB017House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB017MQTTDeviceTopic","pt":"flow","to":"Eva Hallway Nest Protect","tot":"str"},{"p":"HB017MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":2600,"wires":[]},{"id":"40869fa8.bcbd4","type":"config","z":"ff6040a4.0af3a","name":"HB018 Eva's Bedroom Motion Sensor","properties":[{"p":"HB018Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB018Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB018Room","pt":"flow","to":"Eva's Room","tot":"str"},{"p":"HB018DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB018Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB018AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB018PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB018PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB018House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB018MQTTDeviceTopic","pt":"flow","to":"Eva's Bedroom Nest Protect","tot":"str"},{"p":"HB018MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":210,"y":2680,"wires":[]},{"id":"fe68bfd3.940b5","type":"config","z":"ff6040a4.0af3a","name":"HB020 Guest Room Motion Sensor","properties":[{"p":"HB020Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB020Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB020Room","pt":"flow","to":"Guest Room","tot":"str"},{"p":"HB020DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB020Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB020AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB020PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB020PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB020House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB020MQTTDeviceTopic","pt":"flow","to":"Guest Room Nest Protect","tot":"str"},{"p":"HB020MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":2840,"wires":[]},{"id":"ba773c09.780f2","type":"config","z":"ff6040a4.0af3a","name":"HB021 Master Bedroom Motion Sensor","properties":[{"p":"HB021Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB021Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB021Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"HB021DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB021Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB021AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB021PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB021PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB021House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB021MQTTDeviceTopic","pt":"flow","to":"Master Bedroom Nest Protect","tot":"str"},{"p":"HB021MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":220,"y":2920,"wires":[]},{"id":"9babc1bf.cd14c","type":"config","z":"ff6040a4.0af3a","name":"HB022 Toy Room Motion Sensor","properties":[{"p":"HB022Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB022Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB022Room","pt":"flow","to":"Toy Room","tot":"str"},{"p":"HB022DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB022Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB022AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB022PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB022PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB022House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB022MQTTDeviceTopic","pt":"flow","to":"Toy Room Nest Protect","tot":"str"},{"p":"HB022MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":3000,"wires":[]},{"id":"e536e989.eed2f8","type":"config","z":"ff6040a4.0af3a","name":"HB023 Toy Room Hallway Motion Sensor","properties":[{"p":"HB023Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB023Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB023Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB023DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB023Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB023AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB023PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB023PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB023House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB023MQTTDeviceTopic","pt":"flow","to":"Toy Room Hallway Nest Protect","tot":"str"},{"p":"HB023MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":220,"y":3080,"wires":[]},{"id":"302cfe9e.33a6b2","type":"hb-status","z":"ff6040a4.0af3a","name":"Game Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Motion00000085","conf":"df59aa47.b26148","x":700,"y":2760,"wires":[["33682101.3212be"]]},{"id":"56c46b6a.f4d804","type":"config","z":"ff6040a4.0af3a","name":"HB019 GameRoom Motion Sensor","properties":[{"p":"HB019Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB019Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB019Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB019DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB019Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB019AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB019PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB019PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB019House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB019MQTTDeviceTopic","pt":"flow","to":"Game Room Nest Protect","tot":"str"},{"p":"HB019MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":2760,"wires":[]},{"id":"c138ea88.a29a08","type":"comment","z":"ff6040a4.0af3a","name":"Nest Protect Smoke","info":"","x":150,"y":3160,"wires":[]},{"id":"91fbb3e.bdc265","type":"link out","z":"ff6040a4.0af3a","name":"Go To Jump In","links":["6faf09e5.95e288"],"x":1260,"y":3500,"wires":[],"l":true},{"id":"117f33b3.9e8cec","type":"hb-status","z":"ff6040a4.0af3a","name":"Eva Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3280,"wires":[["91fbb3e.bdc265"]]},{"id":"b82b5a72.cdf928","type":"config","z":"ff6040a4.0af3a","name":"HB024 Eva Hallway Smoke","properties":[{"p":"HB024Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB024Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB024Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB024DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB024Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB024AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB024PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB024PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB024House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB024MQTTDeviceTopic","pt":"flow","to":"Eva Hallway Nest Protect","tot":"str"},{"p":"HB024SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB024StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB024StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB024ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":180,"y":3280,"wires":[]},{"id":"98a26761.a381f8","type":"hb-status","z":"ff6040a4.0af3a","name":"Evas Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3360,"wires":[["91fbb3e.bdc265"]]},{"id":"2b556a8a.1eb996","type":"config","z":"ff6040a4.0af3a","name":"HB025 Evas Bedroom Smoke","properties":[{"p":"HB025Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB025Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB025Room","pt":"flow","to":"Eva's Room","tot":"str"},{"p":"HB025DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB025Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB025AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB025PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB025PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB025House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB025MQTTDeviceTopic","pt":"flow","to":"Eva's Bedroom Nest Protect","tot":"str"},{"p":"HB025SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB025StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB025StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB025ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":3360,"wires":[]},{"id":"bbbd08cf.b8a6b8","type":"hb-status","z":"ff6040a4.0af3a","name":"Game Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3440,"wires":[["91fbb3e.bdc265"]]},{"id":"973baf2e.84ff5","type":"config","z":"ff6040a4.0af3a","name":"HB026 Game Room Smoke","properties":[{"p":"HB026Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB026Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB026Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB026DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB026Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB026AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB026PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB026PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB026House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB026MQTTDeviceTopic","pt":"flow","to":"Game Room Nest Protect","tot":"str"},{"p":"HB026SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB026StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB026StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB026ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":180,"y":3440,"wires":[]},{"id":"2a9e3a0d.2fd3d6","type":"hb-status","z":"ff6040a4.0af3a","name":"Guest Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3520,"wires":[["91fbb3e.bdc265"]]},{"id":"cc747607.780658","type":"config","z":"ff6040a4.0af3a","name":"HB027 Guest Bedroom Smoke","properties":[{"p":"HB027Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB027Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB027Room","pt":"flow","to":"Guest Room","tot":"str"},{"p":"HB027DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB027Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB027AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB027PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB027PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB027House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB027MQTTDeviceTopic","pt":"flow","to":"Guest Room Nest Protect","tot":"str"},{"p":"HB027SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB027StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB027StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB027ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":3520,"wires":[]},{"id":"22389c16.e79774","type":"hb-status","z":"ff6040a4.0af3a","name":"Master Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3600,"wires":[["91fbb3e.bdc265"]]},{"id":"46469130.281cf","type":"config","z":"ff6040a4.0af3a","name":"HB028 Master Bedroom Smoke","properties":[{"p":"HB028Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB028Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB028Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"HB028DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB028Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB028AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB028PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB028PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB028House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB028MQTTDeviceTopic","pt":"flow","to":"Master Bedroom Nest Protect","tot":"str"},{"p":"HB028SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB028StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB028StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB028ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":3600,"wires":[]},{"id":"607645ac.933e8c","type":"hb-status","z":"ff6040a4.0af3a","name":"Toy Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3680,"wires":[["91fbb3e.bdc265"]]},{"id":"f93c936.40f367","type":"config","z":"ff6040a4.0af3a","name":"HB029 Toy Room Smoke","properties":[{"p":"HB029Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB029Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB029Room","pt":"flow","to":"Toy Room","tot":"str"},{"p":"HB029DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB029Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB029AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB029PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB029PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB029House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB029MQTTDeviceTopic","pt":"flow","to":"Toy Room Nest Protect","tot":"str"},{"p":"HB029SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB029StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB029StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB029ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":170,"y":3680,"wires":[]},{"id":"a18ab6b7.0783d8","type":"hb-status","z":"ff6040a4.0af3a","name":"Toy Room Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3760,"wires":[["91fbb3e.bdc265"]]},{"id":"6d8fa1a7.a2274","type":"config","z":"ff6040a4.0af3a","name":"HB030 Toy Room Hallway Smoke","properties":[{"p":"HB030Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB030Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB030Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB030DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB030Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB030AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB030PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB030PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB030House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB030MQTTDeviceTopic","pt":"flow","to":"Toy Room Hallway Nest Protect","tot":"str"},{"p":"HB030SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB030StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB030StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB030ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":200,"y":3760,"wires":[]},{"id":"e5f02930.1455b8","type":"comment","z":"ff6040a4.0af3a","name":"Nest Thermostat","info":"","x":140,"y":2120,"wires":[]},{"id":"53f413b7.c3ca5c","type":"hb-status","z":"ff6040a4.0af3a","name":"Eve Motion Passthrough","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerEve Motion Passthrough00000049","conf":"df59aa47.b26148","x":710,"y":2440,"wires":[["33682101.3212be"]]},{"id":"bceb7f20.10bbf","type":"config","z":"ff6040a4.0af3a","name":"HB031 Eve Motion Passthrough","properties":[{"p":"HB031Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB031Location","pt":"flow","to":"South by Doorway","tot":"str"},{"p":"HB031Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB031DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB031Manufacturer","pt":"flow","to":"Eve","tot":"str"},{"p":"HB031AccessProtocol","pt":"flow","to":"Bluetooth","tot":"str"},{"p":"HB031PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB031PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB031House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB031MQTTDeviceTopic","pt":"flow","to":"Eve Motion Sensor","tot":"str"},{"p":"HB031On","pt":"flow","to":"null","tot":"str"}],"active":true,"x":190,"y":2440,"wires":[]},{"id":"8f457a2c.105938","type":"comment","z":"ff6040a4.0af3a","name":"Motion Sensors","info":"","x":140,"y":2400,"wires":[]},{"id":"912e5f45.6f58a","type":"hb-event","z":"ff6040a4.0af3a","name":"Eve Motion Passthrough","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerEve Motion Passthrough00000049","conf":"df59aa47.b26148","x":710,"y":2480,"wires":[["33682101.3212be"]]},{"id":"534db29a.f9e40c","type":"hb-event","z":"ff6040a4.0af3a","name":"Gratuity Thermostat","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Thermostat","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat0000004A","conf":"df59aa47.b26148","x":690,"y":2360,"wires":[["415e85f.bbf397c"]]},{"id":"6dbf5f60.4be7e","type":"hb-event","z":"ff6040a4.0af3a","name":"Gratuity Thermostat - Fan","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Fan","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Fan00000040","conf":"df59aa47.b26148","x":710,"y":2280,"wires":[["415e85f.bbf397c"]]},{"id":"c4ccfbf4.b745a8","type":"hb-event","z":"ff6040a4.0af3a","name":"Gratuity Thermostat - Eco Mode","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Eco Mode00000049","conf":"df59aa47.b26148","x":730,"y":2200,"wires":[["415e85f.bbf397c"]]},{"id":"1d5fbd69.3b3ad3","type":"hb-event","z":"ff6040a4.0af3a","name":"Downstairs Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Motion00000085","conf":"df59aa47.b26148","x":690,"y":2560,"wires":[["33682101.3212be"]]},{"id":"76c84d5f.4005c4","type":"hb-event","z":"ff6040a4.0af3a","name":"Eva Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Motion00000085","conf":"df59aa47.b26148","x":690,"y":2640,"wires":[["33682101.3212be"]]},{"id":"7a765e24.48c12","type":"hb-event","z":"ff6040a4.0af3a","name":"Evas Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2720,"wires":[["33682101.3212be"]]},{"id":"8b3bed0f.80b47","type":"hb-event","z":"ff6040a4.0af3a","name":"Game Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Motion00000085","conf":"df59aa47.b26148","x":690,"y":2800,"wires":[["33682101.3212be"]]},{"id":"11fbffc2.5a6cd","type":"hb-event","z":"ff6040a4.0af3a","name":"Guest Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2880,"wires":[["33682101.3212be"]]},{"id":"d828c685.f90988","type":"hb-event","z":"ff6040a4.0af3a","name":"Master Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2960,"wires":[["33682101.3212be"]]},{"id":"ac024ecb.f6245","type":"hb-event","z":"ff6040a4.0af3a","name":"Toy Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Motion00000085","conf":"df59aa47.b26148","x":680,"y":3040,"wires":[["33682101.3212be"]]},{"id":"9a7c2ddd.12c32","type":"hb-event","z":"ff6040a4.0af3a","name":"Toy Room Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Motion00000085","conf":"df59aa47.b26148","x":710,"y":3120,"wires":[["33682101.3212be"]]},{"id":"477e32e2.b9179c","type":"hb-event","z":"ff6040a4.0af3a","name":"Downstairs Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3240,"wires":[["91fbb3e.bdc265"]]},{"id":"4d4c8921.50a488","type":"hb-event","z":"ff6040a4.0af3a","name":"Eva Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3320,"wires":[["91fbb3e.bdc265"]]},{"id":"df6a6faa.d2385","type":"hb-event","z":"ff6040a4.0af3a","name":"Evas Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3400,"wires":[["91fbb3e.bdc265"]]},{"id":"9d85201f.a99a4","type":"hb-event","z":"ff6040a4.0af3a","name":"Game Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3480,"wires":[["91fbb3e.bdc265"]]},{"id":"fc78ed7d.328e4","type":"hb-event","z":"ff6040a4.0af3a","name":"Guest Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3560,"wires":[["91fbb3e.bdc265"]]},{"id":"201c4c8.f670fb4","type":"hb-event","z":"ff6040a4.0af3a","name":"Master Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3640,"wires":[["91fbb3e.bdc265"]]},{"id":"50cfb55e.1cf7fc","type":"hb-event","z":"ff6040a4.0af3a","name":"Toy Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Smoke00000087","conf":"df59aa47.b26148","x":680,"y":3720,"wires":[["91fbb3e.bdc265"]]},{"id":"1d688ea0.304451","type":"hb-event","z":"ff6040a4.0af3a","name":"Toy Room Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3800,"wires":[["91fbb3e.bdc265"]]},{"id":"271afcd6.54a884","type":"hb-event","z":"ff6040a4.0af3a","name":"Downstairs Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":700,"y":1520,"wires":[["813e3d4b.f9652"]]},{"id":"c80f99e5.33dd98","type":"hb-event","z":"ff6040a4.0af3a","name":"Eva Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1600,"wires":[["813e3d4b.f9652"]]},{"id":"ba5794aa.cab4a8","type":"hb-event","z":"ff6040a4.0af3a","name":"Evas Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1680,"wires":[["813e3d4b.f9652"]]},{"id":"de752558.7bacf8","type":"hb-event","z":"ff6040a4.0af3a","name":"Game Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1760,"wires":[["813e3d4b.f9652"]]},{"id":"c0450549.0ec828","type":"hb-event","z":"ff6040a4.0af3a","name":"Guest Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1840,"wires":[["813e3d4b.f9652"]]},{"id":"b8963e.10b969c","type":"hb-event","z":"ff6040a4.0af3a","name":"Master Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1920,"wires":[["813e3d4b.f9652"]]},{"id":"8b34dc98.072a5","type":"hb-event","z":"ff6040a4.0af3a","name":"Toy Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":700,"y":2000,"wires":[["813e3d4b.f9652"]]},{"id":"606ad1d8.6d526","type":"hb-event","z":"ff6040a4.0af3a","name":"Toy Room Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":2080,"wires":[["813e3d4b.f9652"]]},{"id":"e0346e16.f3f95","type":"hb-event","z":"ff6040a4.0af3a","name":"Anyone","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerAnyone00000086","conf":"df59aa47.b26148","x":670,"y":740,"wires":[["3264f899.8879a8"]]},{"id":"7b7e8ff6.c561b","type":"hb-event","z":"ff6040a4.0af3a","name":"Mike iPhone Home","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerMike iPhone Home00000086","conf":"df59aa47.b26148","x":710,"y":820,"wires":[["3264f899.8879a8"]]},{"id":"4acb0da3.b878e4","type":"link out","z":"ff6040a4.0af3a","name":"Go To Prepopulate When Triggered","links":["37b4b528.bf198a","5df71ba.d86bee4","c90c2460.01ede8","e3365ba2.d7d5b8","ee848dbe.73a9b"],"x":240,"y":40,"wires":[],"l":true},{"id":"ee848dbe.73a9b","type":"link in","z":"ff6040a4.0af3a","name":"Prepopulate","links":["4acb0da3.b878e4"],"x":510,"y":740,"wires":[["38f45a8.5354ba6","a42d087f.d2b358"]],"l":true},{"id":"37b4b528.bf198a","type":"link in","z":"ff6040a4.0af3a","name":"Prepopulate","links":["4acb0da3.b878e4"],"x":430,"y":1760,"wires":[["9226bcdd.22d13","cd66026b.82cd9","534c050d.261e4c","3a5ed4d3.c1351c","3cd984ea.0880dc","a0086d61.d3f3","8c6f74ef.9f8928","f8e3a581.85b9d8"]],"l":true},{"id":"5df71ba.d86bee4","type":"link in","z":"ff6040a4.0af3a","name":"Prepopulate","links":["4acb0da3.b878e4"],"x":450,"y":2240,"wires":[["49c85fa.13f89a","3548cebc.d4f4a2","4e24a6e2.9b75a8"]],"l":true},{"id":"e3365ba2.d7d5b8","type":"link in","z":"ff6040a4.0af3a","name":"Prepopulate","links":["4acb0da3.b878e4"],"x":450,"y":2800,"wires":[["53f413b7.c3ca5c","ce3795c5.e37728","c7e14b8e.1343e8","245b547a.2b1c7c","302cfe9e.33a6b2","b3ea379b.64c0c8","7c74e84f.1b53f8","2de8623c.341f8e","4cab8d95.958f64"]],"l":true},{"id":"c90c2460.01ede8","type":"link in","z":"ff6040a4.0af3a","name":"Prepopulate","links":["4acb0da3.b878e4"],"x":450,"y":3480,"wires":[["46f0a2ef.c5843c","117f33b3.9e8cec","98a26761.a381f8","bbbd08cf.b8a6b8","2a9e3a0d.2fd3d6","22389c16.e79774","607645ac.933e8c","a18ab6b7.0783d8"]],"l":true},{"id":"f4d270e1.7080e","type":"comment","z":"ff6040a4.0af3a","name":"after major overhaul version","info":"","x":1660,"y":680,"wires":[]},{"id":"2ec78936.808116","type":"subflow:ff6040a4.0af3a","z":"54cae49c.6ee04c","name":"","env":[],"x":730,"y":260,"wires":[]},{"id":"50982242.373c1c","type":"debug","z":"ff6040a4.0af3a","name":"Homebridge Everything","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1630,"y":780,"wires":[]},{"id":"daba477c.d0b948","type":"function","z":"b6874b18.031658","name":"Determine Source For Gsheet lookup properties.","func":"//Read subflow input variables\nif (env.get(\"OverrideEnvVariables\"))\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse if (msg.IgnoreEnvVar)\n{\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = msg.SpreadsheetID;\n    msg.tab = msg.Tab;\n    msg.cellstart = msg.ColStart + msg.MinRow;\n    msg.cellend = msg.ColEnd + msg.MaxRow;\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n}\nelse\n{\n    var ColStart = env.get(\"ColStart\");\n    var ColEnd = env.get(\"ColEnd\");\n    var FirstRow = env.get(\"MinRow\");\n    var LastRow = env.get(\"MaxRow\");\n    //Put inputs and read values into msg properties to be visible downstream\n    msg.sheet = env.get(\"Spreadsheet ID\");\n    msg.tab = env.get(\"TabName\");\n    msg.cellstart = ColStart + FirstRow\n    msg.cellend = ColEnd + LastRow\n    msg.targetrange = msg.tab+\"!\"+msg.cellstart+\":\"+msg.cellend\n    msg.topic = msg.targetrange\n    delete msg.Tab\n    delete msg.SpreadsheetID\n    delete msg.ColEnd\n    delete msg.MaxRow\n    delete msg.IgnoreEnvVar\n    delete msg.tab\n    delete msg.cellstart\n    delete msg.cellend\n    delete msg.targetrange\n    //These 2 are needed later to calculate the last populate and first empty rows and columns\n    msg.ColStart = ColStart\n    msg.MinRow = FirstRow\n}\nreturn msg;","outputs":1,"noerr":0,"x":260,"y":20,"wires":[["9f2afd8e.d93aa","1bb2c264.b76e9e"]],"info":"This node sets up the inputs to the GSheet node.\nThe outputs that make up those inputs are:\n - msg.sheet -the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n - msg.topic - the combination of spreadsheet tab and cell range\n## Note\nThere are 2 very similar booleans evaluated by this node. They are:\n * **OverrideEnvVariables** - This one looks at the environment variable that was set in the flow triggering the subflow\n * **msg.IgnoreEnvVar** - This one is allows the logic to be driven by a message object property and thus can be set at runtime or earlier in the flow based on upstream logic\n\nFirst it checks the boolean value of the **OverrideEnvVariables** environment variable. This is by default false. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming the first was false, it checks the boolean value of the **msg.IgnoreEnvVar** value. This will evaluated as false if not populated, so sending false is unnecessary. If it is true, it builds the outputs from the following inputs:\n - msg.SpreadsheetID\n - msg.Tab\n - msg.ColStart\n - msg.MinRow\n - msg.ColEnd\n - msg.MaxRow\n\nAssuming both are false, then it can build the outputs based on the subflows environment variables. These can either be those set in the calling flow or they may be the default ones built into the subflow.\n\nRegardless of the method used to build the output, the node also removes the input message properties.\n\n\n\nmsg.IgnoreEnvVar"},{"id":"9f2afd8e.d93aa","type":"GSheet","z":"b6874b18.031658","creds":"adb4e9b8.8beee8","method":"get","action":"","sheet":"","cells":"","name":"Read Input from GSheet","x":610,"y":20,"wires":[["9490535.22439b"]],"info":"Use the GSheet node to get the a set of rows from a google spreadsheet.\n\n# **Inputs**\n### **creds**\nThis is the name on the gauth configuration node. How to get the details is beyond the scope of what I am going to put into an individual node instance. Some details are at [node-red-contrib-google-sheets](https://flows.nodered.org/node/node-red-contrib-google-sheets)\n### **Method**\nIn this case using the get cells method to read a set of data.\n### **SpreadsheetID**\nUnused as the spreadsheet ID is passed in as part of the input msg, but if needed it would be the long spreadsheet identifier that can be pulled from the spreadsheet's URL when editing it using Google Sheets.\n### **Cells**\nUnused as the requested cells are passed in as part of the input msg, but if it was being manually built for a static data source the format is made of of 3 parts with specific seperators:\n * **[Sheetname]** like Sheet1\n * **[upper left corner cell address]** like A1\n * **[lower right corner cell address]** like B2\n\nThe format is **[Sheetname]**!**[upper left corner cell address]**:**[lower right corner cell address]** giving an input like **Sheet1!A1:B2**\n "},{"id":"b4f70be3.1a30e8","type":"comment","z":"b6874b18.031658","name":"Error","info":"","x":1090,"y":20,"wires":[]},{"id":"39bfc825.8a9748","type":"comment","z":"b6874b18.031658","name":"Last Populated Row","info":"","x":1130,"y":100,"wires":[]},{"id":"7c39f16.0e7151","type":"function","z":"b6874b18.031658","name":"Prepare Output Parts","func":"/*\n * Row response calculations\n */\nmsg.LastPopulatedRow = msg.payload.length + msg.MinRow - 1\nmsg.FirstEmptyRow = msg.LastPopulatedRow + 1\n\n/*\n *Column response calculation variables\n */\nlet colCount = 1 //number of columns wide from the data retrieved. This will eventually be replace by logic that loops through array find the max width for any given row\nlet index\nlet sheetdata = msg.payload //this is the data that is returned from Google that will then be examined\nlet fCol = msg.ColStart\nlet fColTotal = 0 //to hold the column number\nlet nCol = \"\"   //nCol is new column\nlet lCol = \"\"   //lCol is last column in the range (to be populated from the actual Gsheet calls data)\n\nfCol = fCol.toUpperCase()\n/*\n * validate fCol (done)\n */\nlet validStartCol = false\nvalidStartCol = ((fCol.length == 1) ||\n                ((fCol.substr(0, 1).charCodeAt(0) - 64) < 9) ||\n                (((fCol.substr(0, 1).charCodeAt(0) - 64) == 9) && ((fCol.substr(1, 1).charCodeAt(0) - 64) <= 22)))\n/*\n *Column response calculations\n */\n//look at each row that is an array\nfor (index = 0; index < sheetdata.length; index++)\n{\n    if (Array.isArray(sheetdata[index]))\n    {\n        // when the rows width is greater than any of the previous rows set the column count to the new largest width\n        colCount = Math.max(colCount, sheetdata[index].length)\n    } //if (Array.isArray(sheetdata[index]))\n}  //for (index = 0; index < sheetdata.length; index++)\nswitch (fCol.length) {\n    case 1:\n        fColTotal = (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    case 2:\n        fColTotal = (fCol.substr(1, 1).charCodeAt(0) - 64) + 26 * (fCol.substr(0, 1).charCodeAt(0) - 64)\n        fColTotal += colCount - 1\n        break\n    default:\n        fColTotal = -1\n}\n//Last Populated Column and First Empty Column calculation\nif ((fColTotal <= 25) && (fColTotal >= 1)) {\n    lCol = String.fromCharCode(fColTotal+64)\n    nCol = String.fromCharCode(fColTotal+65)\n} else if (fColTotal == 26) {\n    lCol = \"Z\"\n    nCol = \"AA\"\n} else if (fColTotal >= 27) {\n    lCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 64)\n    nCol = String.fromCharCode((Math.floor(fColTotal / 26)) + 64) + String.fromCharCode((fColTotal % 26) + 65)\n} else if (fColTotal == -1) {\n    lCol = \"Error\"\n    nCol = \"Error\"\n    //Probably worth putting real error here, but deferred\n} else if (fColTotal == 256) {\n    lCol = \"IV\"\n    nCol = \"None\"\n}\nmsg.LastPopulatedCol = lCol\nmsg.FirstEmptyCol = nCol\nmsg.SpreadsheetArray = msg.payload\nreturn msg;","outputs":1,"noerr":0,"x":560,"y":540,"wires":[["a801b477.ec11b8","79b3124e.18036c","56be010e.c2e1e","1a59a46b.8ee7cc","1ad4dcad.4bea93","d23fbda5.934a8"]],"info":"Takes an input from the Gsheet node and calculates a variety of details about the spreadsheet info.\n### **Output**\nmsg.LastPopulatedRow\nmsg.FirstEmptyRow\nmsg.LastPopulatedCol\nmsg.FirstEmptyCol\nmsg.SpreadsheetArray\n"},{"id":"f1b9899f.99c998","type":"comment","z":"b6874b18.031658","name":"First Empty Row","info":"","x":1120,"y":180,"wires":[]},{"id":"269ce5a2.a6736a","type":"comment","z":"b6874b18.031658","name":"Last Populated Column","info":"","x":1140,"y":260,"wires":[]},{"id":"2e057bf3.12f324","type":"comment","z":"b6874b18.031658","name":"First Empty Column","info":"","x":1130,"y":340,"wires":[]},{"id":"1b7f8428.b0bcdc","type":"comment","z":"b6874b18.031658","name":"Spreadsheet Array","info":"","x":1130,"y":420,"wires":[]},{"id":"36332c07.5d5fa4","type":"comment","z":"b6874b18.031658","name":"Full Data","info":"","x":1100,"y":500,"wires":[]},{"id":"f77a52ec.51d4a","type":"comment","z":"b6874b18.031658","name":"Full Data with Inputs","info":"","x":1130,"y":580,"wires":[]},{"id":"a801b477.ec11b8","type":"change","z":"b6874b18.031658","name":"Leave Outputs","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":840,"y":540,"wires":[[]],"info":"Deletes a variety of message properties, but leaves all of them that were calculated about the Gsheet nodes results to be returned on the designated subflow output."},{"id":"79b3124e.18036c","type":"change","z":"b6874b18.031658","name":"Leave Last Populated Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":140,"wires":[[]],"info":"Copies msg.theLastPopulatedRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"56be010e.c2e1e","type":"change","z":"b6874b18.031658","name":"Leave First Empty Row","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyRow","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":220,"wires":[[]],"info":"Copies msg.FirstEmptyRow into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"1a59a46b.8ee7cc","type":"change","z":"b6874b18.031658","name":"Leave Last Populated Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"LastPopulatedCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":300,"wires":[[]],"info":"Copies msg.LastPopulatedCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"1ad4dcad.4bea93","type":"change","z":"b6874b18.031658","name":"Leave First Empty Column","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"FirstEmptyCol","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":880,"y":380,"wires":[[]],"info":"Copies msg.FirstEmptyCol into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"d23fbda5.934a8","type":"change","z":"b6874b18.031658","name":"Leave Spreadsheet Array","rules":[{"t":"delete","p":"topic","pt":"msg"},{"t":"delete","p":"tab","pt":"msg"},{"t":"delete","p":"sheet","pt":"msg"},{"t":"delete","p":"cellstart","pt":"msg"},{"t":"delete","p":"cellend","pt":"msg"},{"t":"delete","p":"targetrange","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"set","p":"payload","pt":"msg","to":"SpreadsheetArray","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":460,"wires":[[]],"info":"Copies msg.SpreadsheetArray into msg.payload. It deletes all of the other msg properties leaving only the copied from and copied to properties that are then returned on the designated subflow output."},{"id":"f864fa61.279958","type":"trigger","z":"b6874b18.031658","op1":"","op2":"timeout","op1type":"nul","op2type":"str","duration":"10","extend":true,"units":"s","reset":"","bytopic":"all","name":"Watchdog","x":600,"y":140,"wires":[["1a59a46b.8ee7cc","79b3124e.18036c","1ad4dcad.4bea93","d23fbda5.934a8","a801b477.ec11b8"]],"info":"This trigger node works as a watchdog to see if the request to see if the read of the Google Sheet that was triggered on the other branch is successful. If it is succeful, then it will receive a reset message (msg.reset) from the Reset Watchdog node. If, however, 10 seconds elapse without receiving the reset message, this node sends a timeout message (msg.timeout)."},{"id":"1bb2c264.b76e9e","type":"change","z":"b6874b18.031658","name":"","rules":[{"t":"set","p":"timeout","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":420,"y":120,"wires":[["f864fa61.279958"]],"info":"Labels what the initial input to the watchdog trigger node is."},{"id":"1c7e4600.3399da","type":"change","z":"b6874b18.031658","name":"","rules":[{"t":"delete","p":"reset","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":540,"wires":[["7c39f16.0e7151"]],"info":"Removes msg.reset that was only intended for the watchdog trigger node."},{"id":"8f22cf12.4d74","type":"catch","z":"b6874b18.031658","name":"Catch and Relay Errors","scope":null,"uncaught":false,"x":860,"y":60,"wires":[["a892cfb8.e6e4e"]],"info":"Passes any caught error to the error subflows intentially built error output. By intentionally built I mean I created one and labelled it as such. This is not there by default."},{"id":"9490535.22439b","type":"change","z":"b6874b18.031658","name":"Reset Watchdog","rules":[{"t":"set","p":"reset","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":140,"y":140,"wires":[["f864fa61.279958","1c7e4600.3399da"]],"info":"Sends the reset message to the watchdog triger node when there is output from the Gsheet node."},{"id":"421be18e.abf21","type":"function","z":"11c4fe96.587e41","name":"Db Put the payload into a global variable named after the content of msg.globalsource","func":"global.set(msg.globalsource, msg.payload)\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":400,"wires":[["36c11796.981068"]],"info":"# **What** #\nThis is a simple function node that stores the msg.payload into a global variable. This is done in a function node, however, because the name of that global variable is passed into the function as a the value of msg.globalsource. \n\n## **Why**\nNormally this would be done in a change node, but change nodes could not as of May 2020 take a msg object component as the name of the global variable to be set."},{"id":"be3de0e3.494f8","type":"subflow:b6874b18.031658","z":"11c4fe96.587e41","name":"","env":[],"x":580,"y":189,"wires":[[],[],[],[],[],[],["421be18e.abf21"],[]],"info":"This subflow shows information in the environment variables. These are good for testing purposes, but it is noteworthy that the override boolean is false. Unless that boolean is changed, they have no impact."},{"id":"36c11796.981068","type":"function","z":"11c4fe96.587e41","name":"Db Use input to lookup info","func":"//Ref. TMS-000001\n\n//if(msg.exportableresults.DeviceName !== \"Switch_Ikea\") {return}\n\n\n\n//1 Get must have items: searchKeys, searchValues, searchResultKeys, cachedSearch, cacheTime\n//debugger\nlet searchKeys = Object.keys(msg.keyvalues)\nlet searchValues = Object.values(msg.keyvalues)\nlet searchResultKeys = Object.keys(msg.searchfor)\nlet cachedSearch = global.get(\"LastSearch\")\nlet cacheTime = new Date().getTime()\n//2 create working variables searchKeyIndices, searchResultKeysIndices, index, cacheKey\nlet searchResultKeysIndices = []\nlet index\nlet cacheObject\n//3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\ncacheObject = BuildCacheObject(searchKeys, searchValues, searchResultKeys)\n//4\n/*\n * 4.1 t/f cached result is usable\n    *  4.1.true then t/f does it meet criteria\n        * 4.1.true.true\ttrue msg.searchfor = cachedSearch.searchfor\n        * 4.1.true.false do the common lookup\n    *   4.1.false  do the common lookup\n    */\n//4.1\nif (cachedSearch !== undefined)\n{\n    //4.1.true\n    if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    {\n        //4.1.true.true\n        msg.searchfor = cachedSearch.searchfor\n        return [msg, null, null]\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000))\n    //4.1.true.false\n    else\n    {\n        //4.1.true.false\n        lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n        //return results from the node on 1 of the 3 outputs\n        if (lookupResults[0] !== null)\n        {\n            return [lookupResults[0], null, null]\n        } //if (lookupResults[0] !== null)\n        else if (lookupResults[1] !== null)\n        {\n            return [null, lookupResults[1], null]\n        } //else if (lookupResults[1] !== null)\n        else\n        {\n            return [null, null, lookupResults[2]]\n        } //else if (lookupResults[1] !== null) else\n    } //if ((cachedSearch.query == cacheObject.query) && (cachedSearch.time > cacheObject.time - 5000)) else\n} //if (cachedSearch !== undefined)\n//4.1.false\nelse\n{\n    //4.1.false\n    lookupResults = CommonLookup(msg, searchKeys, searchResultKeys, searchValues, global.get(msg.globalsource), cacheObject)\n    //return results from the node on 1 of the 3 outputs\n    if (lookupResults[0] !== null)\n    {\n        return [lookupResults[0], null, null]\n    } //if (lookupResults[0] !== null)\n    else if (lookupResults[1] !== null)\n    {\n        return [null, lookupResults[1], null]\n    } //else if (lookupResults[1] !== null)\n    else\n    {\n        return [null, null, lookupResults[2]]\n    } //else if (lookupResults[1] !== null) else\n} //if (cachedSearch !== undefined) else\nreturn\n\nfunction BuildCacheObject(searchKeysArray, SearchValuesArray, SearchResultKeysArray) {\n    //3 build the cache key which is essentially the concatenation of key+value+nextkey+nextvalue+.....etc\n    let newCacheKey =\"\"\n    for (index = 0; index < searchKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + searchKeysArray[index] + SearchValuesArray[index]\n    } //for (index = 0; index < searchKeysArray.length; index++)\n    //add all fields that will be looked for into the cache key\n    for (index = 0; index < SearchResultKeysArray.length; index++)\n    {\n        newCacheKey = newCacheKey + SearchResultKeysArray[index]\n    } //for (index = 0; index < SearchResultKeysArray.length; index++)\n    //combine the cache key and the cache time into a single object that can be compared with the cached last search\n    let createdCacheObject = \n    {\n        query: newCacheKey,\n        time: cacheTime\n    }\n    return createdCacheObject\n}\nfunction CommonLookup(workingMsg, keysForSearchColumn, keysForResultColumn, valuesSearchedFor, requestedDataTable, passedCacheObject) {\n    let searchKeyIndices = []\n    let searchResultKeysIndices = []\n    let outerIndex\n    let innerLoopCounter\n    let innerIndex\n    let index\n    if (requestedDataTable !== undefined)\n    {\n        // iterate through all search keys.\n        //outer index is the place along the array of search keys\n        for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchKeyIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    //////////////////////////////////////////////////////////////////////////break may be a problem. Maybe swap inner and outer arrays and then do some if then about getting through the whole data headers without finding. Right now it only looks for 1 failure\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    //this is accumulating how many times the search key did not match one of the data table headers\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                                workingMsg.searchErrorCount++\n                        }\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        }\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        }\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        }\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForSearchColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForSearchColumn.length; outerIndex++)\n        //if this point is reached, searchKeyIndices has been populated\n        // iterate through all search result keys.\n        //outer index is the place along the array of search keys \n        for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        {\n            //inner index is the place along the first row of data\n            //The innerLoopCounter must be reset each time a new key is being looked for\n            innerLoopCounter = 0\n            for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n            {\n                //these 2 loops will compare every entry in the top row of the data table to every entry in the array of search keys,\n                if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                {\n                    //when they match push the column number on to the array that has just indices for the search keys\n                    searchResultKeysIndices.push(innerIndex)\n                    //break is used to stop comparing as once the column has been found the remaining aren't relevant\n                    break\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex])\n                else\n                {\n                    //when they don't match, then this means there is a search key that does not match any header.\n                    //When properly configured this should not happen, but proper configuration cannot be guaranteed\n                    innerLoopCounter++\n                    //Error messaging should only happen if the search key has been compared with all of the headers\n                    //requestedDataTable[0].length gives the total number of data headers (columns of the spreadsheet)\n                    if (requestedDataTable[0].length == innerLoopCounter)\n                    {\n                        //populate error \n                        //put some details on this configuration into the msg to be output\n                        workingMsg.error = \"Key with value \\\"\" + keysForSearchColumn[outerIndex] + \"\\\" not found amongst the \" + (requestedDataTable[0].length + 1) + \" entries, which include \" + requestedDataTable[0]\n                        //either create and populate the error count at 1 or increment it if it already exists\n                        if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        {\n                            workingMsg.searchErrorCount++\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n                        else\n                        {\n                            workingMsg.searchErrorCount = 1\n                        } //if ( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n                        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n                        if (workingMsg.searchErrorCount > 1)\n                        {\n                            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                            return [null, null, workingMsg]\n                        } //if (workingMsg.searchErrorCount > 1)\n                        else\n                        {\n                            //return the error on the middle there is an error output,\n                            return [null, workingMsg, null]\n                        } //if (workingMsg.searchErrorCount > 1) else\n                    } //if (requestedDataTable[0].length == innerLoopCounter)\n                } //if (requestedDataTable[0][innerIndex] == keysForResultColumn[outerIndex]) else\n            } //for (innerIndex = 0; innerIndex < requestedDataTable[0].length; innerIndex++)\n        } //for (outerIndex = 0; outerIndex < keysForResultColumn.length; outerIndex++)\n        //if this point is reached, both searchKeyIndices and searchResultKeysIndices have been populated\n        //loop through all search keys, 1 index at a time and filter to a row that has the desired data in the desired column\n        let result = []\n        let pushable\n        pushable = false\n        for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        {\n            for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            {\n                if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                {\n                    pushable = true\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex])\n                else\n                {\n                    pushable = false\n                    break\n                } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n            } //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n            if (pushable)\n            {\n                result.push(requestedDataTable[outerIndex])\n            } //if (pushable)\n    \n    } //for (outerIndex = 0; outerIndex < requestedDataTable.length; outerIndex++)\n        //if this point is reached then there is a filtered table\n        //debugger\n        if (result.length === 0)\n        {\n            workingMsg.error = \"After filtering no data rows were left.\"\n            //either create and populate the error count at 1 or increment it if it already exists\n            if ( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            {\n                workingMsg.searchErrorCount++\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\"))\n            else\n            {\n                workingMsg.searchErrorCount = 1\n            } //( workingMsg.hasOwnProperty(\"searchErrorCount\")) else\n            //return the error on the middle there is an error output,\n            //this retry is in case the column was added to the google sheet since it was last loaded into node red\n            if (workingMsg.searchErrorCount > 1)\n            {\n                //return the error on the bottom because with a count of 2 that means reloading has already been tried\n                return [null, null, workingMsg]\n            } //if (workingMsg.searchErrorCount > 1)\n            else\n            {\n                //return the error on the middle there is an error output,\n                return [null, workingMsg, null]\n            } //if (workingMsg.searchErrorCount > 1) else\n        } //if (result.length === 0)\n        else if (result.length > 1)\n        {\n            //do the warning that multiple were found but will take the first\n            node.warn(\"Multiple rows were found that matched the search criteria. Results are from the first row that was found and matched.\")\n        } //else if (result.length > 1)\n        //look up the data\n        for (index = 0; index < searchResultKeysIndices.length; index++)\n        {\n            //workingMsg.searchfor.keysForSearchColumn[index] = result[0][searchResultKeysIndices]\n            // the almost working version\n            workingMsg.searchfor[keysForResultColumn[index]] = result[0][searchResultKeysIndices[index]]\n        } //for (index = 0; index < searchResultKeysIndices.length; index++)\n        //if this point is reached then work workingMsg contains complete info\n        //build and save the LastSearch obect\n        passedCacheObject.searchfor = workingMsg.searchfor\n        global.set(\"LastSearch\", passedCacheObject)\n        return [workingMsg, null, null]\n    } //if (requestedDataTable !== undefined)\n    else\n    {\n        //return on second output to trigger population of global that feeds datatable\n        //put some details on this configuration into the msg to be output\n        workingMsg.error = \"The data normally loaded from google sheet was not loaded.\"\n        //either create and populate the error count at 1 or increment it if it already exists\n        if (workingMsg.hasOwnProperty('searchErrorCount'))\n        {\n            workingMsg.searchErrorCount++\n        } //if (workingMsg.hasOwnProperty('searchErrorCount'))\n        else\n        {\n            workingMsg.searchErrorCount = 1\n        } //if (workingMsg.hasOwnProperty('searchErrorCount')) else\n        //return the error on the middle there is an error output,\n        //this retry is in case the column was added to the google sheet since it was last loaded into node red\n        if (workingMsg.searchErrorCount > 1)\n        {\n            //return the error on the bottom because with a count of 2 that means reloading has already been tried\n            return [null, null, workingMsg]\n        } //if (workingMsg.searchErrorCount > 1)\n        else\n        {\n            //return the error on the middle there is an error output,\n            return [null, workingMsg, null]\n        } //if (workingMsg.searchErrorCount > 1) else\n    } //if (requestedDataTable !== undefined) else\n}","outputs":3,"noerr":0,"x":240,"y":80,"wires":[[],["be3de0e3.494f8"],[]],"outputLabels":["Value Found","Error but try reloading from data source","Error despite having tried to reload from data source"],"info":"# **Conceptual Explanation**\nThis node is designed to use a 2-D array of data loaded from a google sheeet to lookup desired data. The data is arrayed with the first row being column headers describing the data in those columns in subsequent rows.\n## **inputs**\n### globalsource \nThe name of the global variable holding the table of data\n### msg.keyvalues\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row.\n### msg.searchfor\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. The value enters the node empty.\n## **outputs**\n### Output1: Value Found \nThis ouput is used when the node has successfully identified the requested data. That data is placed into the value portions of the key value pairs that made up the msg.searchfor input\n### Output 2: Error but try reloading from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria. Normally it is used to trigger loading the table from Google sheets under the expectation that either this is the first time a lookup has been tried an the data had not yet been cached in the global variable or potentially the data in the cache has become stale and reloading from the Google sheet will add a row that will match the requested search criteria.\n### Output 3: Error despite having tried to reload from data source\nThis output is used when either the global variable to contain the data table either does no exist or does not contain a row with all of the requested search criteria and at least 1 attempt has already been made to reload the global vairable cache. This is effectively a notification of non-recoverable lookup failure."},{"id":"ef98bece.d882d","type":"change","z":"11c4fe96.587e41","name":"Devices table, 1 search key with variable input, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":980,"y":100,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"d5cb8419.4eb818","type":"change","z":"11c4fe96.587e41","name":"Devices table, 1 search key, 2 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Motion_Ikea","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":180,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Motion_Ikea\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** and **\"Manufacturer\"** columns."},{"id":"f0932995.8f8988","type":"change","z":"11c4fe96.587e41","name":"Devices table, 1 search key, 1 result","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":60,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"**. Notice unlike some examples this includes a space in the value. This has no negative impact.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column."},{"id":"6c419292.c6197c","type":"change","z":"11c4fe96.587e41","name":"Devices table, 2 search keys, 1 results","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"Anyone Presence","tot":"str"},{"t":"set","p":"keyvalues.Manufacturer","pt":"msg","to":"homebridge-people-geofence","tot":"str"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":140,"wires":[[]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value **\"Anyone Presence\"** and the **\"Manufacturer\"** column for the value **\"homebridge-people-geofence\"**.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** columns."},{"id":"5c3eb982.7c5b28","type":"comment","z":"11c4fe96.587e41","name":"Examples of preformating the inputs","info":"","x":920,"y":20,"wires":[]},{"id":"e7340bae.af3d18","type":"change","z":"11c4fe96.587e41","name":"Spreadsheet Lookup Settings Example","rules":[{"t":"set","p":"IgnoreEnvVar ","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":260,"wires":[[]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"d9481b76.8ba9e8","type":"inject","z":"ff6040a4.0af3a","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":1480,"y":1120,"wires":[["62252422.94e54c"]]},{"id":"62252422.94e54c","type":"function","z":"ff6040a4.0af3a","name":"Rertrieve My HomebridgeTestingSample ","func":"msg = global.get(\"HomebridgeTestingSample\")\nreturn msg","outputs":1,"noerr":0,"x":1880,"y":1160,"wires":[["b73d3afd.66b528","3e29fad3.a58da6"]]},{"id":"b73d3afd.66b528","type":"debug","z":"ff6040a4.0af3a","name":"Catch My Testing Sample","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2250,"y":1160,"wires":[]},{"id":"3e29fad3.a58da6","type":"change","z":"ff6040a4.0af3a","name":"Put device ID into msg.deviceID and payload into payload.value","rules":[{"t":"set","p":"temp","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"set","p":"payload.value","pt":"msg","to":"temp","tot":"msg"},{"t":"delete","p":"temp","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"homebridge","tot":"str"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"name","tot":"msg"},{"t":"set","p":"payload.name","pt":"msg","to":"name","tot":"msg"},{"t":"set","p":"MQTTName","pt":"msg","to":"homebridgedev","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1870,"y":1240,"wires":[["1af3722c.e251de","60c7617d.b6c27"]]},{"id":"60c7617d.b6c27","type":"function","z":"ff6040a4.0af3a","name":"Split kv pairs (from value) into 1-n msg stream (ready for testing)","func":"///////////////////////////////////////////////////////////////////\n//debugger\n///////////////////////////////////////////////////////////////////\n/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value;\n                --msg.payload.value;\n            }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        if (typeof name === 'undefined') \n        {\n            latestMsg.payload.name = key;\n        } \n        else \n        {\n            latestMsg.payload.name = name + \"/\" + key;\n        }\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n//Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \"/\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":1870,"y":1280,"wires":[["a46d77f5.6318e8","affc9c3d.2e2f6"]]},{"id":"a46d77f5.6318e8","type":"change","z":"ff6040a4.0af3a","name":"18 rule large cleanup","rules":[{"t":"delete","p":"qos","pt":"msg"},{"t":"delete","p":"retain","pt":"msg"},{"t":"delete","p":"payload.dataType","pt":"msg"},{"t":"delete","p":"deviceID","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"MQTTName","tot":"msg"},{"t":"delete","p":"MQTTName","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"topic","tot":"msg"},{"t":"delete","p":"topic","pt":"msg"},{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"payload.value","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"Manufacturer","pt":"msg"},{"t":"delete","p":"_device","pt":"msg"},{"t":"delete","p":"_confId","pt":"msg"},{"t":"delete","p":"Homebridge","pt":"msg"},{"t":"delete","p":"_rawMessage","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"name","tot":"msg"},{"t":"delete","p":"name","pt":"msg"},{"t":"delete","p":"_rawEvent","pt":"msg"},{"t":"delete","p":"DeviceID","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1740,"y":1320,"wires":[["1ecb3d58.6a4893","6fe8076f.ff40f8"]]},{"id":"ab60a0df.ea47b","type":"link out","z":"ff6040a4.0af3a","name":"Get DeviceID","links":["8942bc71.61484"],"x":3130,"y":1320,"wires":[],"l":true},{"id":"1af3722c.e251de","type":"debug","z":"ff6040a4.0af3a","name":"Catch Post change 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2260,"y":1240,"wires":[]},{"id":"affc9c3d.2e2f6","type":"debug","z":"ff6040a4.0af3a","name":"Catch Stream Split","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2250,"y":1280,"wires":[]},{"id":"1ecb3d58.6a4893","type":"debug","z":"ff6040a4.0af3a","name":"Catch to send to get device","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2060,"y":1360,"wires":[]},{"id":"8942bc71.61484","type":"link in","z":"ff6040a4.0af3a","name":"Get DeviceID (Homekit, z2m)","links":["ab60a0df.ea47b"],"x":1640,"y":1520,"wires":[["1005c5c7.c1c29a"]],"l":true},{"id":"3f18e151.e33e3e","type":"link in","z":"ff6040a4.0af3a","name":"Got DeviceID","links":["c00689fc.2f30a8"],"x":1670,"y":1580,"wires":[["7503cb3f.483b14"]],"l":true},{"id":"c8f1b4fd.8e7438","type":"change","z":"ff6040a4.0af3a","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"set","p":"exportableresults.DeviceID","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2660,"y":1500,"wires":[["4aa90e73.789da","c1da6109.d506e"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"61c95b2c.df2124","type":"subflow:11c4fe96.587e41","z":"ff6040a4.0af3a","name":"","env":[],"x":2401,"y":1520,"wires":[["c8f1b4fd.8e7438","e87ac34e.6fe1c"],["754dba52.e43a84"],["55e9094c.a6ea38"]]},{"id":"ca0cc2c6.9ee66","type":"inject","z":"ff6040a4.0af3a","name":"Delete Devices for Testing","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":1710,"y":1460,"wires":[["b9c45624.496fd8"]]},{"id":"b9c45624.496fd8","type":"change","z":"ff6040a4.0af3a","name":"","rules":[{"t":"delete","p":"Devices","pt":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":1980,"y":1460,"wires":[[]]},{"id":"4aa90e73.789da","type":"function","z":"ff6040a4.0af3a","name":"Move Data from searchfor to exportableresults","func":"//debugger\nlet foundKeys = Object.keys(msg.searchfor)\nlet foundValues = Object.values(msg.searchfor)\n//loop through all keys and a\nfor (index = 0; index < foundKeys.length; index++)\n{\n    if(foundValues[index]!== \"\")\n    {\n    msg.exportableresults[foundKeys[index]] = foundValues[index]\n    }\n}\ndelete msg.searchfor\nreturn msg","outputs":1,"noerr":0,"x":2980,"y":1500,"wires":[["ffd226b7.783578","c00689fc.2f30a8"]],"info":"This node moves each property under the msg.searchfor property to the msg.exportableresults property."},{"id":"1005c5c7.c1c29a","type":"change","z":"ff6040a4.0af3a","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1911,"y":1520,"wires":[["eb220a9.2eda6f8","e23d3ad8.60c298"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"eb220a9.2eda6f8","type":"change","z":"ff6040a4.0af3a","name":"Devices Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Floor","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Location","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Room","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.DeviceType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.AccessProtocol","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.PhysicalVirtualType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.House","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.MQTTDeviceTopic","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Hub","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2171,"y":1520,"wires":[["61c95b2c.df2124","ad6bf055.286d2"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"e4ef01f4.cce88","type":"link in","z":"ff6040a4.0af3a","name":"Get Measurement Name Update (All 3)","links":["7503cb3f.483b14"],"x":1710,"y":1880,"wires":[["c3fee5a0.037088"]],"l":true},{"id":"7503cb3f.483b14","type":"link out","z":"ff6040a4.0af3a","name":"Get Measurement Name Update","links":["e4ef01f4.cce88"],"x":2070,"y":1580,"wires":[],"l":true},{"id":"48f2c7b2.f39858","type":"link in","z":"ff6040a4.0af3a","name":"Got Measurement Name Update","links":["699d4d76.12d884"],"x":1730,"y":1920,"wires":[["c30a5118.52cda"]],"l":true},{"id":"c00689fc.2f30a8","type":"link out","z":"ff6040a4.0af3a","name":"Got Device ID","links":["3f18e151.e33e3e"],"x":3280,"y":1500,"wires":[],"l":true},{"id":"6b37c5c8.1c67bc","type":"comment","z":"ff6040a4.0af3a","name":"DeviceID lookup is needed for MQTT (and Homebridge?), but not Hubitat devices","info":"","x":1880,"y":1420,"wires":[]},{"id":"c1a89ad5.715e38","type":"change","z":"ff6040a4.0af3a","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3300,"y":1820,"wires":[["269dd010.b1636"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"cdb5cece.87d37","type":"subflow:11c4fe96.587e41","z":"ff6040a4.0af3a","name":"","env":[],"x":3020,"y":1880,"wires":[["c1a89ad5.715e38","cf1e77d3.dbf1b8"],["27b61f80.c217e"],["d4cf0e19.81e8c","d1fc32e3.cdb3a","cf1e77d3.dbf1b8"]]},{"id":"c3fee5a0.037088","type":"change","z":"ff6040a4.0af3a","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"E","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"100","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2010,"y":1880,"wires":[["679092d4.4fec8c","e7118d9d.7b64e"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"679092d4.4fec8c","type":"change","z":"ff6040a4.0af3a","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"keyvalues.SourceDevice","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.ChangeNameTo","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2340,"y":1880,"wires":[["b497858.d06c978","7390505a.ec8bd"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"ffd226b7.783578","type":"debug","z":"ff6040a4.0af3a","name":"1.1 DevID Lookup Success","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3320,"y":1460,"wires":[]},{"id":"27b61f80.c217e","type":"debug","z":"ff6040a4.0af3a","name":"flow 2.2 temp no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3280,"y":1860,"wires":[]},{"id":"d4cf0e19.81e8c","type":"debug","z":"ff6040a4.0af3a","name":"2 Need to update MeasurementTranslations Table","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3370,"y":1940,"wires":[]},{"id":"f5bece0d.998ef","type":"debug","z":"ff6040a4.0af3a","name":"2.1 rename lookup success","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3720,"y":1780,"wires":[]},{"id":"269dd010.b1636","type":"function","z":"ff6040a4.0af3a","name":"Move Name Change from searchfor to exportableresults","func":"msg.exportableresults.Measure = msg.searchfor.ChangeNameTo\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":3650,"y":1820,"wires":[["f5bece0d.998ef","699d4d76.12d884"]]},{"id":"699d4d76.12d884","type":"link out","z":"ff6040a4.0af3a","name":"Got Measurement Name Update","links":["48f2c7b2.f39858"],"x":4050,"y":1840,"wires":[],"l":true},{"id":"c30a5118.52cda","type":"link out","z":"ff6040a4.0af3a","name":"Get Potential Translation Update","links":["7a3857a1.e40508"],"x":2070,"y":1920,"wires":[],"l":true},{"id":"7a3857a1.e40508","type":"link in","z":"ff6040a4.0af3a","name":"Get Potential Translation Update (Homebridge Only)","links":["c30a5118.52cda"],"x":1710,"y":2400,"wires":[["dd03c2c1.bb879"]],"l":true},{"id":"a6a2ea3f.7abd18","type":"link in","z":"ff6040a4.0af3a","name":"Got Potential Translation Update","links":["8eb89ea4.b5e21","bc6b491c.9bf308","e9844d0e.f2eb8","dbc3322d.12238","d9b20f7c.5add5"],"x":1650,"y":2940,"wires":[["eb20679d.2cdb68","4adba703.326ba8"]],"l":true},{"id":"8eb89ea4.b5e21","type":"link out","z":"ff6040a4.0af3a","name":"Got Potential Translation Update","links":["a6a2ea3f.7abd18"],"x":4470,"y":2320,"wires":[],"l":true},{"id":"4f61b6eb.2797a8","type":"function","z":"ff6040a4.0af3a","name":"Move Name Change from searchfor to exportableresults","func":"msg.TranslationType = msg.searchfor.TranslationType\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":3310,"y":2380,"wires":[["215ce914.b80f86","5c32f20a.33125c"]]},{"id":"c0ffae74.7473a","type":"change","z":"ff6040a4.0af3a","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2960,"y":2380,"wires":[["4f61b6eb.2797a8","5d87789c.9f13f8"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"7d3077e5.df2088","type":"change","z":"ff6040a4.0af3a","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.TranslationType","pt":"msg","to":"","tot":"str"},{"t":"delete","p":"searchErrorCount","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2380,"y":2400,"wires":[["217ab694.acf5ba","3f8ecb73.b05844"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"dd03c2c1.bb879","type":"change","z":"ff6040a4.0af3a","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"C","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"100","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2050,"y":2400,"wires":[["7d3077e5.df2088","a783cd1f.70c2f"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"d1fc32e3.cdb3a","type":"change","z":"ff6040a4.0af3a","name":"Remove Excess Properties when No Name Change Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3400,"y":1900,"wires":[["699d4d76.12d884","5279dcad.253bc4"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"6afb815.99ed38","type":"change","z":"ff6040a4.0af3a","name":"Remove Excess Properties when No Data Translation Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3060,"y":2420,"wires":[["d9b20f7c.5add5"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"df40d810.4731b8","type":"switch","z":"ff6040a4.0af3a","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":4240,"y":2260,"wires":[["39a291c1.61976e","653c65b9.65c7cc"],["719c672f.8b1e98","653c65b9.65c7cc"]],"outputLabels":["True","False"]},{"id":"39a291c1.61976e","type":"change","z":"ff6040a4.0af3a","name":"Value True","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":4410,"y":2240,"wires":[["e9844d0e.f2eb8","653c65b9.65c7cc"]]},{"id":"719c672f.8b1e98","type":"change","z":"ff6040a4.0af3a","name":"Value False","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"false","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":4410,"y":2280,"wires":[["e9844d0e.f2eb8","653c65b9.65c7cc"]]},{"id":"a3e7e5d8.0e8688","type":"change","z":"ff6040a4.0af3a","name":"CtoF Translate","rules":[{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"msg.exportableresults.Measure&\"F\"\t","tot":"jsonata"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"msg.exportableresults.Reading*9/5+32","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":4240,"y":2320,"wires":[["8eb89ea4.b5e21"]]},{"id":"ac8d06fe.414d18","type":"switch","z":"ff6040a4.0af3a","name":"CurrentHeatingCoolingState Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"},{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":4310,"y":2420,"wires":[["aedcf343.bd52f"],["a2757f40.a6a27"],["2dcb2643.978d4a"],["bec9e863.312378"]],"outputLabels":["off","heat","cool","heat-cool"]},{"id":"aedcf343.bd52f","type":"change","z":"ff6040a4.0af3a","name":"Value Off","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"off","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4560,"y":2360,"wires":[["dbc3322d.12238"]]},{"id":"a2757f40.a6a27","type":"change","z":"ff6040a4.0af3a","name":"Value Heat","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4570,"y":2400,"wires":[["dbc3322d.12238"]]},{"id":"2dcb2643.978d4a","type":"change","z":"ff6040a4.0af3a","name":"Value Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4570,"y":2440,"wires":[["dbc3322d.12238"]]},{"id":"bec9e863.312378","type":"change","z":"ff6040a4.0af3a","name":"Value Heat-Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat-cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4580,"y":2480,"wires":[["dbc3322d.12238"]]},{"id":"4df3c3be.94949c","type":"switch","z":"ff6040a4.0af3a","name":"","property":"TranslationType","propertyType":"msg","rules":[{"t":"eq","v":"10TF","vt":"str"},{"t":"eq","v":"C2F","vt":"str"},{"t":"eq","v":"NestThMap","vt":"str"},{"t":"eq","v":"012CF","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":4030,"y":2360,"wires":[["df40d810.4731b8"],["a3e7e5d8.0e8688","f560d861.3efce8"],["ac8d06fe.414d18"],["88cc4cf8.6370f"]],"outputLabels":["1 or 0 to True or False Map","Celcius to Fahrenheit Conversion","Nest Thermostat Map","Celcius or Fahrenheit Map"]},{"id":"88cc4cf8.6370f","type":"switch","z":"ff6040a4.0af3a","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":4240,"y":2540,"wires":[["4209830f.2ad46c"],["eab98841.0d8c08"]],"outputLabels":["True","False"]},{"id":"4209830f.2ad46c","type":"change","z":"ff6040a4.0af3a","name":"Value Fahrenheit","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Fahrenheit","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4430,"y":2520,"wires":[["bc6b491c.9bf308"]]},{"id":"eab98841.0d8c08","type":"change","z":"ff6040a4.0af3a","name":"Value Celcius","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Celcius","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4420,"y":2560,"wires":[["bc6b491c.9bf308"]]},{"id":"215ce914.b80f86","type":"switch","z":"ff6040a4.0af3a","name":"Translation Needed?","property":"TranslationType","propertyType":"msg","rules":[{"t":"neq","v":"null","vt":"str"},{"t":"eq","v":"null","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":3640,"y":2380,"wires":[["4df3c3be.94949c","724d6ce8.7f8004"],["d9b20f7c.5add5","aa129309.3022f"]]},{"id":"4adba703.326ba8","type":"change","z":"ff6040a4.0af3a","name":"Excess Properties Removal","rules":[{"t":"delete","p":"searchErrorCount","pt":"msg"},{"t":"delete","p":"error","pt":"msg"},{"t":"delete","p":"TranslationType","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1980,"y":2940,"wires":[["2431eaa0.48f0c6","d64c3367.54438"]]},{"id":"2431eaa0.48f0c6","type":"debug","z":"ff6040a4.0af3a","name":"Catch Excess Properties Removal","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2200,"y":2840,"wires":[]},{"id":"e9844d0e.f2eb8","type":"link out","z":"ff6040a4.0af3a","name":"Got Potential Translation Update","links":["a6a2ea3f.7abd18"],"x":4630,"y":2260,"wires":[],"l":true},{"id":"dbc3322d.12238","type":"link out","z":"ff6040a4.0af3a","name":"Got Potential Translation Update","links":["a6a2ea3f.7abd18"],"x":4850,"y":2420,"wires":[],"l":true},{"id":"bc6b491c.9bf308","type":"link out","z":"ff6040a4.0af3a","name":"Got Potential Translation Update","links":["a6a2ea3f.7abd18"],"x":4670,"y":2540,"wires":[],"l":true},{"id":"d9b20f7c.5add5","type":"link out","z":"ff6040a4.0af3a","name":"Got Potential Translation Update","links":["a6a2ea3f.7abd18"],"x":3930,"y":2420,"wires":[],"l":true},{"id":"d64c3367.54438","type":"function","z":"ff6040a4.0af3a","name":"Format for InfluxDB & MQTT","func":"//Ref. TMS-000002\n/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.exportableresults.DeviceID;\n//node.warn(\"11 \"+ deviceID)\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar typeOfMeasurement = msg.exportableresults.Measure;\n\n//gather the actual measurement value that was sent by the device to be included as the data for the field (when the measurement is valid) sent to InfluxDB\nvar theData = msg.exportableresults.Reading;\n//initialize the measurements object\nvar measurementsObj = {};\n\n//initialize the tags (indices) object\nvar tagsObj = {};\n\n//create the object that will later be used to combine the measurementsObj and tagsObj\nvar combinedObj;\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\nif (msg.exportableresults.hasOwnProperty('dataType'))\n{\n    if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    {\n        if (typeof theData == 'number')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched number\" });\n            if (!theData.isNaN)\n            {\n                validMeasurement = true;\n            }\n        }\n        else if (typeof theData == 'string')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched string\" });\n            if (theData.length >= 0)\n            {\n                validMeasurement = true;\n            }\n        } \n        else if (typeof theData == 'boolean')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched boolean\" });\n            validMeasurement = true;\n        }\n        else if (msg.exportableresults.dataType == 'ENUM')\n        { //This is checking to make sure the value matches one of the values in the ENUM from the device \n            node.status({ fill: \"red\", shape: \"ring\", text: msg.exportableresults.dataType + \" matched ENUM\" });\n            msg.exportableresults.values.forEach(element => {\n                if (flow.get(deviceID + element) == theData)\n                {\n                    validMeasurement = true;\n                }\n            })\n        }\n        else if (theData === null)\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched null data\" });\n            nullData = true;\n        }\n        else\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched nonstandardtype\" });\n            nonStandardType = true;\n        }\n    } //if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    else\n    {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"measurement type mismatch\" });\n        measurementTypeMismatch = true;\n    } //else  if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n}//if(msg.exportableresults.hasOwnProperty('dataType'))\nelse\n{\n    validMeasurement = true;\n}// else      if(msg.exportableresults.hasOwnProperty('dataType')) else\n\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\", \"PhysicalDigitalRegular\"]\nfor (innerIndex = 0; innerIndex < commonTags.length; innerIndex++)\n{\n    if (msg.exportableresults.hasOwnProperty(commonTags[innerIndex]))\n    {\n        tagsObj[commonTags[innerIndex]] = msg.exportableresults[commonTags[innerIndex]]\n    } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n} //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    //node.warn(\"94 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"113 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"123 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n\n//put the object into the payload\nmsg.payload = combinedObj;\n\n//build the status to be shown on the status of the subnode\nmsg.status = msg.exportableresults.DeviceName + \": \" + typeOfMeasurement + \": \" + theData;\n\n/* MQTT section \n * \n * \n * \n */\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = msg.exportableresults.MQTTname +\"/\"+msg.exportableresults.DeviceName+\"/\"+ msg.exportableresults.Measure\n//add the data to be recorded to MQTT\nmsg2.payload = theData\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nif (!nullData) {\n    return [msg, msg2]\n}\ndebugger\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n","outputs":2,"noerr":0,"x":2260,"y":2940,"wires":[["d64fc9b3.8d94f8","b58898a7.a65038","b0b991e.c80e67"],["306ace61.a1fe32","d93bf2cf.981c7"]]},{"id":"d64fc9b3.8d94f8","type":"debug","z":"ff6040a4.0af3a","name":"4.1 Output 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2530,"y":2860,"wires":[]},{"id":"306ace61.a1fe32","type":"debug","z":"ff6040a4.0af3a","name":"4.2 Output 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2530,"y":3040,"wires":[]},{"id":"b58898a7.a65038","type":"influxdb out","z":"ff6040a4.0af3a","influxdb":"82aca41a.30fed8","name":"","measurement":"Smarthome","precision":"","retentionPolicy":"","x":2650,"y":2900,"wires":[]},{"id":"b0b991e.c80e67","type":"change","z":"ff6040a4.0af3a","name":"Move Status to Payload for Consumption by Status Node","rules":[{"t":"set","p":"payload","pt":"msg","to":"status","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2670,"y":2940,"wires":[["855aa2af.4fe6"]]},{"id":"d93bf2cf.981c7","type":"mqtt out","z":"ff6040a4.0af3a","name":"Write reading to MQTT","topic":"","qos":"1","retain":"true","broker":"a5bf81ee.27852","x":2560,"y":2980,"wires":[]},{"id":"855aa2af.4fe6","type":"debug","z":"ff6040a4.0af3a","name":"4.3 Output  For Status node","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3040,"y":2940,"wires":[]},{"id":"754dba52.e43a84","type":"debug","z":"ff6040a4.0af3a","name":"flow 1.2 temp no find","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2640,"y":1540,"wires":[]},{"id":"55e9094c.a6ea38","type":"debug","z":"ff6040a4.0af3a","name":"flow 1.3 Need to update the Devices Table","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2700,"y":1580,"wires":[]},{"id":"b497858.d06c978","type":"function","z":"ff6040a4.0af3a","name":"Optionally Simplify msg.keyvalues.Measurement","func":"if (msg.keyvalues.Measurement.includes(\"/\"))\n{msg.keyvalues.Measurement = msg.keyvalues.Measurement.substring(msg.keyvalues.Measurement.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2720,"y":1880,"wires":[["77d2541e.9eae6c","cdb5cece.87d37"]]},{"id":"7390505a.ec8bd","type":"debug","z":"ff6040a4.0af3a","name":"before","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2450,"y":1840,"wires":[]},{"id":"77d2541e.9eae6c","type":"debug","z":"ff6040a4.0af3a","name":"after","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2810,"y":1840,"wires":[]},{"id":"5279dcad.253bc4","type":"debug","z":"ff6040a4.0af3a","name":"flow 2.3 If translation desired fail, otherwise succes Table?","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3990,"y":1900,"wires":[]},{"id":"eb20679d.2cdb68","type":"debug","z":"ff6040a4.0af3a","name":"flow 3 output","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1850,"y":2880,"wires":[]},{"id":"653c65b9.65c7cc","type":"debug","z":"ff6040a4.0af3a","name":"flow 3 SS settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4410,"y":2160,"wires":[]},{"id":"e23d3ad8.60c298","type":"debug","z":"ff6040a4.0af3a","name":"Catch Spread Lookup","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2240,"y":1460,"wires":[]},{"id":"ad6bf055.286d2","type":"debug","z":"ff6040a4.0af3a","name":"Catch Devices Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2450,"y":1420,"wires":[]},{"id":"e87ac34e.6fe1c","type":"debug","z":"ff6040a4.0af3a","name":"Catch Lookup Desired Data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2660,"y":1460,"wires":[]},{"id":"c1da6109.d506e","type":"debug","z":"ff6040a4.0af3a","name":"Catch Remove Excess Properties","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2980,"y":1460,"wires":[]},{"id":"e7118d9d.7b64e","type":"debug","z":"ff6040a4.0af3a","name":"Catch Spreadsheet Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2010,"y":1840,"wires":[]},{"id":"cf1e77d3.dbf1b8","type":"debug","z":"ff6040a4.0af3a","name":"Catch Lookup Desired Data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3080,"y":1740,"wires":[]},{"id":"a783cd1f.70c2f","type":"debug","z":"ff6040a4.0af3a","name":"Catch Spreadsheet Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2030,"y":2360,"wires":[]},{"id":"217ab694.acf5ba","type":"debug","z":"ff6040a4.0af3a","name":"Catch Measurement Translation Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2460,"y":2340,"wires":[]},{"id":"3f8ecb73.b05844","type":"function","z":"ff6040a4.0af3a","name":"Optionally Simplify msg.keyvalues.Measurement","func":"if (msg.keyvalues.Measurement.includes(\"/\"))\n{msg.keyvalues.Measurement = msg.keyvalues.Measurement.substring(msg.keyvalues.Measurement.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2840,"y":2160,"wires":[["a59a0577.3755b8","5720455.ac5f3bc"]]},{"id":"a59a0577.3755b8","type":"subflow:11c4fe96.587e41","z":"ff6040a4.0af3a","name":"","env":[],"x":3160,"y":2160,"wires":[["881e4e24.8d7bb","c0ffae74.7473a"],["3a21c230.111d6e"],["150b394f.54cd67","6afb815.99ed38"]]},{"id":"881e4e24.8d7bb","type":"debug","z":"ff6040a4.0af3a","name":"3.1 Catch Translation Lookup Success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3810,"y":2080,"wires":[]},{"id":"3a21c230.111d6e","type":"debug","z":"ff6040a4.0af3a","name":"3.2 Catch Translation Lookup Partial Failure","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3850,"y":2120,"wires":[]},{"id":"150b394f.54cd67","type":"debug","z":"ff6040a4.0af3a","name":"3.3 Catch Translation Lookup Repeated Failure","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3860,"y":2160,"wires":[]},{"id":"5720455.ac5f3bc","type":"debug","z":"ff6040a4.0af3a","name":"catch Optionally Simplify msg.keyvalues.Measurement","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2900,"y":2120,"wires":[]},{"id":"5d87789c.9f13f8","type":"debug","z":"ff6040a4.0af3a","name":"Catch Remove Excess Properties","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2960,"y":2340,"wires":[]},{"id":"5c32f20a.33125c","type":"debug","z":"ff6040a4.0af3a","name":"Catch Move Name Change from searchfor to exportableresults","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3350,"y":2340,"wires":[]},{"id":"724d6ce8.7f8004","type":"debug","z":"ff6040a4.0af3a","name":"1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3710,"y":2260,"wires":[]},{"id":"aa129309.3022f","type":"debug","z":"ff6040a4.0af3a","name":"2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3690,"y":2300,"wires":[]},{"id":"6fe8076f.ff40f8","type":"function","z":"ff6040a4.0af3a","name":"Optionally Simplify msg.exportableresults.Measure","func":"if (msg.exportableresults.Measure.includes(\"/\"))\n{msg.exportableresults.Measure = msg.exportableresults.Measure.substring(msg.exportableresults.Measure.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2090,"y":1320,"wires":[["ab60a0df.ea47b"]]},{"id":"f560d861.3efce8","type":"debug","z":"ff6040a4.0af3a","name":"Catch C2F translation input","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4610,"y":2680,"wires":[]},{"id":"ccb28bfa.de02d8","type":"hb-status","z":"21d3abd9.0eac04","name":"Downstairs Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1460,"wires":[["7b2c27a3.69e858"]]},{"id":"a3fb8436.7c2fe8","type":"comment","z":"21d3abd9.0eac04","name":"Presence Sensors","info":"","x":150,"y":660,"wires":[]},{"id":"26683936.b38ec6","type":"comment","z":"21d3abd9.0eac04","name":"Placeholder Kathy Home","info":"","x":170,"y":940,"wires":[]},{"id":"9ae1663f.4a5288","type":"link in","z":"21d3abd9.0eac04","name":"Jump In","links":["ac5df686.06cbf8","2b34f7f9.5f6598","7a59cd2b.a23914","7b2c27a3.69e858","f8478da8.e71bb"],"x":1490,"y":1240,"wires":[["9f38916e.8f9b7"]],"l":true},{"id":"75369594.09f35c","type":"hb-status","z":"21d3abd9.0eac04","name":"Anyone","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerAnyone00000086","conf":"df59aa47.b26148","x":680,"y":680,"wires":[["ac5df686.06cbf8"]]},{"id":"7a59cd2b.a23914","type":"link out","z":"21d3abd9.0eac04","name":"Go To Jump In","links":["9ae1663f.4a5288"],"x":1020,"y":2240,"wires":[],"l":true},{"id":"bb02bf69.20be3","type":"hb-status","z":"21d3abd9.0eac04","name":"Downstairs Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Motion00000085","conf":"df59aa47.b26148","x":690,"y":2500,"wires":[["2b34f7f9.5f6598"]]},{"id":"b24517e9.60fa98","type":"hb-status","z":"21d3abd9.0eac04","name":"Downstairs Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3180,"wires":[["f8478da8.e71bb"]]},{"id":"b2f46fc8.a17c6","type":"hb-status","z":"21d3abd9.0eac04","name":"Gratuity Thermostat - Eco Mode","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Eco Mode00000049","conf":"df59aa47.b26148","x":730,"y":2140,"wires":[["7a59cd2b.a23914"]]},{"id":"4cd5eec7.ff641","type":"hb-status","z":"21d3abd9.0eac04","name":"Gratuity Thermostat - Fan","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Fan","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Fan00000040","conf":"df59aa47.b26148","x":710,"y":2220,"wires":[["7a59cd2b.a23914"]]},{"id":"644db432.b8e17c","type":"hb-status","z":"21d3abd9.0eac04","name":"Gratuity Thermostat","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Thermostat","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat0000004A","conf":"df59aa47.b26148","x":690,"y":2300,"wires":[["7a59cd2b.a23914"]]},{"id":"bb40f41b.a7c578","type":"hb-status","z":"21d3abd9.0eac04","name":"Mike iPhone Home","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerMike iPhone Home00000086","conf":"df59aa47.b26148","x":710,"y":760,"wires":[["ac5df686.06cbf8"]]},{"id":"e9d6409c.659ba","type":"comment","z":"21d3abd9.0eac04","name":"Placeholder Eva Home","info":"","x":160,"y":1020,"wires":[]},{"id":"87db13ab.1341a","type":"comment","z":"21d3abd9.0eac04","name":"Placeholder Eva LTHS","info":"","x":160,"y":1100,"wires":[]},{"id":"3a0274a8.e41efc","type":"comment","z":"21d3abd9.0eac04","name":"Placeholder Eva CTE","info":"","x":160,"y":1180,"wires":[]},{"id":"66bf11b7.65919","type":"comment","z":"21d3abd9.0eac04","name":"Placeholder Eva Dance","info":"","x":160,"y":1260,"wires":[]},{"id":"a7d347f7.344608","type":"comment","z":"21d3abd9.0eac04","name":"Placeholder Kathy Dance","info":"","x":170,"y":1340,"wires":[]},{"id":"52a84d28.364fa4","type":"comment","z":"21d3abd9.0eac04","name":"Placeholder Mike Work","info":"","x":160,"y":860,"wires":[]},{"id":"b841109a.bc80b","type":"comment","z":"21d3abd9.0eac04","name":"Nest Protect CO","info":"","x":140,"y":1420,"wires":[]},{"id":"f2d0e830.80b0b8","type":"hb-status","z":"21d3abd9.0eac04","name":"Eva Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1540,"wires":[["7b2c27a3.69e858"]]},{"id":"39d44879.ec1708","type":"hb-status","z":"21d3abd9.0eac04","name":"Evas Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1620,"wires":[["7b2c27a3.69e858"]]},{"id":"9ba32fea.c788c","type":"hb-status","z":"21d3abd9.0eac04","name":"Game Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1700,"wires":[["7b2c27a3.69e858"]]},{"id":"4e39eab2.1a9f84","type":"hb-status","z":"21d3abd9.0eac04","name":"Guest Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1780,"wires":[["7b2c27a3.69e858"]]},{"id":"954dbcc8.2cd63","type":"hb-status","z":"21d3abd9.0eac04","name":"Master Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1860,"wires":[["7b2c27a3.69e858"]]},{"id":"e34a2905.40b318","type":"hb-status","z":"21d3abd9.0eac04","name":"Toy Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":700,"y":1940,"wires":[["7b2c27a3.69e858","52d8574.7dfe7a8"]]},{"id":"3ff6ca69.93ebf6","type":"hb-status","z":"21d3abd9.0eac04","name":"Toy Room Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":730,"y":2020,"wires":[["7b2c27a3.69e858","52d8574.7dfe7a8"]]},{"id":"7b2c27a3.69e858","type":"link out","z":"21d3abd9.0eac04","name":"Go To Jump In","links":["9ae1663f.4a5288"],"x":1140,"y":1780,"wires":[],"l":true},{"id":"ac5df686.06cbf8","type":"link out","z":"21d3abd9.0eac04","name":"Go To Jump In","links":["9ae1663f.4a5288"],"x":940,"y":740,"wires":[],"l":true},{"id":"2b34f7f9.5f6598","type":"link out","z":"21d3abd9.0eac04","name":"Go To Jump In","links":["9ae1663f.4a5288"],"x":1040,"y":2780,"wires":[],"l":true},{"id":"2aa0355c.684efa","type":"hb-status","z":"21d3abd9.0eac04","name":"Eva Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Motion00000085","conf":"df59aa47.b26148","x":690,"y":2580,"wires":[["2b34f7f9.5f6598"]]},{"id":"7584a6e8.ab4468","type":"hb-status","z":"21d3abd9.0eac04","name":"Evas Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2660,"wires":[["2b34f7f9.5f6598"]]},{"id":"37d974d2.c3b85c","type":"hb-status","z":"21d3abd9.0eac04","name":"Guest Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Motion00000085","conf":"df59aa47.b26148","x":710,"y":2820,"wires":[["2b34f7f9.5f6598"]]},{"id":"ebfab753.628dd8","type":"hb-status","z":"21d3abd9.0eac04","name":"Master Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Motion00000085","conf":"df59aa47.b26148","x":710,"y":2900,"wires":[["2b34f7f9.5f6598"]]},{"id":"1c039d81.245cb2","type":"hb-status","z":"21d3abd9.0eac04","name":"Toy Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Motion00000085","conf":"df59aa47.b26148","x":690,"y":2980,"wires":[["2b34f7f9.5f6598"]]},{"id":"9f5edcd1.afbd1","type":"hb-status","z":"21d3abd9.0eac04","name":"Toy Room Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Motion00000085","conf":"df59aa47.b26148","x":710,"y":3060,"wires":[["2b34f7f9.5f6598"]]},{"id":"8550dfe6.e149e","type":"hb-status","z":"21d3abd9.0eac04","name":"Game Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Motion00000085","conf":"df59aa47.b26148","x":700,"y":2740,"wires":[["2b34f7f9.5f6598"]]},{"id":"be3b753.e565b88","type":"comment","z":"21d3abd9.0eac04","name":"Nest Protect Smoke","info":"","x":150,"y":3140,"wires":[]},{"id":"f8478da8.e71bb","type":"link out","z":"21d3abd9.0eac04","name":"Go To Jump In","links":["9ae1663f.4a5288"],"x":1260,"y":3480,"wires":[],"l":true},{"id":"effce238.c1457","type":"hb-status","z":"21d3abd9.0eac04","name":"Eva Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3260,"wires":[["f8478da8.e71bb"]]},{"id":"e4df9d0e.78981","type":"hb-status","z":"21d3abd9.0eac04","name":"Evas Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3340,"wires":[["f8478da8.e71bb"]]},{"id":"6250aec6.04088","type":"hb-status","z":"21d3abd9.0eac04","name":"Game Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3420,"wires":[["f8478da8.e71bb"]]},{"id":"e8f2f44c.702038","type":"hb-status","z":"21d3abd9.0eac04","name":"Guest Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3500,"wires":[["f8478da8.e71bb"]]},{"id":"139e29b2.307b16","type":"hb-status","z":"21d3abd9.0eac04","name":"Master Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3580,"wires":[["f8478da8.e71bb"]]},{"id":"ec0f952c.7b8eb8","type":"hb-status","z":"21d3abd9.0eac04","name":"Toy Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3660,"wires":[["f8478da8.e71bb"]]},{"id":"47332dd3.0d85a4","type":"hb-status","z":"21d3abd9.0eac04","name":"Toy Room Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3740,"wires":[["f8478da8.e71bb"]]},{"id":"f22892fd.760e5","type":"comment","z":"21d3abd9.0eac04","name":"Nest Thermostat","info":"","x":140,"y":2100,"wires":[]},{"id":"5ddbc30a.6987ec","type":"hb-status","z":"21d3abd9.0eac04","name":"Eve Motion Passthrough","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerEve Motion Passthrough00000049","conf":"df59aa47.b26148","x":710,"y":2420,"wires":[["2b34f7f9.5f6598"]]},{"id":"b98ea6d2.67b138","type":"comment","z":"21d3abd9.0eac04","name":"Motion Sensors","info":"","x":140,"y":2380,"wires":[]},{"id":"7657c685.c378e8","type":"hb-event","z":"21d3abd9.0eac04","name":"Eve Motion Passthrough","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerEve Motion Passthrough00000049","conf":"df59aa47.b26148","x":710,"y":2460,"wires":[["2b34f7f9.5f6598"]]},{"id":"60f7a15e.fc565","type":"hb-event","z":"21d3abd9.0eac04","name":"Gratuity Thermostat","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Thermostat","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat0000004A","conf":"df59aa47.b26148","x":690,"y":2340,"wires":[["7a59cd2b.a23914"]]},{"id":"77fcf2c3.413fac","type":"hb-event","z":"21d3abd9.0eac04","name":"Gratuity Thermostat - Fan","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Fan","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Fan00000040","conf":"df59aa47.b26148","x":710,"y":2260,"wires":[["7a59cd2b.a23914"]]},{"id":"fb507fd8.baff3","type":"hb-event","z":"21d3abd9.0eac04","name":"Gratuity Thermostat - Eco Mode","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Eco Mode00000049","conf":"df59aa47.b26148","x":730,"y":2180,"wires":[["7a59cd2b.a23914"]]},{"id":"5949e1ac.710bd","type":"hb-event","z":"21d3abd9.0eac04","name":"Downstairs Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Motion00000085","conf":"df59aa47.b26148","x":690,"y":2540,"wires":[["2b34f7f9.5f6598"]]},{"id":"b7c1a42b.f914d8","type":"hb-event","z":"21d3abd9.0eac04","name":"Eva Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Motion00000085","conf":"df59aa47.b26148","x":690,"y":2620,"wires":[["2b34f7f9.5f6598"]]},{"id":"270ffd93.e88ef2","type":"hb-event","z":"21d3abd9.0eac04","name":"Evas Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2700,"wires":[["2b34f7f9.5f6598"]]},{"id":"703dffc2.779e2","type":"hb-event","z":"21d3abd9.0eac04","name":"Game Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Motion00000085","conf":"df59aa47.b26148","x":690,"y":2780,"wires":[["2b34f7f9.5f6598"]]},{"id":"82882bf.2d2e4d8","type":"hb-event","z":"21d3abd9.0eac04","name":"Guest Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2860,"wires":[["2b34f7f9.5f6598"]]},{"id":"b8628981.372f58","type":"hb-event","z":"21d3abd9.0eac04","name":"Master Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Motion00000085","conf":"df59aa47.b26148","x":700,"y":2940,"wires":[["2b34f7f9.5f6598"]]},{"id":"c0e62ce1.98197","type":"hb-event","z":"21d3abd9.0eac04","name":"Toy Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Motion00000085","conf":"df59aa47.b26148","x":680,"y":3020,"wires":[["2b34f7f9.5f6598"]]},{"id":"d6afef5c.803ca","type":"hb-event","z":"21d3abd9.0eac04","name":"Toy Room Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Motion00000085","conf":"df59aa47.b26148","x":710,"y":3100,"wires":[["2b34f7f9.5f6598"]]},{"id":"f00857cc.933668","type":"hb-event","z":"21d3abd9.0eac04","name":"Downstairs Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3220,"wires":[["f8478da8.e71bb"]]},{"id":"d202b7e9.783568","type":"hb-event","z":"21d3abd9.0eac04","name":"Eva Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3300,"wires":[["f8478da8.e71bb"]]},{"id":"ebe7a193.eeb96","type":"hb-event","z":"21d3abd9.0eac04","name":"Evas Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3380,"wires":[["f8478da8.e71bb"]]},{"id":"6cfa5eaa.d1add","type":"hb-event","z":"21d3abd9.0eac04","name":"Game Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Smoke00000087","conf":"df59aa47.b26148","x":690,"y":3460,"wires":[["f8478da8.e71bb"]]},{"id":"f4b998e7.538ef8","type":"hb-event","z":"21d3abd9.0eac04","name":"Guest Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Smoke00000087","conf":"df59aa47.b26148","x":700,"y":3540,"wires":[["f8478da8.e71bb"]]},{"id":"24831d7a.5cab32","type":"hb-event","z":"21d3abd9.0eac04","name":"Master Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3620,"wires":[["f8478da8.e71bb"]]},{"id":"20a9dfe2.05baf","type":"hb-event","z":"21d3abd9.0eac04","name":"Toy Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Smoke00000087","conf":"df59aa47.b26148","x":680,"y":3700,"wires":[["f8478da8.e71bb"]]},{"id":"a4b33f41.8f4c4","type":"hb-event","z":"21d3abd9.0eac04","name":"Toy Room Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Smoke00000087","conf":"df59aa47.b26148","x":710,"y":3780,"wires":[["f8478da8.e71bb"]]},{"id":"688ca9d9.c38a08","type":"hb-event","z":"21d3abd9.0eac04","name":"Downstairs Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":700,"y":1500,"wires":[["7b2c27a3.69e858"]]},{"id":"eb13b64e.6d79e8","type":"hb-event","z":"21d3abd9.0eac04","name":"Eva Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1580,"wires":[["7b2c27a3.69e858"]]},{"id":"52f1bda3.8ad5c4","type":"hb-event","z":"21d3abd9.0eac04","name":"Evas Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1660,"wires":[["7b2c27a3.69e858"]]},{"id":"4cbd87eb.72e438","type":"hb-event","z":"21d3abd9.0eac04","name":"Game Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":710,"y":1740,"wires":[["7b2c27a3.69e858"]]},{"id":"e50ce9f6.9cac28","type":"hb-event","z":"21d3abd9.0eac04","name":"Guest Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1820,"wires":[["7b2c27a3.69e858"]]},{"id":"c01f14d3.9c3d38","type":"hb-event","z":"21d3abd9.0eac04","name":"Master Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":1900,"wires":[["7b2c27a3.69e858"]]},{"id":"713818a8.e6b648","type":"hb-event","z":"21d3abd9.0eac04","name":"Toy Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":700,"y":1980,"wires":[["7b2c27a3.69e858"]]},{"id":"514f33c1.7f7f2c","type":"hb-event","z":"21d3abd9.0eac04","name":"Toy Room Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":720,"y":2060,"wires":[["7b2c27a3.69e858"]]},{"id":"56d5dced.eef974","type":"hb-event","z":"21d3abd9.0eac04","name":"Anyone","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerAnyone00000086","conf":"df59aa47.b26148","x":670,"y":720,"wires":[["ac5df686.06cbf8"]]},{"id":"563deaa3.f7ceb4","type":"hb-event","z":"21d3abd9.0eac04","name":"Mike iPhone Home","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerMike iPhone Home00000086","conf":"df59aa47.b26148","x":710,"y":800,"wires":[["ac5df686.06cbf8"]]},{"id":"b0eca160.5841f","type":"link out","z":"21d3abd9.0eac04","name":"Go To Prepopulate When Triggered","links":["5e9c2a5b.e04154","86935838.3b2db8","140a7d25.bd94a3","f1a9b2.fc7e465","c3efdc4a.b9d9b","bfbdf65e.040fe8"],"x":620,"y":40,"wires":[],"l":true},{"id":"c3efdc4a.b9d9b","type":"link in","z":"21d3abd9.0eac04","name":"Prepopulate","links":["b0eca160.5841f"],"x":510,"y":720,"wires":[["75369594.09f35c","bb40f41b.a7c578"]],"l":true},{"id":"5e9c2a5b.e04154","type":"link in","z":"21d3abd9.0eac04","name":"Prepopulate","links":["b0eca160.5841f"],"x":430,"y":1740,"wires":[["ccb28bfa.de02d8","f2d0e830.80b0b8","39d44879.ec1708","9ba32fea.c788c","4e39eab2.1a9f84","954dbcc8.2cd63","e34a2905.40b318","3ff6ca69.93ebf6"]],"l":true},{"id":"86935838.3b2db8","type":"link in","z":"21d3abd9.0eac04","name":"Prepopulate","links":["b0eca160.5841f"],"x":450,"y":2220,"wires":[["b2f46fc8.a17c6","4cd5eec7.ff641","644db432.b8e17c"]],"l":true},{"id":"f1a9b2.fc7e465","type":"link in","z":"21d3abd9.0eac04","name":"Prepopulate","links":["b0eca160.5841f"],"x":450,"y":2780,"wires":[["5ddbc30a.6987ec","bb02bf69.20be3","2aa0355c.684efa","7584a6e8.ab4468","8550dfe6.e149e","37d974d2.c3b85c","ebfab753.628dd8","1c039d81.245cb2","9f5edcd1.afbd1"]],"l":true},{"id":"140a7d25.bd94a3","type":"link in","z":"21d3abd9.0eac04","name":"Prepopulate","links":["b0eca160.5841f"],"x":450,"y":3460,"wires":[["b24517e9.60fa98","effce238.c1457","e4df9d0e.78981","6250aec6.04088","e8f2f44c.702038","139e29b2.307b16","ec0f952c.7b8eb8","47332dd3.0d85a4"]],"l":true},{"id":"3c259252.8073de","type":"comment","z":"21d3abd9.0eac04","name":"after major overhaul version","info":"","x":1660,"y":660,"wires":[]},{"id":"9f38916e.8f9b7","type":"debug","z":"21d3abd9.0eac04","name":"Homebridge Everything","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1630,"y":760,"wires":[]},{"id":"7fc403ba.32de4c","type":"inject","z":"21d3abd9.0eac04","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":1480,"y":1100,"wires":[["d594346a.fc1978"]]},{"id":"d594346a.fc1978","type":"function","z":"21d3abd9.0eac04","name":"Rertrieve My HomebridgeTestingSample ","func":"msg = global.get(\"HomebridgeTestingSample\")\nreturn msg","outputs":1,"noerr":0,"x":1880,"y":1140,"wires":[["b4cf503d.89969","f01f2f22.98d8b"]]},{"id":"b4cf503d.89969","type":"debug","z":"21d3abd9.0eac04","name":"Catch My Testing Sample","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2250,"y":1140,"wires":[]},{"id":"f01f2f22.98d8b","type":"change","z":"21d3abd9.0eac04","name":"Put device ID into msg.deviceID and payload into payload.value","rules":[{"t":"set","p":"temp","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"set","p":"payload.value","pt":"msg","to":"temp","tot":"msg"},{"t":"delete","p":"temp","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"homebridge","tot":"str"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"name","tot":"msg"},{"t":"set","p":"payload.name","pt":"msg","to":"name","tot":"msg"},{"t":"set","p":"MQTTName","pt":"msg","to":"homebridgedev","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1870,"y":1220,"wires":[["9610c4ac.191258","e3b3634e.e2c8a"]]},{"id":"e3b3634e.e2c8a","type":"function","z":"21d3abd9.0eac04","name":"Split kv pairs (from value) into 1-n msg stream (ready for testing)","func":"///////////////////////////////////////////////////////////////////\n//debugger\n///////////////////////////////////////////////////////////////////\n/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value;\n                --msg.payload.value;\n            }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        if (typeof name === 'undefined') \n        {\n            latestMsg.payload.name = key;\n        } \n        else \n        {\n            latestMsg.payload.name = name + \"/\" + key;\n        }\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n//Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \"/\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":1870,"y":1260,"wires":[["4e418cbc.8d50e4","b147821.f8fdc8"]]},{"id":"4e418cbc.8d50e4","type":"change","z":"21d3abd9.0eac04","name":"18 rule large cleanup","rules":[{"t":"delete","p":"qos","pt":"msg"},{"t":"delete","p":"retain","pt":"msg"},{"t":"delete","p":"payload.dataType","pt":"msg"},{"t":"delete","p":"deviceID","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"MQTTName","tot":"msg"},{"t":"delete","p":"MQTTName","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"topic","tot":"msg"},{"t":"delete","p":"topic","pt":"msg"},{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"payload.value","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"Manufacturer","pt":"msg"},{"t":"delete","p":"_device","pt":"msg"},{"t":"delete","p":"_confId","pt":"msg"},{"t":"delete","p":"Homebridge","pt":"msg"},{"t":"delete","p":"_rawMessage","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"name","tot":"msg"},{"t":"delete","p":"name","pt":"msg"},{"t":"delete","p":"_rawEvent","pt":"msg"},{"t":"delete","p":"DeviceID","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1740,"y":1300,"wires":[["2ae6740.527bf8c","8249d98c.11d028"]]},{"id":"8d86b841.5a7bf8","type":"link out","z":"21d3abd9.0eac04","name":"Get DeviceID","links":["ed823bc8.82bdd8"],"x":3130,"y":1300,"wires":[],"l":true},{"id":"9610c4ac.191258","type":"debug","z":"21d3abd9.0eac04","name":"Catch Post change 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2260,"y":1220,"wires":[]},{"id":"b147821.f8fdc8","type":"debug","z":"21d3abd9.0eac04","name":"Catch Stream Split","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2250,"y":1260,"wires":[]},{"id":"2ae6740.527bf8c","type":"debug","z":"21d3abd9.0eac04","name":"Catch to send to get device","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2060,"y":1340,"wires":[]},{"id":"ed823bc8.82bdd8","type":"link in","z":"21d3abd9.0eac04","name":"Get DeviceID (Homekit, z2m)","links":["8d86b841.5a7bf8"],"x":1640,"y":1500,"wires":[["9c4fd4c9.a4e8b8"]],"l":true},{"id":"2be88f8a.5d611","type":"link in","z":"21d3abd9.0eac04","name":"Got DeviceID","links":["eed4538e.61667"],"x":1670,"y":1560,"wires":[["9d5540e2.735f9"]],"l":true},{"id":"20fb9dce.0199c2","type":"change","z":"21d3abd9.0eac04","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"set","p":"exportableresults.DeviceID","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2660,"y":1480,"wires":[["c4e12f31.d478f","cdefd118.557d7"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"a6dcfb5b.f8fc38","type":"subflow:11c4fe96.587e41","z":"21d3abd9.0eac04","name":"","env":[],"x":2401,"y":1500,"wires":[["20fb9dce.0199c2","f3e253bd.e51f8"],["5764c928.10de68"],["6ecff007.0fc5"]]},{"id":"6023b7cc.a90108","type":"inject","z":"21d3abd9.0eac04","name":"Delete Devices for Testing","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":1710,"y":1440,"wires":[["3c0e1bf6.a659e4"]]},{"id":"3c0e1bf6.a659e4","type":"change","z":"21d3abd9.0eac04","name":"","rules":[{"t":"delete","p":"Devices","pt":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":1980,"y":1440,"wires":[[]]},{"id":"c4e12f31.d478f","type":"function","z":"21d3abd9.0eac04","name":"Move Data from searchfor to exportableresults","func":"//debugger\nlet foundKeys = Object.keys(msg.searchfor)\nlet foundValues = Object.values(msg.searchfor)\n//loop through all keys and a\nfor (index = 0; index < foundKeys.length; index++)\n{\n    if(foundValues[index]!== \"\")\n    {\n    msg.exportableresults[foundKeys[index]] = foundValues[index]\n    }\n}\ndelete msg.searchfor\nreturn msg","outputs":1,"noerr":0,"x":2980,"y":1480,"wires":[["67706ee9.523a4","eed4538e.61667"]],"info":"This node moves each property under the msg.searchfor property to the msg.exportableresults property."},{"id":"9c4fd4c9.a4e8b8","type":"change","z":"21d3abd9.0eac04","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1911,"y":1500,"wires":[["696bfe64.20e7d","9f12d13d.74f61"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"696bfe64.20e7d","type":"change","z":"21d3abd9.0eac04","name":"Devices Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Floor","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Location","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Room","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.DeviceType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.AccessProtocol","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.PhysicalVirtualType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.House","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.MQTTDeviceTopic","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Hub","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2171,"y":1500,"wires":[["a6dcfb5b.f8fc38","b21c14c5.5c09d8"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"853692e0.a04ef","type":"link in","z":"21d3abd9.0eac04","name":"Get Measurement Name Update (All 3)","links":["9d5540e2.735f9"],"x":1710,"y":1860,"wires":[["b329d715.7c3c38"]],"l":true},{"id":"9d5540e2.735f9","type":"link out","z":"21d3abd9.0eac04","name":"Get Measurement Name Update","links":["853692e0.a04ef"],"x":2070,"y":1560,"wires":[],"l":true},{"id":"7eed7fda.c5607","type":"link in","z":"21d3abd9.0eac04","name":"Got Measurement Name Update","links":["7b16132c.2f6eac"],"x":1730,"y":1900,"wires":[["a7f02023.cc1cc"]],"l":true},{"id":"eed4538e.61667","type":"link out","z":"21d3abd9.0eac04","name":"Got Device ID","links":["2be88f8a.5d611"],"x":3280,"y":1480,"wires":[],"l":true},{"id":"3de7495c.7e7306","type":"comment","z":"21d3abd9.0eac04","name":"DeviceID lookup is needed for MQTT (and Homebridge?), but not Hubitat devices","info":"","x":1880,"y":1400,"wires":[]},{"id":"a66a7aeb.0ba8d8","type":"change","z":"21d3abd9.0eac04","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3300,"y":1800,"wires":[["cd5c6e40.5f485"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"9fd40209.1324a","type":"subflow:11c4fe96.587e41","z":"21d3abd9.0eac04","name":"","env":[],"x":3020,"y":1860,"wires":[["a66a7aeb.0ba8d8","a78c4345.aa3de"],["c2ca020b.bc0ab"],["ced502d7.0fa4b","5e38669.dd7cf98","a78c4345.aa3de"]]},{"id":"b329d715.7c3c38","type":"change","z":"21d3abd9.0eac04","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"E","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"200","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2010,"y":1860,"wires":[["a005651a.514738","c8cb75ed.c50578"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"a005651a.514738","type":"change","z":"21d3abd9.0eac04","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"keyvalues.SourceDevice","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.ChangeNameTo","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2340,"y":1860,"wires":[["d9d54bc1.230708","ae387232.96ec2"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"67706ee9.523a4","type":"debug","z":"21d3abd9.0eac04","name":"1.1 DevID Lookup Success","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3320,"y":1440,"wires":[]},{"id":"c2ca020b.bc0ab","type":"debug","z":"21d3abd9.0eac04","name":"flow 2.2 temp no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3280,"y":1840,"wires":[]},{"id":"ced502d7.0fa4b","type":"debug","z":"21d3abd9.0eac04","name":"2.3a Need to update MeasurementTranslations Table","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3380,"y":1920,"wires":[]},{"id":"239f485f.dcfe28","type":"debug","z":"21d3abd9.0eac04","name":"2.1 rename lookup success","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3720,"y":1760,"wires":[]},{"id":"cd5c6e40.5f485","type":"function","z":"21d3abd9.0eac04","name":"Move Name Change from searchfor to exportableresults","func":"msg.exportableresults.Measure = msg.searchfor.ChangeNameTo\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":3650,"y":1800,"wires":[["239f485f.dcfe28","7b16132c.2f6eac"]]},{"id":"7b16132c.2f6eac","type":"link out","z":"21d3abd9.0eac04","name":"Got Measurement Name Update","links":["7eed7fda.c5607"],"x":4050,"y":1820,"wires":[],"l":true},{"id":"a7f02023.cc1cc","type":"link out","z":"21d3abd9.0eac04","name":"Get Potential Translation Update","links":["3cfcc9c0.f82c56"],"x":2070,"y":1900,"wires":[],"l":true},{"id":"3cfcc9c0.f82c56","type":"link in","z":"21d3abd9.0eac04","name":"Get Potential Translation Update (Homebridge Only)","links":["a7f02023.cc1cc"],"x":1710,"y":2380,"wires":[["22edc713.3074c8"]],"l":true},{"id":"7137539.388f2ac","type":"link in","z":"21d3abd9.0eac04","name":"Got Potential Translation Update","links":["ccac49ee.bb2578","5f60c3f1.ff0fbc","b180e64b.d51548","164f4e1b.d39d62","bbc4a5e6.1a5468"],"x":1650,"y":2920,"wires":[["4e116afc.1f3644","3ef8b4e2.34911c"]],"l":true},{"id":"ccac49ee.bb2578","type":"link out","z":"21d3abd9.0eac04","name":"Got Potential Translation Update","links":["7137539.388f2ac"],"x":4470,"y":2300,"wires":[],"l":true},{"id":"56f2273b.4409d8","type":"function","z":"21d3abd9.0eac04","name":"Move Name Change from searchfor to exportableresults","func":"msg.TranslationType = msg.searchfor.TranslationType\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":3310,"y":2360,"wires":[["4a45ad0a.9ad284","d3701d93.5df66"]]},{"id":"b8bbca46.131788","type":"change","z":"21d3abd9.0eac04","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2960,"y":2360,"wires":[["56f2273b.4409d8","a1933ef6.06254"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"137fe9fb.596726","type":"change","z":"21d3abd9.0eac04","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.TranslationType","pt":"msg","to":"","tot":"str"},{"t":"delete","p":"searchErrorCount","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2380,"y":2380,"wires":[["1aad3cdd.4d21f3","382c067b.55687a"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"22edc713.3074c8","type":"change","z":"21d3abd9.0eac04","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"C","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"100","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2050,"y":2380,"wires":[["137fe9fb.596726","1fc7f252.87c38e"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"5e38669.dd7cf98","type":"change","z":"21d3abd9.0eac04","name":"Remove Excess Properties when No Name Change Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3400,"y":1880,"wires":[["7b16132c.2f6eac","b66f2b3b.88ff38"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"26f51c04.cfa8d4","type":"change","z":"21d3abd9.0eac04","name":"Remove Excess Properties when No Data Translation Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3060,"y":2400,"wires":[["bbc4a5e6.1a5468"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"75436cad.368b14","type":"switch","z":"21d3abd9.0eac04","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":4240,"y":2240,"wires":[["d4e3070e.d5d9b8","4f89bf70.9f7b4"],["73c334e.30d3dcc","4f89bf70.9f7b4"]],"outputLabels":["True","False"]},{"id":"d4e3070e.d5d9b8","type":"change","z":"21d3abd9.0eac04","name":"Value True","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":4410,"y":2220,"wires":[["b180e64b.d51548","4f89bf70.9f7b4"]]},{"id":"73c334e.30d3dcc","type":"change","z":"21d3abd9.0eac04","name":"Value False","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"false","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":4410,"y":2260,"wires":[["b180e64b.d51548","4f89bf70.9f7b4"]]},{"id":"b95066d5.652688","type":"change","z":"21d3abd9.0eac04","name":"CtoF Translate","rules":[{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"msg.exportableresults.Measure&\" F\"\t","tot":"jsonata"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"msg.exportableresults.Reading*9/5+32","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":4240,"y":2300,"wires":[["ccac49ee.bb2578"]]},{"id":"24991536.c5a64a","type":"switch","z":"21d3abd9.0eac04","name":"CurrentHeatingCoolingState Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"},{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":4310,"y":2400,"wires":[["8718b836.1bf1b8"],["38f74937.b47456"],["72f3099a.c65bb8"],["1a4dfaa1.78f025"]],"outputLabels":["off","heat","cool","heat-cool"]},{"id":"8718b836.1bf1b8","type":"change","z":"21d3abd9.0eac04","name":"Value Off","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"off","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4560,"y":2340,"wires":[["164f4e1b.d39d62"]]},{"id":"38f74937.b47456","type":"change","z":"21d3abd9.0eac04","name":"Value Heat","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4570,"y":2380,"wires":[["164f4e1b.d39d62"]]},{"id":"72f3099a.c65bb8","type":"change","z":"21d3abd9.0eac04","name":"Value Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4570,"y":2420,"wires":[["164f4e1b.d39d62"]]},{"id":"1a4dfaa1.78f025","type":"change","z":"21d3abd9.0eac04","name":"Value Heat-Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat-cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4580,"y":2460,"wires":[["164f4e1b.d39d62"]]},{"id":"21671894.9258c8","type":"switch","z":"21d3abd9.0eac04","name":"","property":"TranslationType","propertyType":"msg","rules":[{"t":"eq","v":"10TF","vt":"str"},{"t":"eq","v":"C2F","vt":"str"},{"t":"eq","v":"NestThMap","vt":"str"},{"t":"eq","v":"012CF","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":4030,"y":2340,"wires":[["75436cad.368b14"],["b95066d5.652688","e674eac4.55fbf8"],["24991536.c5a64a"],["d4d0b7e0.1fc028"]],"outputLabels":["1 or 0 to True or False Map","Celcius to Fahrenheit Conversion","Nest Thermostat Map","Celcius or Fahrenheit Map"]},{"id":"d4d0b7e0.1fc028","type":"switch","z":"21d3abd9.0eac04","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":4240,"y":2520,"wires":[["cab3bc7e.3e1ff"],["404fa35.cbf825c"]],"outputLabels":["True","False"]},{"id":"cab3bc7e.3e1ff","type":"change","z":"21d3abd9.0eac04","name":"Value Fahrenheit","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Fahrenheit","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4430,"y":2500,"wires":[["5f60c3f1.ff0fbc"]]},{"id":"404fa35.cbf825c","type":"change","z":"21d3abd9.0eac04","name":"Value Celcius","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Celcius","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":4420,"y":2540,"wires":[["5f60c3f1.ff0fbc"]]},{"id":"4a45ad0a.9ad284","type":"switch","z":"21d3abd9.0eac04","name":"Translation Needed?","property":"TranslationType","propertyType":"msg","rules":[{"t":"neq","v":"null","vt":"str"},{"t":"eq","v":"null","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":3640,"y":2360,"wires":[["21671894.9258c8","41a0be67.45a7c"],["bbc4a5e6.1a5468","623492a.e123f6c"]]},{"id":"3ef8b4e2.34911c","type":"change","z":"21d3abd9.0eac04","name":"Excess Properties Removal","rules":[{"t":"delete","p":"searchErrorCount","pt":"msg"},{"t":"delete","p":"error","pt":"msg"},{"t":"delete","p":"TranslationType","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1980,"y":2920,"wires":[["aabb53bc.6224b","e6b76e04.403d6"]]},{"id":"aabb53bc.6224b","type":"debug","z":"21d3abd9.0eac04","name":"Catch Excess Properties Removal","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2200,"y":2820,"wires":[]},{"id":"b180e64b.d51548","type":"link out","z":"21d3abd9.0eac04","name":"Got Potential Translation Update","links":["7137539.388f2ac"],"x":4630,"y":2240,"wires":[],"l":true},{"id":"164f4e1b.d39d62","type":"link out","z":"21d3abd9.0eac04","name":"Got Potential Translation Update","links":["7137539.388f2ac"],"x":4850,"y":2400,"wires":[],"l":true},{"id":"5f60c3f1.ff0fbc","type":"link out","z":"21d3abd9.0eac04","name":"Got Potential Translation Update","links":["7137539.388f2ac"],"x":4670,"y":2520,"wires":[],"l":true},{"id":"bbc4a5e6.1a5468","type":"link out","z":"21d3abd9.0eac04","name":"Got Potential Translation Update","links":["7137539.388f2ac"],"x":3930,"y":2400,"wires":[],"l":true},{"id":"e6b76e04.403d6","type":"function","z":"21d3abd9.0eac04","name":"Format for InfluxDB & MQTT","func":"//Ref. TMS-000002\n/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.exportableresults.DeviceID;\n//node.warn(\"11 \"+ deviceID)\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar typeOfMeasurement = msg.exportableresults.Measure;\n\n//gather the actual measurement value that was sent by the device to be included as the data for the field (when the measurement is valid) sent to InfluxDB\nvar theData = msg.exportableresults.Reading;\n//initialize the measurements object\nvar measurementsObj = {};\n\n//initialize the tags (indices) object\nvar tagsObj = {};\n\n//create the object that will later be used to combine the measurementsObj and tagsObj\nvar combinedObj;\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\nif (msg.exportableresults.hasOwnProperty('dataType'))\n{\n    if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    {\n        if (typeof theData == 'number')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched number\" });\n            if (!theData.isNaN)\n            {\n                validMeasurement = true;\n            }\n        }\n        else if (typeof theData == 'string')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched string\" });\n            if (theData.length >= 0)\n            {\n                validMeasurement = true;\n            }\n        } \n        else if (typeof theData == 'boolean')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched boolean\" });\n            validMeasurement = true;\n        }\n        else if (msg.exportableresults.dataType == 'ENUM')\n        { //This is checking to make sure the value matches one of the values in the ENUM from the device \n            node.status({ fill: \"red\", shape: \"ring\", text: msg.exportableresults.dataType + \" matched ENUM\" });\n            msg.exportableresults.values.forEach(element => {\n                if (flow.get(deviceID + element) == theData)\n                {\n                    validMeasurement = true;\n                }\n            })\n        }\n        else if (theData === null)\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched null data\" });\n            nullData = true;\n        }\n        else\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched nonstandardtype\" });\n            nonStandardType = true;\n        }\n    } //if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    else\n    {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"measurement type mismatch\" });\n        measurementTypeMismatch = true;\n    } //else  if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n}//if(msg.exportableresults.hasOwnProperty('dataType'))\nelse\n{\n    validMeasurement = true;\n}// else      if(msg.exportableresults.hasOwnProperty('dataType')) else\n\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\", \"PhysicalDigitalRegular\"]\nfor (innerIndex = 0; innerIndex < commonTags.length; innerIndex++)\n{\n    if (msg.exportableresults.hasOwnProperty(commonTags[innerIndex]))\n    {\n        tagsObj[commonTags[innerIndex]] = msg.exportableresults[commonTags[innerIndex]]\n    } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n} //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    //node.warn(\"94 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"113 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"123 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n\n//put the object into the payload\nmsg.payload = combinedObj;\n\n//build the status to be shown on the status of the subnode\nmsg.status = msg.exportableresults.DeviceName + \": \" + typeOfMeasurement + \": \" + theData;\n\n/* MQTT section \n * \n * \n * \n */\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = msg.exportableresults.MQTTname +\"/\"+msg.exportableresults.MQTTDeviceTopic+\"/\"+ msg.exportableresults.Measure\n//add the data to be recorded to MQTT\nmsg2.payload = theData\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nif (!nullData) {\n    return [msg, msg2]\n}","outputs":2,"noerr":0,"x":2260,"y":2920,"wires":[["490ae629.a8fba8","57de977d.7ab0d8","1e7657d3.0d7bc8"],["a0bd421e.607eb","fe44cf6f.da115"]]},{"id":"490ae629.a8fba8","type":"debug","z":"21d3abd9.0eac04","name":"4.1 Output 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2530,"y":2840,"wires":[]},{"id":"a0bd421e.607eb","type":"debug","z":"21d3abd9.0eac04","name":"4.2 Output 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2530,"y":3020,"wires":[]},{"id":"57de977d.7ab0d8","type":"influxdb out","z":"21d3abd9.0eac04","influxdb":"82aca41a.30fed8","name":"","measurement":"Smarthome","precision":"","retentionPolicy":"","x":2650,"y":2880,"wires":[]},{"id":"1e7657d3.0d7bc8","type":"change","z":"21d3abd9.0eac04","name":"Move Status to Payload for Consumption by Status Node","rules":[{"t":"set","p":"payload","pt":"msg","to":"status","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2670,"y":2920,"wires":[["3a9445b6.12c60a"]]},{"id":"fe44cf6f.da115","type":"mqtt out","z":"21d3abd9.0eac04","name":"Write reading to MQTT","topic":"","qos":"1","retain":"true","broker":"a5bf81ee.27852","x":2560,"y":2960,"wires":[]},{"id":"3a9445b6.12c60a","type":"debug","z":"21d3abd9.0eac04","name":"4.3 Output  For Status node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3040,"y":2920,"wires":[]},{"id":"5764c928.10de68","type":"debug","z":"21d3abd9.0eac04","name":"flow 1.2 temp no find","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2640,"y":1520,"wires":[]},{"id":"6ecff007.0fc5","type":"debug","z":"21d3abd9.0eac04","name":"flow 1.3 Need to update the Devices Table","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2700,"y":1560,"wires":[]},{"id":"d9d54bc1.230708","type":"function","z":"21d3abd9.0eac04","name":"Optionally Simplify msg.keyvalues.Measurement","func":"if (msg.keyvalues.Measurement.includes(\"/\"))\n{msg.keyvalues.Measurement = msg.keyvalues.Measurement.substring(msg.keyvalues.Measurement.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2720,"y":1860,"wires":[["85c8fbe4.c62a98","9fd40209.1324a"]]},{"id":"ae387232.96ec2","type":"debug","z":"21d3abd9.0eac04","name":"before","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2450,"y":1820,"wires":[]},{"id":"85c8fbe4.c62a98","type":"debug","z":"21d3abd9.0eac04","name":"after","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2810,"y":1820,"wires":[]},{"id":"b66f2b3b.88ff38","type":"debug","z":"21d3abd9.0eac04","name":"flow 2.3b If translation desired fail, otherwise succes Table?","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4000,"y":1880,"wires":[]},{"id":"4e116afc.1f3644","type":"debug","z":"21d3abd9.0eac04","name":"flow 3 output","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1850,"y":2860,"wires":[]},{"id":"4f89bf70.9f7b4","type":"debug","z":"21d3abd9.0eac04","name":"flow 3 SS settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4410,"y":2140,"wires":[]},{"id":"9f12d13d.74f61","type":"debug","z":"21d3abd9.0eac04","name":"Catch Spread Lookup","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2240,"y":1440,"wires":[]},{"id":"b21c14c5.5c09d8","type":"debug","z":"21d3abd9.0eac04","name":"Catch Devices Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2450,"y":1400,"wires":[]},{"id":"f3e253bd.e51f8","type":"debug","z":"21d3abd9.0eac04","name":"Catch Lookup Desired Data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2660,"y":1440,"wires":[]},{"id":"cdefd118.557d7","type":"debug","z":"21d3abd9.0eac04","name":"Catch Remove Excess Properties","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2980,"y":1440,"wires":[]},{"id":"c8cb75ed.c50578","type":"debug","z":"21d3abd9.0eac04","name":"Catch Spreadsheet Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2010,"y":1820,"wires":[]},{"id":"a78c4345.aa3de","type":"debug","z":"21d3abd9.0eac04","name":"Catch Lookup Desired Data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3080,"y":1720,"wires":[]},{"id":"1fc7f252.87c38e","type":"debug","z":"21d3abd9.0eac04","name":"Catch Spreadsheet Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2030,"y":2340,"wires":[]},{"id":"1aad3cdd.4d21f3","type":"debug","z":"21d3abd9.0eac04","name":"Catch Measurement Translation Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2460,"y":2320,"wires":[]},{"id":"382c067b.55687a","type":"function","z":"21d3abd9.0eac04","name":"Optionally Simplify msg.keyvalues.Measurement","func":"if (msg.keyvalues.Measurement.includes(\"/\"))\n{msg.keyvalues.Measurement = msg.keyvalues.Measurement.substring(msg.keyvalues.Measurement.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2840,"y":2140,"wires":[["bb7b9d7d.ed8","3f5f6352.e1a8ac"]]},{"id":"26133c99.e1d374","type":"debug","z":"21d3abd9.0eac04","name":"3.1 Catch Translation Lookup Success","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3810,"y":2060,"wires":[]},{"id":"6594f023.107f1","type":"debug","z":"21d3abd9.0eac04","name":"3.2 Catch Translation Lookup Partial Failure","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3850,"y":2100,"wires":[]},{"id":"603b1248.19c32c","type":"debug","z":"21d3abd9.0eac04","name":"3.3 Catch Translation Lookup Repeated Failure","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3860,"y":2140,"wires":[]},{"id":"bb7b9d7d.ed8","type":"debug","z":"21d3abd9.0eac04","name":"catch Optionally Simplify msg.keyvalues.Measurement","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2900,"y":2100,"wires":[]},{"id":"a1933ef6.06254","type":"debug","z":"21d3abd9.0eac04","name":"Catch Remove Excess Properties","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2960,"y":2320,"wires":[]},{"id":"d3701d93.5df66","type":"debug","z":"21d3abd9.0eac04","name":"Catch Move Name Change from searchfor to exportableresults","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3350,"y":2320,"wires":[]},{"id":"41a0be67.45a7c","type":"debug","z":"21d3abd9.0eac04","name":"1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3710,"y":2240,"wires":[]},{"id":"623492a.e123f6c","type":"debug","z":"21d3abd9.0eac04","name":"2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3690,"y":2280,"wires":[]},{"id":"8249d98c.11d028","type":"function","z":"21d3abd9.0eac04","name":"Optionally Simplify msg.exportableresults.Measure","func":"if (msg.exportableresults.Measure.includes(\"/\"))\n{msg.exportableresults.Measure = msg.exportableresults.Measure.substring(msg.exportableresults.Measure.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2090,"y":1300,"wires":[["8d86b841.5a7bf8"]]},{"id":"e674eac4.55fbf8","type":"debug","z":"21d3abd9.0eac04","name":"Catch C2F translation input","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4610,"y":2660,"wires":[]},{"id":"1de9e969.7aaab7","type":"inject","z":"21d3abd9.0eac04","name":"Start Monitoring All Homebridge Controlled Devices","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":2570,"y":2040,"wires":[["b0eca160.5841f"]]},{"id":"c9c29a26.1e6478","type":"debug","z":"21d3abd9.0eac04","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1190,"y":1620,"wires":[]},{"id":"52d8574.7dfe7a8","type":"delay","z":"21d3abd9.0eac04","name":"","pauseType":"delay","timeout":"10","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1080,"y":2000,"wires":[["c9c29a26.1e6478"]]},{"id":"b23c4ee2.cc7bf","type":"config","z":"ae9f4368.0ac45","name":"HB001 Anyone Presence","properties":[{"p":"HB001Floor","pt":"flow","to":"","tot":"str"},{"p":"HB001Location","pt":"flow","to":"","tot":"str"},{"p":"HB001Room","pt":"flow","to":"","tot":"str"},{"p":"HB001DeviceType","pt":"flow","to":"Presence","tot":"str"},{"p":"HB001Manufacturer","pt":"flow","to":"homebridge-people-geofence","tot":"str"},{"p":"HB001AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB001PhysicalVirtualType","pt":"flow","to":"Virtual","tot":"str"},{"p":"HB001PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB001House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB001MQTTDeviceTopic","pt":"flow","to":"Anyone Present","tot":"str"},{"p":"HB001OccupancyDetected","pt":"flow","to":"10TF","tot":"str"}],"active":true,"x":250,"y":200,"wires":[]},{"id":"70a8f6d3.9a77d8","type":"config","z":"ae9f4368.0ac45","name":"HB002 Downstairs Carbon Monoxide","properties":[{"p":"HB002Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB002Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB002Room","pt":"flow","to":"Mini-Hall","tot":"str"},{"p":"HB002DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB002Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB002AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB002PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB002PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB002House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB002MQTTDeviceTopic","pt":"flow","to":"Downwstair Hall Nest Protect","tot":"str"},{"p":"HB002CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB002StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB002StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB002ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":290,"y":959,"wires":[]},{"id":"de8c5238.528a6","type":"comment","z":"ae9f4368.0ac45","name":"Presence Sensors","info":"","x":230,"y":160,"wires":[]},{"id":"2f699103.6b5bfe","type":"comment","z":"ae9f4368.0ac45","name":"Placeholder Kathy Home","info":"","x":250,"y":440,"wires":[]},{"id":"bc2cd09b.d6a9e","type":"config","z":"ae9f4368.0ac45","name":"HB003 Downstairs Motion Sensor","properties":[{"p":"HB003Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB003Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB003Room","pt":"flow","to":"Mini-Hall","tot":"str"},{"p":"HB003DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB003Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB003AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB003PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB003PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB003House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB003MQTTDeviceTopic","pt":"flow","to":"Downwstair Hall Nest Protect","tot":"str"},{"p":"HB003MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":280,"y":2000,"wires":[]},{"id":"ca785eb2.b034e","type":"config","z":"ae9f4368.0ac45","name":"HB004 Downstairs Smoke","properties":[{"p":"HB004Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB004Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB004Room","pt":"flow","to":"Mini-Hall","tot":"str"},{"p":"HB004DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB004Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB004AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB004PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB004PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB004House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB004MQTTDeviceTopic","pt":"flow","to":"Downwstair Hall Nest Protect","tot":"str"},{"p":"HB004SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB004StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB004StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB004ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":250,"y":2680,"wires":[]},{"id":"df1a4f52.beda7","type":"config","z":"ae9f4368.0ac45","name":"HB005 Gratuity Thermostat Eco ","properties":[{"p":"HB005Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB005Location","pt":"flow","to":"North","tot":"str"},{"p":"HB005Room","pt":"flow","to":"Upstairs Hall","tot":"str"},{"p":"HB005DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"HB005Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB005AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB005PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB005PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB005House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB005MQTTDeviceTopic","pt":"flow","to":"Nest Thermostat Eco Mode","tot":"str"},{"p":"HB005On","pt":"flow","to":"null","tot":"str"}],"active":true,"x":270,"y":1640,"wires":[]},{"id":"f474a7c2.390498","type":"config","z":"ae9f4368.0ac45","name":"HB006 Gratuity Thermostat Fan","properties":[{"p":"HB006Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB006Location","pt":"flow","to":"North","tot":"str"},{"p":"HB006Room","pt":"flow","to":"Upstairs Hall","tot":"str"},{"p":"HB006DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"HB006Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB006AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB006PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB006PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB006House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB006MQTTDeviceTopic","pt":"flow","to":"Nest Thermostat Fan Mode","tot":"str"},{"p":"HB006On","pt":"flow","to":"null","tot":"str"}],"active":true,"x":270,"y":1720,"wires":[]},{"id":"e398a992.091068","type":"config","z":"ae9f4368.0ac45","name":"HB007 Gratuity Thermostat","properties":[{"p":"HB007Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB007Location","pt":"flow","to":"North","tot":"str"},{"p":"HB007Room","pt":"flow","to":"Upstairs Hall","tot":"str"},{"p":"HB007DeviceType","pt":"flow","to":"Thermostat","tot":"str"},{"p":"HB007Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB007AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB007PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB007PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB007House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB007MQTTDeviceTopic","pt":"flow","to":"Nest Thermostat","tot":"str"},{"p":"HB007CurrentHeatingCoolingState","pt":"flow","to":"NestThMap","tot":"str"},{"p":"HB007TargetHeatingCoolingState","pt":"flow","to":"NestThMap","tot":"str"},{"p":"HB007CurrentTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007TargetTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007TemperatureDisplayUnits","pt":"flow","to":"012CF","tot":"str"},{"p":"HB007CurrentRelativeHumidity","pt":"flow","to":"null","tot":"str"},{"p":"HB007CoolingThresholdTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007HeatingThresholdTemperature","pt":"flow","to":"C2F","tot":"str"},{"p":"HB007StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB007FanTimerActive","pt":"flow","to":"null","tot":"str"},{"p":"HB007FanTimerDuration","pt":"flow","to":"null","tot":"str"},{"p":"HB007HasLeaf","pt":"flow","to":"null","tot":"str"},{"p":"HB007SunlightCorrectionEnabled","pt":"flow","to":"null","tot":"str"},{"p":"HB007SunlightCorrectionActive","pt":"flow","to":"null","tot":"str"},{"p":"HB007UsingEmergencyHeat","pt":"flow","to":"null","tot":"str"}],"active":true,"x":260,"y":1800,"wires":[]},{"id":"f3599fc9.77db","type":"config","z":"ae9f4368.0ac45","name":"HB009 Mike Home Presence","properties":[{"p":"HB009Floor","pt":"flow","to":"","tot":"str"},{"p":"HB009Location","pt":"flow","to":"","tot":"str"},{"p":"HB009Room","pt":"flow","to":"","tot":"str"},{"p":"HB009DeviceType","pt":"flow","to":"Presence","tot":"str"},{"p":"HB009Manufacturer","pt":"flow","to":"homebridge-people-geofence","tot":"str"},{"p":"HB009AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB009PhysicalVirtualType","pt":"flow","to":"Virtual","tot":"str"},{"p":"HB009PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB009House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB009MQTTDeviceTopic","pt":"flow","to":"Mike Home","tot":"str"},{"p":"HB009OccupancyDetected","pt":"flow","to":"10TF","tot":"str"}],"active":true,"x":260,"y":280,"wires":[]},{"id":"18570212.14211e","type":"comment","z":"ae9f4368.0ac45","name":"Placeholder Eva Home","info":"","x":240,"y":520,"wires":[]},{"id":"e28d3813.251358","type":"comment","z":"ae9f4368.0ac45","name":"Placeholder Eva LTHS","info":"","x":240,"y":600,"wires":[]},{"id":"ab9d9e1.bc8386","type":"comment","z":"ae9f4368.0ac45","name":"Placeholder Eva CTE","info":"","x":240,"y":680,"wires":[]},{"id":"83649ec7.e8f27","type":"comment","z":"ae9f4368.0ac45","name":"Placeholder Eva Dance","info":"","x":240,"y":760,"wires":[]},{"id":"d1d024b3.9b8918","type":"comment","z":"ae9f4368.0ac45","name":"Placeholder Kathy Dance","info":"","x":250,"y":840,"wires":[]},{"id":"478e962b.2c7bc8","type":"comment","z":"ae9f4368.0ac45","name":"Placeholder Mike Work","info":"","x":240,"y":360,"wires":[]},{"id":"1ec76b12.145df5","type":"comment","z":"ae9f4368.0ac45","name":"Nest Protect CO","info":"","x":220,"y":920,"wires":[]},{"id":"e4ec0d7b.66cdb","type":"config","z":"ae9f4368.0ac45","name":"HB010 Eva Hallway Carbon Monoxide","properties":[{"p":"HB010Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB010Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB010Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB010DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB010Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB010AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB010PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB010PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB010House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB010MQTTDeviceTopic","pt":"flow","to":"Eva Hallway Nest Protect","tot":"str"},{"p":"HB010CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB010StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB010StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB010ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":290,"y":1040,"wires":[]},{"id":"7dcf4510.4aed4c","type":"config","z":"ae9f4368.0ac45","name":"HB011 Eva's Bedroom Carbon Monoxide","properties":[{"p":"HB011Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB011Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB011Room","pt":"flow","to":"Eva's Room","tot":"str"},{"p":"HB011DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB011Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB011AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB011PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB011PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB011House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB011MQTTDeviceTopic","pt":"flow","to":"Eva's Bedroom Nest Protect","tot":"str"},{"p":"HB011CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB011StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB011StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB011ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":300,"y":1120,"wires":[]},{"id":"af9a506d.c30ed","type":"config","z":"ae9f4368.0ac45","name":"HB012 Game Room Carbon Monoxide","properties":[{"p":"HB012Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB012Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB012Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB012DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB012Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB012AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB012PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB012PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB012House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB012MQTTDeviceTopic","pt":"flow","to":"Game Room Nest Protect","tot":"str"},{"p":"HB012CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB012StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB012StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB012ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":290,"y":1200,"wires":[]},{"id":"f6266448.f009e8","type":"config","z":"ae9f4368.0ac45","name":"HB013 Guest Bedroom Carbon Monoxide","properties":[{"p":"HB013Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB013Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB013Room","pt":"flow","to":"Guest Room","tot":"str"},{"p":"HB013DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB013Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB013AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB013PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB013PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB013House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB013MQTTDeviceTopic","pt":"flow","to":"Guest Room Nest Protect","tot":"str"},{"p":"HB013CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB013StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB013StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB013ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":300,"y":1280,"wires":[]},{"id":"e214e977.6fce78","type":"config","z":"ae9f4368.0ac45","name":"HB014 Master Bedroom Carbon Monoxide","properties":[{"p":"HB014Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB014Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB014Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"HB014DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB014Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB014AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB014PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB014PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB014House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB014MQTTDeviceTopic","pt":"flow","to":"Master Bedroom Nest Protect","tot":"str"},{"p":"HB014CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB014StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB014StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB014ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":310,"y":1360,"wires":[]},{"id":"f71f437.77745c","type":"config","z":"ae9f4368.0ac45","name":"HB015 Toy Room Carbon Monoxide","properties":[{"p":"HB015Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB015Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB015Room","pt":"flow","to":"Toy Room","tot":"str"},{"p":"HB015DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB015Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB015AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB015PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB015PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB015House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB015MQTTDeviceTopic","pt":"flow","to":"Toy Room Nest Protect","tot":"str"},{"p":"HB015CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB015StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB015StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB015ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":280,"y":1440,"wires":[]},{"id":"d59ebc1.6ba674","type":"config","z":"ae9f4368.0ac45","name":"HB016 Toy Room Hallway Carbon Monoxide","properties":[{"p":"HB016Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB016Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB016Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB016DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB016Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB016AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB016PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB016PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB016House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB016MQTTDeviceTopic","pt":"flow","to":"Toy Room Hallway Nest Protect","tot":"str"},{"p":"HB016CarbonMonoxideDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB016StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB016StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB016ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":310,"y":1520,"wires":[]},{"id":"763968e8.acb2a8","type":"config","z":"ae9f4368.0ac45","name":"HB017 Eva Hallway Motion Sensor","properties":[{"p":"HB017Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB017Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB017Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB017DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB017Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB017AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB017PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB017PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB017House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB017MQTTDeviceTopic","pt":"flow","to":"Eva Hallway Nest Protect","tot":"str"},{"p":"HB017MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":280,"y":2080,"wires":[]},{"id":"1ad884c4.559bfb","type":"config","z":"ae9f4368.0ac45","name":"HB018 Eva's Bedroom Motion Sensor","properties":[{"p":"HB018Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB018Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB018Room","pt":"flow","to":"Eva's Room","tot":"str"},{"p":"HB018DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB018Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB018AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB018PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB018PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB018House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB018MQTTDeviceTopic","pt":"flow","to":"Eva's Bedroom Nest Protect","tot":"str"},{"p":"HB018MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":290,"y":2160,"wires":[]},{"id":"88df91c8.f3b79","type":"config","z":"ae9f4368.0ac45","name":"HB020 Guest Room Motion Sensor","properties":[{"p":"HB020Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB020Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB020Room","pt":"flow","to":"Guest Room","tot":"str"},{"p":"HB020DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB020Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB020AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB020PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB020PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB020House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB020MQTTDeviceTopic","pt":"flow","to":"Guest Room Nest Protect","tot":"str"},{"p":"HB020MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":280,"y":2320,"wires":[]},{"id":"20af9566.30e2fa","type":"config","z":"ae9f4368.0ac45","name":"HB021 Master Bedroom Motion Sensor","properties":[{"p":"HB021Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB021Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB021Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"HB021DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB021Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB021AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB021PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB021PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB021House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB021MQTTDeviceTopic","pt":"flow","to":"Master Bedroom Nest Protect","tot":"str"},{"p":"HB021MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":300,"y":2400,"wires":[]},{"id":"783f07a1.266f68","type":"config","z":"ae9f4368.0ac45","name":"HB022 Toy Room Motion Sensor","properties":[{"p":"HB022Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB022Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB022Room","pt":"flow","to":"Toy Room","tot":"str"},{"p":"HB022DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB022Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB022AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB022PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB022PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB022House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB022MQTTDeviceTopic","pt":"flow","to":"Toy Room Nest Protect","tot":"str"},{"p":"HB022MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":270,"y":2480,"wires":[]},{"id":"219a64f2.f41a5c","type":"config","z":"ae9f4368.0ac45","name":"HB023 Toy Room Hallway Motion Sensor","properties":[{"p":"HB023Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB023Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB023Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB023DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB023Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB023AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB023PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB023PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB023House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB023MQTTDeviceTopic","pt":"flow","to":"Toy Room Hallway Nest Protect","tot":"str"},{"p":"HB023MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":300,"y":2560,"wires":[]},{"id":"75f4ec59.2d52b4","type":"config","z":"ae9f4368.0ac45","name":"HB019 GameRoom Motion Sensor","properties":[{"p":"HB019Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB019Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB019Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB019DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB019Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB019AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB019PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB019PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB019House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB019MQTTDeviceTopic","pt":"flow","to":"Game Room Nest Protect","tot":"str"},{"p":"HB019MotionDetected","pt":"flow","to":"null","tot":"str"}],"active":true,"x":280,"y":2240,"wires":[]},{"id":"1a49669d.353ec9","type":"comment","z":"ae9f4368.0ac45","name":"Nest Protect Smoke","info":"","x":230,"y":2640,"wires":[]},{"id":"fa34712b.1963f","type":"config","z":"ae9f4368.0ac45","name":"HB024 Eva Hallway Smoke","properties":[{"p":"HB024Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB024Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB024Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB024DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB024Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB024AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB024PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB024PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB024House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB024MQTTDeviceTopic","pt":"flow","to":"Eva Hallway Nest Protect","tot":"str"},{"p":"HB024SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB024StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB024StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB024ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":260,"y":2760,"wires":[]},{"id":"d0948c62.03431","type":"config","z":"ae9f4368.0ac45","name":"HB025 Evas Bedroom Smoke","properties":[{"p":"HB025Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB025Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB025Room","pt":"flow","to":"Eva's Room","tot":"str"},{"p":"HB025DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB025Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB025AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB025PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB025PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB025House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB025MQTTDeviceTopic","pt":"flow","to":"Eva's Bedroom Nest Protect","tot":"str"},{"p":"HB025SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB025StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB025StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB025ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":270,"y":2840,"wires":[]},{"id":"d95b55e8.1e2038","type":"config","z":"ae9f4368.0ac45","name":"HB026 Game Room Smoke","properties":[{"p":"HB026Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB026Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB026Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB026DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB026Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB026AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB026PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB026PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB026House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB026MQTTDeviceTopic","pt":"flow","to":"Game Room Nest Protect","tot":"str"},{"p":"HB026SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB026StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB026StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB026ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":260,"y":2920,"wires":[]},{"id":"f3414.81c34bec8","type":"config","z":"ae9f4368.0ac45","name":"HB027 Guest Bedroom Smoke","properties":[{"p":"HB027Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB027Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB027Room","pt":"flow","to":"Guest Room","tot":"str"},{"p":"HB027DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB027Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB027AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB027PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB027PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB027House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB027MQTTDeviceTopic","pt":"flow","to":"Guest Room Nest Protect","tot":"str"},{"p":"HB027SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB027StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB027StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB027ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":270,"y":3000,"wires":[]},{"id":"bf9128cd.cab9f8","type":"config","z":"ae9f4368.0ac45","name":"HB028 Master Bedroom Smoke","properties":[{"p":"HB028Floor","pt":"flow","to":"1","tot":"str"},{"p":"HB028Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB028Room","pt":"flow","to":"Master Bedroom","tot":"str"},{"p":"HB028DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB028Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB028AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB028PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB028PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB028House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB028MQTTDeviceTopic","pt":"flow","to":"Master Bedroom Nest Protect","tot":"str"},{"p":"HB028SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB028StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB028StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB028ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":270,"y":3080,"wires":[]},{"id":"1e1a2543.eab2cb","type":"config","z":"ae9f4368.0ac45","name":"HB029 Toy Room Smoke","properties":[{"p":"HB029Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB029Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB029Room","pt":"flow","to":"Toy Room","tot":"str"},{"p":"HB029DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB029Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB029AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB029PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB029PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB029House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB029MQTTDeviceTopic","pt":"flow","to":"Toy Room Nest Protect","tot":"str"},{"p":"HB029SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB029StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB029StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB029ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":250,"y":3160,"wires":[]},{"id":"31a40921.2d04c6","type":"config","z":"ae9f4368.0ac45","name":"HB030 Toy Room Hallway Smoke","properties":[{"p":"HB030Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB030Location","pt":"flow","to":"Ceiling","tot":"str"},{"p":"HB030Room","pt":"flow","to":"Upstairs Hallway","tot":"str"},{"p":"HB030DeviceType","pt":"flow","to":"CO","tot":"str"},{"p":"HB030Manufacturer","pt":"flow","to":"Nest","tot":"str"},{"p":"HB030AccessProtocol","pt":"flow","to":"WIFI","tot":"str"},{"p":"HB030PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB030PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB030House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB030MQTTDeviceTopic","pt":"flow","to":"Toy Room Hallway Nest Protect","tot":"str"},{"p":"HB030SmokeDetected","pt":"flow","to":"10TF","tot":"str"},{"p":"HB030StatusLowBattery","pt":"flow","to":"10TF","tot":"str"},{"p":"HB030StatusActive","pt":"flow","to":"null","tot":"str"},{"p":"HB030ManualTestActive","pt":"flow","to":"null","tot":"str"}],"active":true,"x":280,"y":3240,"wires":[]},{"id":"6964248e.4ada4c","type":"comment","z":"ae9f4368.0ac45","name":"Nest Thermostat","info":"","x":220,"y":1600,"wires":[]},{"id":"a51d3bfc.155718","type":"config","z":"ae9f4368.0ac45","name":"HB031 Eve Motion Passthrough","properties":[{"p":"HB031Floor","pt":"flow","to":"2","tot":"str"},{"p":"HB031Location","pt":"flow","to":"South by Doorway","tot":"str"},{"p":"HB031Room","pt":"flow","to":"Game Room","tot":"str"},{"p":"HB031DeviceType","pt":"flow","to":"Motion Sensor","tot":"str"},{"p":"HB031Manufacturer","pt":"flow","to":"Eve","tot":"str"},{"p":"HB031AccessProtocol","pt":"flow","to":"Bluetooth","tot":"str"},{"p":"HB031PhysicalVirtualType","pt":"flow","to":"Physical","tot":"str"},{"p":"HB031PhysicalDigitalRegular","pt":"flow","to":"","tot":"str"},{"p":"HB031House","pt":"flow","to":"Ashmont","tot":"str"},{"p":"HB031MQTTDeviceTopic","pt":"flow","to":"Eve Motion Sensor","tot":"str"},{"p":"HB031On","pt":"flow","to":"null","tot":"str"}],"active":true,"x":270,"y":1920,"wires":[]},{"id":"344163f1.3bf3bc","type":"comment","z":"ae9f4368.0ac45","name":"Motion Sensors","info":"","x":220,"y":1880,"wires":[]},{"id":"bfbdf65e.040fe8","type":"link in","z":"ae9f4368.0ac45","name":"Prepopulate","links":["b0eca160.5841f","b981b46.b143448"],"x":510,"y":1240,"wires":[[]],"l":true},{"id":"8d0e5b48.22b4f8","type":"subflow:d078e2a6.ea488","z":"21d3abd9.0eac04","name":"","x":3220,"y":2140,"wires":[["26133c99.e1d374","b8bbca46.131788"],["6594f023.107f1"],["603b1248.19c32c","26f51c04.cfa8d4"]]},{"id":"3f5f6352.e1a8ac","type":"subflow:11c4fe96.587e41","z":"21d3abd9.0eac04","name":"","env":[],"x":3210,"y":2040,"wires":[["ca1532c3.3929c","b8bbca46.131788"],["cc2474ea.5fd968"],["5c58aab5.7786b4","26f51c04.cfa8d4"]]},{"id":"ca1532c3.3929c","type":"debug","z":"21d3abd9.0eac04","name":"x1a","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3450,"y":1960,"wires":[]},{"id":"cc2474ea.5fd968","type":"debug","z":"21d3abd9.0eac04","name":"x1b","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3470,"y":2000,"wires":[]},{"id":"5c58aab5.7786b4","type":"debug","z":"21d3abd9.0eac04","name":"x1c","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3470,"y":2040,"wires":[]},{"id":"ecc897f6.dac4d8","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Downstairs Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":670,"y":900,"wires":[["37366444.8f64ec"]]},{"id":"4a7ecb05.cf0244","type":"comment","z":"1dc4f0f5.2a52bf","name":"Presence Sensors","info":"","x":110,"y":100,"wires":[]},{"id":"99a9be7e.a5b9c","type":"comment","z":"1dc4f0f5.2a52bf","name":"Placeholder Kathy Home","info":"","x":130,"y":380,"wires":[]},{"id":"103ff788.c19668","type":"link in","z":"1dc4f0f5.2a52bf","name":"Jump In","links":["14f9bc1d.f94354","2c99821f.7ffdbe","38fe19c8.f34ae6","37366444.8f64ec","5bfaf22e.925bcc"],"x":1450,"y":60,"wires":[["1c30529.e0015ad","f8977228.a18cf"]],"l":true},{"id":"ccd7a48a.b67bc8","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Anyone","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerAnyone00000086","conf":"df59aa47.b26148","x":520,"y":140,"wires":[["14f9bc1d.f94354"]]},{"id":"38fe19c8.f34ae6","type":"link out","z":"1dc4f0f5.2a52bf","name":"Go To Jump In","links":["103ff788.c19668"],"x":980,"y":1680,"wires":[],"l":true},{"id":"55ec1f44.35c41","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Downstairs Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Motion00000085","conf":"df59aa47.b26148","x":650,"y":1940,"wires":[["2c99821f.7ffdbe"]]},{"id":"2680ca97.ff7436","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Downstairs Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Smoke00000087","conf":"df59aa47.b26148","x":650,"y":2620,"wires":[["5bfaf22e.925bcc"]]},{"id":"cd260d7c.c89c1","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Gratuity Thermostat - Eco Mode","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Eco Mode00000049","conf":"df59aa47.b26148","x":690,"y":1580,"wires":[["38fe19c8.f34ae6"]]},{"id":"862feadb.8c81b8","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Gratuity Thermostat - Fan","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Fan","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Fan00000040","conf":"df59aa47.b26148","x":670,"y":1660,"wires":[["38fe19c8.f34ae6"]]},{"id":"59d0c626.583778","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Gratuity Thermostat","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Thermostat","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat0000004A","conf":"df59aa47.b26148","x":650,"y":1740,"wires":[["38fe19c8.f34ae6"]]},{"id":"a34842f9.cabb9","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Mike iPhone Home","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerMike iPhone Home00000086","conf":"df59aa47.b26148","x":550,"y":220,"wires":[["14f9bc1d.f94354"]]},{"id":"e3cdda32.c67938","type":"comment","z":"1dc4f0f5.2a52bf","name":"Placeholder Eva Home","info":"","x":120,"y":460,"wires":[]},{"id":"b4560de9.f314a","type":"comment","z":"1dc4f0f5.2a52bf","name":"Placeholder Eva LTHS","info":"","x":120,"y":540,"wires":[]},{"id":"816ee5ae.68c438","type":"comment","z":"1dc4f0f5.2a52bf","name":"Placeholder Eva CTE","info":"","x":120,"y":620,"wires":[]},{"id":"79027c98.fc1a44","type":"comment","z":"1dc4f0f5.2a52bf","name":"Placeholder Eva Dance","info":"","x":120,"y":700,"wires":[]},{"id":"f191fa14.08ac18","type":"comment","z":"1dc4f0f5.2a52bf","name":"Placeholder Kathy Dance","info":"","x":130,"y":780,"wires":[]},{"id":"20cbd351.8f577c","type":"comment","z":"1dc4f0f5.2a52bf","name":"Placeholder Mike Work","info":"","x":120,"y":300,"wires":[]},{"id":"8c088cbb.19922","type":"comment","z":"1dc4f0f5.2a52bf","name":"Nest Protect CO","info":"","x":100,"y":860,"wires":[]},{"id":"d86aeee9.7b639","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Eva Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":670,"y":980,"wires":[["37366444.8f64ec"]]},{"id":"7152aa7.e7b0b54","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Evas Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":680,"y":1060,"wires":[["37366444.8f64ec"]]},{"id":"6183f77e.973518","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Game Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":670,"y":1140,"wires":[["37366444.8f64ec"]]},{"id":"6a488c1a.527c94","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Guest Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":680,"y":1220,"wires":[["37366444.8f64ec"]]},{"id":"e43277e0.0de008","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Master Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":680,"y":1300,"wires":[["37366444.8f64ec"]]},{"id":"3b9de96c.930d66","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Toy Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":660,"y":1380,"wires":[["37366444.8f64ec"]]},{"id":"2d48cbe6.a12c44","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Toy Room Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":690,"y":1460,"wires":[["37366444.8f64ec"]]},{"id":"37366444.8f64ec","type":"link out","z":"1dc4f0f5.2a52bf","name":"Go To Jump In","links":["103ff788.c19668"],"x":1100,"y":1220,"wires":[],"l":true},{"id":"14f9bc1d.f94354","type":"link out","z":"1dc4f0f5.2a52bf","name":"Go To Jump In","links":["103ff788.c19668"],"x":780,"y":200,"wires":[],"l":true},{"id":"2c99821f.7ffdbe","type":"link out","z":"1dc4f0f5.2a52bf","name":"Go To Jump In","links":["103ff788.c19668"],"x":1000,"y":2220,"wires":[],"l":true},{"id":"82e88975.8e6e08","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Eva Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Motion00000085","conf":"df59aa47.b26148","x":650,"y":2020,"wires":[["2c99821f.7ffdbe"]]},{"id":"252f159.45075ea","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Evas Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Motion00000085","conf":"df59aa47.b26148","x":660,"y":2100,"wires":[["2c99821f.7ffdbe"]]},{"id":"85b53c0a.9853b","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Guest Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Motion00000085","conf":"df59aa47.b26148","x":670,"y":2260,"wires":[["2c99821f.7ffdbe"]]},{"id":"b1c3606c.981a7","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Master Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Motion00000085","conf":"df59aa47.b26148","x":670,"y":2340,"wires":[["2c99821f.7ffdbe"]]},{"id":"618b5cac.98aa54","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Toy Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Motion00000085","conf":"df59aa47.b26148","x":650,"y":2420,"wires":[["2c99821f.7ffdbe"]]},{"id":"34075a7.0d023a6","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Toy Room Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Motion00000085","conf":"df59aa47.b26148","x":670,"y":2500,"wires":[["2c99821f.7ffdbe"]]},{"id":"d9b07777.1d2db8","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Game Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Motion00000085","conf":"df59aa47.b26148","x":660,"y":2180,"wires":[["2c99821f.7ffdbe"]]},{"id":"94bd889d.071078","type":"comment","z":"1dc4f0f5.2a52bf","name":"Nest Protect Smoke","info":"","x":110,"y":2580,"wires":[]},{"id":"5bfaf22e.925bcc","type":"link out","z":"1dc4f0f5.2a52bf","name":"Go To Jump In","links":["103ff788.c19668"],"x":1220,"y":2920,"wires":[],"l":true},{"id":"dc1cce26.db897","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Eva Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Smoke00000087","conf":"df59aa47.b26148","x":660,"y":2700,"wires":[["5bfaf22e.925bcc"]]},{"id":"4d606d95.bec444","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Evas Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Smoke00000087","conf":"df59aa47.b26148","x":660,"y":2780,"wires":[["5bfaf22e.925bcc"]]},{"id":"a9ca6071.c34c7","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Game Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Smoke00000087","conf":"df59aa47.b26148","x":660,"y":2860,"wires":[["5bfaf22e.925bcc"]]},{"id":"d16d4c6b.bcfa9","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Guest Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Smoke00000087","conf":"df59aa47.b26148","x":670,"y":2940,"wires":[["5bfaf22e.925bcc"]]},{"id":"6928de23.b673d","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Master Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Smoke00000087","conf":"df59aa47.b26148","x":670,"y":3020,"wires":[["5bfaf22e.925bcc"]]},{"id":"b2b23416.3d4288","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Toy Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Smoke00000087","conf":"df59aa47.b26148","x":650,"y":3100,"wires":[["5bfaf22e.925bcc"]]},{"id":"8f5440aa.0e3ab","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Toy Room Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Smoke00000087","conf":"df59aa47.b26148","x":670,"y":3180,"wires":[["5bfaf22e.925bcc"]]},{"id":"1ed5c447.48868c","type":"comment","z":"1dc4f0f5.2a52bf","name":"Nest Thermostat","info":"","x":100,"y":1540,"wires":[]},{"id":"e8041aaf.27f658","type":"hb-status","z":"1dc4f0f5.2a52bf","name":"Eve Motion Passthrough","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerEve Motion Passthrough00000049","conf":"df59aa47.b26148","x":670,"y":1860,"wires":[["2c99821f.7ffdbe"]]},{"id":"3b68efe4.adf08","type":"comment","z":"1dc4f0f5.2a52bf","name":"Motion Sensors","info":"","x":100,"y":1820,"wires":[]},{"id":"19c66d96.3c1c52","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Eve Motion Passthrough","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerEve Motion Passthrough00000049","conf":"df59aa47.b26148","x":670,"y":1900,"wires":[["2c99821f.7ffdbe"]]},{"id":"76318aa9.c80184","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Gratuity Thermostat","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Thermostat","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat0000004A","conf":"df59aa47.b26148","x":650,"y":1780,"wires":[["38fe19c8.f34ae6"]]},{"id":"9e56ffe3.a4077","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Gratuity Thermostat - Fan","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Fan","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Fan00000040","conf":"df59aa47.b26148","x":670,"y":1700,"wires":[["38fe19c8.f34ae6"]]},{"id":"2fb3bf90.79c9e","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Gratuity Thermostat - Eco Mode","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Switch","device":"HomebridgeCC:22:3D:E3:CE:30NestGratuity Thermostat - Eco Mode00000049","conf":"df59aa47.b26148","x":690,"y":1620,"wires":[["38fe19c8.f34ae6"]]},{"id":"46ec5bee.cb9a94","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Downstairs Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Motion00000085","conf":"df59aa47.b26148","x":650,"y":1980,"wires":[["2c99821f.7ffdbe"]]},{"id":"907651f2.c28c","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Eva Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Motion00000085","conf":"df59aa47.b26148","x":650,"y":2060,"wires":[["2c99821f.7ffdbe"]]},{"id":"f58d3446.391d28","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Evas Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Motion00000085","conf":"df59aa47.b26148","x":660,"y":2140,"wires":[["2c99821f.7ffdbe"]]},{"id":"21438d0.dccb374","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Game Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Motion00000085","conf":"df59aa47.b26148","x":650,"y":2220,"wires":[["2c99821f.7ffdbe"]]},{"id":"244c1ba8.868da4","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Guest Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Motion00000085","conf":"df59aa47.b26148","x":660,"y":2300,"wires":[["2c99821f.7ffdbe"]]},{"id":"b9fe233f.9228c","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Master Bedroom Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Motion00000085","conf":"df59aa47.b26148","x":660,"y":2380,"wires":[["2c99821f.7ffdbe"]]},{"id":"a5f41670.e6cc18","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Toy Room Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Motion00000085","conf":"df59aa47.b26148","x":640,"y":2460,"wires":[["2c99821f.7ffdbe"]]},{"id":"8565229.b07c3e","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Toy Room Hallway Motion","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Motion Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Motion00000085","conf":"df59aa47.b26148","x":670,"y":2540,"wires":[["2c99821f.7ffdbe"]]},{"id":"5beb351.3384fcc","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Downstairs Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Smoke00000087","conf":"df59aa47.b26148","x":650,"y":2660,"wires":[["5bfaf22e.925bcc"]]},{"id":"59e5a11.e7dcd6","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Eva Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Smoke00000087","conf":"df59aa47.b26148","x":650,"y":2740,"wires":[["5bfaf22e.925bcc"]]},{"id":"121dea25.67e8f6","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Evas Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Smoke00000087","conf":"df59aa47.b26148","x":660,"y":2820,"wires":[["5bfaf22e.925bcc"]]},{"id":"fbc42f.f003ebd","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Game Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Smoke00000087","conf":"df59aa47.b26148","x":650,"y":2900,"wires":[["5bfaf22e.925bcc"]]},{"id":"8d6c7d3f.8748","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Guest Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Smoke00000087","conf":"df59aa47.b26148","x":660,"y":2980,"wires":[["5bfaf22e.925bcc"]]},{"id":"4614eb97.c013e4","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Master Bedroom Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Smoke00000087","conf":"df59aa47.b26148","x":670,"y":3060,"wires":[["5bfaf22e.925bcc"]]},{"id":"5941e125.18e26","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Toy Room Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Smoke00000087","conf":"df59aa47.b26148","x":640,"y":3140,"wires":[["5bfaf22e.925bcc"]]},{"id":"59f27c8d.f50084","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Toy Room Hallway Smoke","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Smoke Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Smoke00000087","conf":"df59aa47.b26148","x":670,"y":3220,"wires":[["5bfaf22e.925bcc"]]},{"id":"3b4d4078.c26de","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Downstairs Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestDownstairs Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":660,"y":940,"wires":[["37366444.8f64ec"]]},{"id":"c527ab4f.6c2618","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Eva Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEva Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":670,"y":1020,"wires":[["37366444.8f64ec"]]},{"id":"77cc1513.d5363c","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Evas Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestEvas Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":670,"y":1100,"wires":[["37366444.8f64ec"]]},{"id":"13d18f43.60ff51","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Game Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGame Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":670,"y":1180,"wires":[["37366444.8f64ec"]]},{"id":"7240a62d.47dc38","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Guest Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestGuest Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":680,"y":1260,"wires":[["37366444.8f64ec"]]},{"id":"84a145ca.dc1798","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Master Bedroom Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestMaster Bedroom Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":680,"y":1340,"wires":[["37366444.8f64ec"]]},{"id":"15858fc7.b2a95","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Toy Room Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":660,"y":1420,"wires":[["37366444.8f64ec"]]},{"id":"d1395e80.6a7ed","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Toy Room Hallway Carbon Monoxide","Homebridge":"Homebridge","Manufacturer":"Nest","Service":"Carbon Monoxide Sensor","device":"HomebridgeCC:22:3D:E3:CE:30NestToy Room Hallway Carbon Monoxide0000007F","conf":"df59aa47.b26148","x":680,"y":1500,"wires":[["37366444.8f64ec"]]},{"id":"936518b0.1ff1e8","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Anyone","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerAnyone00000086","conf":"df59aa47.b26148","x":510,"y":180,"wires":[["14f9bc1d.f94354"]]},{"id":"3a233af1.c49866","type":"hb-event","z":"1dc4f0f5.2a52bf","name":"Mike iPhone Home","Homebridge":"Homebridge","Manufacturer":"Default-Manufacturer","Service":"Occupancy Sensor","device":"HomebridgeCC:22:3D:E3:CE:30Default-ManufacturerMike iPhone Home00000086","conf":"df59aa47.b26148","x":550,"y":260,"wires":[["14f9bc1d.f94354"]]},{"id":"b981b46.b143448","type":"link out","z":"1dc4f0f5.2a52bf","name":"Go To Prepopulate When Triggered","links":["92821fbf.9562f","151b6183.0c6e7e","7df66552.dcf19c","c1c01a8c.f08ed8","4689d0ef.1f493","bfbdf65e.040fe8"],"x":580,"y":40,"wires":[],"l":true},{"id":"4689d0ef.1f493","type":"link in","z":"1dc4f0f5.2a52bf","name":"Prepopulate","links":["b981b46.b143448"],"x":350,"y":180,"wires":[["ccd7a48a.b67bc8","a34842f9.cabb9"]],"l":true},{"id":"92821fbf.9562f","type":"link in","z":"1dc4f0f5.2a52bf","name":"Prepopulate","links":["b981b46.b143448"],"x":390,"y":1180,"wires":[["ecc897f6.dac4d8","d86aeee9.7b639","7152aa7.e7b0b54","6183f77e.973518","6a488c1a.527c94","e43277e0.0de008","3b9de96c.930d66","2d48cbe6.a12c44"]],"l":true},{"id":"151b6183.0c6e7e","type":"link in","z":"1dc4f0f5.2a52bf","name":"Prepopulate","links":["b981b46.b143448"],"x":410,"y":1660,"wires":[["cd260d7c.c89c1","862feadb.8c81b8","59d0c626.583778"]],"l":true},{"id":"c1c01a8c.f08ed8","type":"link in","z":"1dc4f0f5.2a52bf","name":"Prepopulate","links":["b981b46.b143448"],"x":410,"y":2220,"wires":[["e8041aaf.27f658","55ec1f44.35c41","82e88975.8e6e08","252f159.45075ea","d9b07777.1d2db8","85b53c0a.9853b","b1c3606c.981a7","618b5cac.98aa54","34075a7.0d023a6"]],"l":true},{"id":"7df66552.dcf19c","type":"link in","z":"1dc4f0f5.2a52bf","name":"Prepopulate","links":["b981b46.b143448"],"x":410,"y":2900,"wires":[["2680ca97.ff7436","dc1cce26.db897","4d606d95.bec444","a9ca6071.c34c7","d16d4c6b.bcfa9","6928de23.b673d","b2b23416.3d4288","8f5440aa.0e3ab"]],"l":true},{"id":"1c30529.e0015ad","type":"debug","z":"1dc4f0f5.2a52bf","name":"Homebridge Everything","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1650,"y":20,"wires":[]},{"id":"f8977228.a18cf","type":"change","z":"1dc4f0f5.2a52bf","name":"Put device ID into msg.deviceID and payload into payload.value","rules":[{"t":"set","p":"temp","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"set","p":"payload.value","pt":"msg","to":"temp","tot":"msg"},{"t":"delete","p":"temp","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"homebridge","tot":"str"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"name","tot":"msg"},{"t":"set","p":"payload.name","pt":"msg","to":"name","tot":"msg"},{"t":"set","p":"MQTTName","pt":"msg","to":"homebridge","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1770,"y":60,"wires":[["e0f3b0eb.c94a9","5fa3bd35.085f54"]]},{"id":"5fa3bd35.085f54","type":"function","z":"1dc4f0f5.2a52bf","name":"Homebridge versionSplit kv pairs (from value) into 1-n msg stream (ready for testing)","func":"///////////////////////////////////////////////////////////////////\n//debugger\n///////////////////////////////////////////////////////////////////\n/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value;\n                --msg.payload.value;\n            }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        if (typeof name === 'undefined') \n        {\n            latestMsg.payload.name = key;\n        } \n        else \n        {\n            latestMsg.payload.name = name + \"/\" + key;\n        }\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n//Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \"/\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":2340,"y":180,"wires":[["c99d1cdd.89637","6a0535ad.30405c"]]},{"id":"c99d1cdd.89637","type":"change","z":"1dc4f0f5.2a52bf","name":"18 rule large cleanup","rules":[{"t":"delete","p":"qos","pt":"msg"},{"t":"delete","p":"retain","pt":"msg"},{"t":"delete","p":"payload.dataType","pt":"msg"},{"t":"delete","p":"deviceID","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"MQTTName","tot":"msg"},{"t":"delete","p":"MQTTName","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"topic","tot":"msg"},{"t":"delete","p":"topic","pt":"msg"},{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"payload.value","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"Manufacturer","pt":"msg"},{"t":"delete","p":"_device","pt":"msg"},{"t":"delete","p":"_confId","pt":"msg"},{"t":"delete","p":"Homebridge","pt":"msg"},{"t":"delete","p":"_rawMessage","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"name","tot":"msg"},{"t":"delete","p":"name","pt":"msg"},{"t":"delete","p":"_rawEvent","pt":"msg"},{"t":"delete","p":"DeviceID","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2640,"y":180,"wires":[["edb0d2ce.9e75","e7bbcb41.5d61d8"]]},{"id":"5cbbf995.ad6aa8","type":"link out","z":"1dc4f0f5.2a52bf","name":"Get DeviceID","links":["8ca3ee16.9ff13"],"x":3250,"y":180,"wires":[],"l":true},{"id":"e0f3b0eb.c94a9","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Post change 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2140,"y":140,"wires":[]},{"id":"6a0535ad.30405c","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Stream Split","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2630,"y":140,"wires":[]},{"id":"edb0d2ce.9e75","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch to send to get device","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2900,"y":140,"wires":[]},{"id":"8ca3ee16.9ff13","type":"link in","z":"1dc4f0f5.2a52bf","name":"Get DeviceID (Homekit, z2m)","links":["5cbbf995.ad6aa8"],"x":1520,"y":340,"wires":[["f1b0892c.fb0b88"]],"l":true},{"id":"c654754e.c89df8","type":"link in","z":"1dc4f0f5.2a52bf","name":"Got DeviceID","links":["cb41a5be.f17278"],"x":1470,"y":420,"wires":[["5f8236dc.586638"]],"l":true},{"id":"9ee707a8.828c68","type":"change","z":"1dc4f0f5.2a52bf","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"set","p":"exportableresults.DeviceID","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2700,"y":340,"wires":[["500f2d68.4b6c84","b8ec9dbf.8c50d"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"3a6898c6.7d2418","type":"subflow:11c4fe96.587e41","z":"1dc4f0f5.2a52bf","name":"","env":[],"x":2360,"y":340,"wires":[["9ee707a8.828c68","cf6c29d8.0c7df8"],["67c91f0c.f5d38"],["a2bf4f6f.1a681"]]},{"id":"500f2d68.4b6c84","type":"function","z":"1dc4f0f5.2a52bf","name":"Move Data from searchfor to exportableresults","func":"//debugger\nlet foundKeys = Object.keys(msg.searchfor)\nlet foundValues = Object.values(msg.searchfor)\n//loop through all keys and a\nfor (index = 0; index < foundKeys.length; index++)\n{\n    if(foundValues[index]!== \"\")\n    {\n    msg.exportableresults[foundKeys[index]] = foundValues[index]\n    }\n}\ndelete msg.searchfor\nreturn msg","outputs":1,"noerr":0,"x":3060,"y":340,"wires":[["7446d1bd.4d64f","cb41a5be.f17278"]],"info":"This node moves each property under the msg.searchfor property to the msg.exportableresults property."},{"id":"f1b0892c.fb0b88","type":"change","z":"1dc4f0f5.2a52bf","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1791,"y":340,"wires":[["902c6c63.97052","8ca3d7ee.0eaf88"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"902c6c63.97052","type":"change","z":"1dc4f0f5.2a52bf","name":"Devices Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Floor","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Location","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Room","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.DeviceType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.AccessProtocol","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.PhysicalVirtualType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.House","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.MQTTDeviceTopic","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Hub","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2070,"y":340,"wires":[["3a6898c6.7d2418","a8221946.31bc28"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"a275b788.304e88","type":"link in","z":"1dc4f0f5.2a52bf","name":"Get Measurement Name Update (All 3)","links":["5f8236dc.586638"],"x":1550,"y":540,"wires":[["cb88e7ec.d2a138"]],"l":true},{"id":"5f8236dc.586638","type":"link out","z":"1dc4f0f5.2a52bf","name":"Get Measurement Name Update","links":["a275b788.304e88"],"x":1690,"y":420,"wires":[],"l":true},{"id":"4b9dc36d.88dbec","type":"link in","z":"1dc4f0f5.2a52bf","name":"Got Measurement Name Update","links":["6227c009.8096f"],"x":1530,"y":700,"wires":[["e37811d4.a2ea8"]],"l":true},{"id":"cb41a5be.f17278","type":"link out","z":"1dc4f0f5.2a52bf","name":"Got Device ID","links":["c654754e.c89df8"],"x":3360,"y":340,"wires":[],"l":true},{"id":"ca10e24a.4bba","type":"change","z":"1dc4f0f5.2a52bf","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3300,"y":520,"wires":[["6b1ce417.cb445c"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"f7d70e6f.3487b","type":"subflow:11c4fe96.587e41","z":"1dc4f0f5.2a52bf","name":"","env":[],"x":2940,"y":540,"wires":[["ca10e24a.4bba","f49eba6.1fd3a48"],["5b65d89d.c00508"],["6dcdac86.6f9694","92ea67b8.7355c8","f49eba6.1fd3a48"]]},{"id":"cb88e7ec.d2a138","type":"change","z":"1dc4f0f5.2a52bf","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"E","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"200","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1850,"y":540,"wires":[["61aeb6bc.80d388","65329625.ff00a8"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"61aeb6bc.80d388","type":"change","z":"1dc4f0f5.2a52bf","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"keyvalues.SourceDevice","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.ChangeNameTo","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2180,"y":540,"wires":[["914d7aa8.e54338","137d9e42.0be712"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"7446d1bd.4d64f","type":"debug","z":"1dc4f0f5.2a52bf","name":"1.1 DevID Lookup Success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3400,"y":300,"wires":[]},{"id":"5b65d89d.c00508","type":"debug","z":"1dc4f0f5.2a52bf","name":"flow 2.2 temp no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3280,"y":560,"wires":[]},{"id":"6dcdac86.6f9694","type":"debug","z":"1dc4f0f5.2a52bf","name":"2.3a Need to update MeasurementTranslations Table","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3380,"y":640,"wires":[]},{"id":"d4a4878.b703f78","type":"debug","z":"1dc4f0f5.2a52bf","name":"2.1 rename lookup success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4300,"y":520,"wires":[]},{"id":"6b1ce417.cb445c","type":"function","z":"1dc4f0f5.2a52bf","name":"Move Name Change from searchfor to exportableresults","func":"msg.exportableresults.Measure = msg.searchfor.ChangeNameTo\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":3930,"y":520,"wires":[["d4a4878.b703f78","6227c009.8096f"]]},{"id":"6227c009.8096f","type":"link out","z":"1dc4f0f5.2a52bf","name":"Got Measurement Name Update","links":["4b9dc36d.88dbec"],"x":4310,"y":560,"wires":[],"l":true},{"id":"e37811d4.a2ea8","type":"link out","z":"1dc4f0f5.2a52bf","name":"Get Potential Translation Update","links":["5c08efbb.52f4f"],"x":1810,"y":700,"wires":[],"l":true},{"id":"5c08efbb.52f4f","type":"link in","z":"1dc4f0f5.2a52bf","name":"Get Potential Translation Update (Homebridge Only)","links":["e37811d4.a2ea8"],"x":1590,"y":780,"wires":[["ef791b60.ac8828"]],"l":true},{"id":"54e403d7.d4601c","type":"link in","z":"1dc4f0f5.2a52bf","name":"Got Potential Translation Update","links":["986b3721.775318","8e3bb1dd.651f8","62c5181a.2f1548","2873480.69e8ab8","86ad5814.9c8a38","c4e29524.204938"],"x":1510,"y":1640,"wires":[["fc036783.f47958","31f9c72f.4f81e8"]],"l":true},{"id":"986b3721.775318","type":"link out","z":"1dc4f0f5.2a52bf","name":"Got Potential Translation Update","links":["54e403d7.d4601c"],"x":2150,"y":1040,"wires":[],"l":true},{"id":"9b31acaf.e2cac","type":"function","z":"1dc4f0f5.2a52bf","name":"Move Name Change from searchfor to exportableresults","func":"msg.TranslationType = msg.searchfor.TranslationType\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":4050,"y":760,"wires":[["e65bf264.09197","780c4726.4b7878"]]},{"id":"fea74ffb.fd04a","type":"change","z":"1dc4f0f5.2a52bf","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3560,"y":760,"wires":[["9b31acaf.e2cac","56ef8f41.48171"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"a1907b88.6bc3d8","type":"change","z":"1dc4f0f5.2a52bf","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.TranslationType","pt":"msg","to":"","tot":"str"},{"t":"delete","p":"searchErrorCount","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2260,"y":780,"wires":[["9d1b84df.e19ae8","22983c85.baf214"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"ef791b60.ac8828","type":"change","z":"1dc4f0f5.2a52bf","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"C","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"100","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1930,"y":780,"wires":[["a1907b88.6bc3d8","fded4d2f.2e1dd"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"92ea67b8.7355c8","type":"change","z":"1dc4f0f5.2a52bf","name":"Remove Excess Properties when No Name Change Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3400,"y":600,"wires":[["6227c009.8096f","1c7d965d.f102ba"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"f35f631d.a4e2f","type":"change","z":"1dc4f0f5.2a52bf","name":"Remove Excess Properties when No Data Translation Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":3660,"y":840,"wires":[["c4e29524.204938"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"900389e3.dd77b8","type":"switch","z":"1dc4f0f5.2a52bf","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":1920,"y":900,"wires":[["9079abe6.ba6778"],["ac231d59.065b6"]],"outputLabels":["True","False"]},{"id":"9079abe6.ba6778","type":"change","z":"1dc4f0f5.2a52bf","name":"Value True","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":2090,"y":880,"wires":[["62c5181a.2f1548"]]},{"id":"ac231d59.065b6","type":"change","z":"1dc4f0f5.2a52bf","name":"Value False","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"false","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":2090,"y":920,"wires":[["62c5181a.2f1548"]]},{"id":"4a272aed.b0dd74","type":"change","z":"1dc4f0f5.2a52bf","name":"CtoF Translate","rules":[{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"msg.exportableresults.Measure&\" F\"\t","tot":"jsonata"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"msg.exportableresults.Reading*9/5+32","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1920,"y":1040,"wires":[["986b3721.775318"]]},{"id":"e8435d1.f25eaa","type":"switch","z":"1dc4f0f5.2a52bf","name":"CurrentHeatingCoolingState Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"},{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":1990,"y":1220,"wires":[["c6041305.8858c"],["984af6a1.fd1d08"],["e4626774.74f938"],["d8144e4.4654eb"]],"outputLabels":["off","heat","cool","heat-cool"]},{"id":"c6041305.8858c","type":"change","z":"1dc4f0f5.2a52bf","name":"Value Off","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"off","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2240,"y":1160,"wires":[["2873480.69e8ab8"]]},{"id":"984af6a1.fd1d08","type":"change","z":"1dc4f0f5.2a52bf","name":"Value Heat","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2250,"y":1200,"wires":[["2873480.69e8ab8"]]},{"id":"e4626774.74f938","type":"change","z":"1dc4f0f5.2a52bf","name":"Value Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2250,"y":1240,"wires":[["2873480.69e8ab8"]]},{"id":"d8144e4.4654eb","type":"change","z":"1dc4f0f5.2a52bf","name":"Value Heat-Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat-cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2260,"y":1280,"wires":[["2873480.69e8ab8"]]},{"id":"c809a044.0de4a","type":"switch","z":"1dc4f0f5.2a52bf","name":"","property":"TranslationType","propertyType":"msg","rules":[{"t":"eq","v":"10TF","vt":"str"},{"t":"eq","v":"C2F","vt":"str"},{"t":"eq","v":"NestThMap","vt":"str"},{"t":"eq","v":"012CF","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":1710,"y":1080,"wires":[["900389e3.dd77b8"],["4a272aed.b0dd74"],["e8435d1.f25eaa"],["2cdb3bd3.7a9fc4"]],"outputLabels":["1 or 0 to True or False Map","Celcius to Fahrenheit Conversion","Nest Thermostat Map","Celcius or Fahrenheit Map"]},{"id":"2cdb3bd3.7a9fc4","type":"switch","z":"1dc4f0f5.2a52bf","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":1920,"y":1400,"wires":[["974ef8e7.a0d328"],["40e2dbf7.ada774"]],"outputLabels":["True","False"]},{"id":"974ef8e7.a0d328","type":"change","z":"1dc4f0f5.2a52bf","name":"Value Fahrenheit","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Fahrenheit","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2110,"y":1380,"wires":[["8e3bb1dd.651f8"]]},{"id":"40e2dbf7.ada774","type":"change","z":"1dc4f0f5.2a52bf","name":"Value Celcius","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Celcius","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2100,"y":1420,"wires":[["8e3bb1dd.651f8"]]},{"id":"e65bf264.09197","type":"switch","z":"1dc4f0f5.2a52bf","name":"Translation Needed?","property":"TranslationType","propertyType":"msg","rules":[{"t":"neq","v":"null","vt":"str"},{"t":"eq","v":"null","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":4400,"y":760,"wires":[["1682d471.ab941c","e1ef3305.600a9"],["86ad5814.9c8a38","519bb27e.d8911c"]]},{"id":"31f9c72f.4f81e8","type":"change","z":"1dc4f0f5.2a52bf","name":"Excess Properties Removal","rules":[{"t":"delete","p":"searchErrorCount","pt":"msg"},{"t":"delete","p":"error","pt":"msg"},{"t":"delete","p":"TranslationType","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1800,"y":1640,"wires":[["5ff40511.4cc2fc","31965872.cfd548"]]},{"id":"5ff40511.4cc2fc","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Excess Properties Removal","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2100,"y":1600,"wires":[]},{"id":"62c5181a.2f1548","type":"link out","z":"1dc4f0f5.2a52bf","name":"Got Potential Translation Update","links":["54e403d7.d4601c"],"x":2310,"y":900,"wires":[],"l":true},{"id":"2873480.69e8ab8","type":"link out","z":"1dc4f0f5.2a52bf","name":"Got Potential Translation Update","links":["54e403d7.d4601c"],"x":2530,"y":1220,"wires":[],"l":true},{"id":"8e3bb1dd.651f8","type":"link out","z":"1dc4f0f5.2a52bf","name":"Got Potential Translation Update","links":["54e403d7.d4601c"],"x":2350,"y":1400,"wires":[],"l":true},{"id":"86ad5814.9c8a38","type":"link out","z":"1dc4f0f5.2a52bf","name":"Got Potential Translation Update","links":["54e403d7.d4601c"],"x":4730,"y":840,"wires":[],"l":true},{"id":"31965872.cfd548","type":"function","z":"1dc4f0f5.2a52bf","name":"Format for InfluxDB & MQTT","func":"//Ref. TMS-000002\n/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.exportableresults.DeviceID;\n//node.warn(\"11 \"+ deviceID)\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar typeOfMeasurement = msg.exportableresults.Measure;\n\n//gather the actual measurement value that was sent by the device to be included as the data for the field (when the measurement is valid) sent to InfluxDB\nvar theData = msg.exportableresults.Reading;\n//initialize the measurements object\nvar measurementsObj = {};\n\n//initialize the tags (indices) object\nvar tagsObj = {};\n\n//create the object that will later be used to combine the measurementsObj and tagsObj\nvar combinedObj;\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\nif (msg.exportableresults.hasOwnProperty('dataType'))\n{\n    if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    {\n        if (typeof theData == 'number')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched number\" });\n            if (!theData.isNaN)\n            {\n                validMeasurement = true;\n            }\n        }\n        else if (typeof theData == 'string')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched string\" });\n            if (theData.length >= 0)\n            {\n                validMeasurement = true;\n            }\n        } \n        else if (typeof theData == 'boolean')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched boolean\" });\n            validMeasurement = true;\n        }\n        else if (msg.exportableresults.dataType == 'ENUM')\n        { //This is checking to make sure the value matches one of the values in the ENUM from the device \n            node.status({ fill: \"red\", shape: \"ring\", text: msg.exportableresults.dataType + \" matched ENUM\" });\n            msg.exportableresults.values.forEach(element => {\n                if (flow.get(deviceID + element) == theData)\n                {\n                    validMeasurement = true;\n                }\n            })\n        }\n        else if (theData === null)\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched null data\" });\n            nullData = true;\n        }\n        else\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched nonstandardtype\" });\n            nonStandardType = true;\n        }\n    } //if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    else\n    {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"measurement type mismatch\" });\n        measurementTypeMismatch = true;\n    } //else  if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n}//if(msg.exportableresults.hasOwnProperty('dataType'))\nelse\n{\n    validMeasurement = true;\n}// else      if(msg.exportableresults.hasOwnProperty('dataType')) else\n\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\", \"PhysicalDigitalRegular\"]\nfor (innerIndex = 0; innerIndex < commonTags.length; innerIndex++)\n{\n    if (msg.exportableresults.hasOwnProperty(commonTags[innerIndex]))\n    {\n        tagsObj[commonTags[innerIndex]] = msg.exportableresults[commonTags[innerIndex]]\n    } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n} //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    //node.warn(\"94 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"113 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"123 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n\n//put the object into the payload\nmsg.payload = combinedObj;\n\n//build the status to be shown on the status of the subnode\nmsg.status = msg.exportableresults.DeviceName + \": \" + typeOfMeasurement + \": \" + theData;\n\n/* MQTT section \n * \n * \n * \n */\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = msg.exportableresults.MQTTname +\"/\"+msg.exportableresults.MQTTDeviceTopic+\"/\"+ msg.exportableresults.Measure\n//add the data to be recorded to MQTT\nmsg2.payload = theData\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nif (!nullData) {\n    return [msg, msg2]\n}","outputs":2,"noerr":0,"x":2140,"y":1640,"wires":[["3b87831a.3e2a4c","a98d955d.c90dd8","7e9adfd7.ca15c"],["3cb3586e.0858a8","93cf688a.1cc3b8"]]},{"id":"3b87831a.3e2a4c","type":"debug","z":"1dc4f0f5.2a52bf","name":"4.1 Output 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2410,"y":1560,"wires":[]},{"id":"3cb3586e.0858a8","type":"debug","z":"1dc4f0f5.2a52bf","name":"4.2 Output 2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2410,"y":1740,"wires":[]},{"id":"a98d955d.c90dd8","type":"influxdb out","z":"1dc4f0f5.2a52bf","influxdb":"82aca41a.30fed8","name":"","measurement":"Smarthome","precision":"","retentionPolicy":"","x":2530,"y":1600,"wires":[]},{"id":"7e9adfd7.ca15c","type":"change","z":"1dc4f0f5.2a52bf","name":"Move Status to Payload for Consumption by Status Node","rules":[{"t":"set","p":"payload","pt":"msg","to":"status","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2550,"y":1640,"wires":[["7228c93f.87e908"]]},{"id":"93cf688a.1cc3b8","type":"mqtt out","z":"1dc4f0f5.2a52bf","name":"Write reading to MQTT","topic":"","qos":"1","retain":"true","broker":"a5bf81ee.27852","x":2440,"y":1680,"wires":[]},{"id":"7228c93f.87e908","type":"debug","z":"1dc4f0f5.2a52bf","name":"4.3 Output  For Status node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2920,"y":1600,"wires":[]},{"id":"67c91f0c.f5d38","type":"debug","z":"1dc4f0f5.2a52bf","name":"flow 1.2 temp no find","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2680,"y":380,"wires":[]},{"id":"a2bf4f6f.1a681","type":"debug","z":"1dc4f0f5.2a52bf","name":"flow 1.3 Need to update the Devices Table","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2740,"y":420,"wires":[]},{"id":"914d7aa8.e54338","type":"function","z":"1dc4f0f5.2a52bf","name":"Optionally Simplify msg.keyvalues.Measurement","func":"if (msg.keyvalues.Measurement.includes(\"/\"))\n{msg.keyvalues.Measurement = msg.keyvalues.Measurement.substring(msg.keyvalues.Measurement.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2580,"y":540,"wires":[["2186d148.4b628e","f7d70e6f.3487b"]]},{"id":"137d9e42.0be712","type":"debug","z":"1dc4f0f5.2a52bf","name":"before","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2450,"y":500,"wires":[]},{"id":"2186d148.4b628e","type":"debug","z":"1dc4f0f5.2a52bf","name":"after","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2870,"y":480,"wires":[]},{"id":"1c7d965d.f102ba","type":"debug","z":"1dc4f0f5.2a52bf","name":"flow 2.3b If translation desired fail, otherwise succes Table?","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4400,"y":600,"wires":[]},{"id":"fc036783.f47958","type":"debug","z":"1dc4f0f5.2a52bf","name":"flow 3 output","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1750,"y":1600,"wires":[]},{"id":"8ca3d7ee.0eaf88","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Spread Lookup","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2060,"y":300,"wires":[]},{"id":"a8221946.31bc28","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Devices Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2370,"y":280,"wires":[]},{"id":"cf6c29d8.0c7df8","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Lookup Desired Data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2700,"y":300,"wires":[]},{"id":"b8ec9dbf.8c50d","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Remove Excess Properties","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3020,"y":300,"wires":[]},{"id":"65329625.ff00a8","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Spreadsheet Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2190,"y":500,"wires":[]},{"id":"f49eba6.1fd3a48","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Lookup Desired Data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3300,"y":480,"wires":[]},{"id":"fded4d2f.2e1dd","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Spreadsheet Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2250,"y":740,"wires":[]},{"id":"9d1b84df.e19ae8","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Measurement Translation Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2640,"y":740,"wires":[]},{"id":"22983c85.baf214","type":"function","z":"1dc4f0f5.2a52bf","name":"Optionally Simplify msg.keyvalues.Measurement","func":"if (msg.keyvalues.Measurement.includes(\"/\"))\n{msg.keyvalues.Measurement = msg.keyvalues.Measurement.substring(msg.keyvalues.Measurement.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2640,"y":780,"wires":[["bc027f67.a1c16","50b8df7c.674cd"]]},{"id":"a15574b.6ad3b88","type":"debug","z":"1dc4f0f5.2a52bf","name":"3.1 Catch Translation Lookup Success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3590,"y":720,"wires":[]},{"id":"450e915d.afccc","type":"debug","z":"1dc4f0f5.2a52bf","name":"3.2 Catch Translation Lookup Partial Failure","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3610,"y":800,"wires":[]},{"id":"4aa2080c.2930f8","type":"debug","z":"1dc4f0f5.2a52bf","name":"3.3 Catch Translation Lookup Repeated Failure","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3620,"y":880,"wires":[]},{"id":"bc027f67.a1c16","type":"debug","z":"1dc4f0f5.2a52bf","name":"catch Optionally Simplify msg.keyvalues.Measurement","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3100,"y":720,"wires":[]},{"id":"56ef8f41.48171","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Remove Excess Properties","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3980,"y":720,"wires":[]},{"id":"780c4726.4b7878","type":"debug","z":"1dc4f0f5.2a52bf","name":"Catch Move Name Change from searchfor to exportableresults","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4530,"y":720,"wires":[]},{"id":"1682d471.ab941c","type":"debug","z":"1dc4f0f5.2a52bf","name":"1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4650,"y":760,"wires":[]},{"id":"519bb27e.d8911c","type":"debug","z":"1dc4f0f5.2a52bf","name":"2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":4650,"y":880,"wires":[]},{"id":"e7bbcb41.5d61d8","type":"function","z":"1dc4f0f5.2a52bf","name":"Optionally Simplify msg.exportableresults.Measure","func":"if (msg.exportableresults.Measure.includes(\"/\"))\n{msg.exportableresults.Measure = msg.exportableresults.Measure.substring(msg.exportableresults.Measure.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":2970,"y":180,"wires":[["5cbbf995.ad6aa8"]]},{"id":"d56d476e.020a08","type":"inject","z":"1dc4f0f5.2a52bf","name":"Start Monitoring All Homebridge Controlled Devices","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":230,"y":40,"wires":[["b981b46.b143448"]]},{"id":"50b8df7c.674cd","type":"subflow:11c4fe96.587e41","z":"1dc4f0f5.2a52bf","name":"","env":[],"x":3040,"y":780,"wires":[["fea74ffb.fd04a","a15574b.6ad3b88"],["450e915d.afccc"],["f35f631d.a4e2f","4aa2080c.2930f8"]]},{"id":"c4e29524.204938","type":"link out","z":"1dc4f0f5.2a52bf","name":"Got Potential Translation Update","links":["54e403d7.d4601c"],"x":4030,"y":840,"wires":[],"l":true},{"id":"e1ef3305.600a9","type":"link out","z":"1dc4f0f5.2a52bf","name":"Go Do Translation","links":["d6b62a66.57fb58"],"x":4690,"y":800,"wires":[],"l":true},{"id":"d6b62a66.57fb58","type":"link in","z":"1dc4f0f5.2a52bf","name":"Go Do Translation","links":["e1ef3305.600a9"],"x":1490,"y":1080,"wires":[["c809a044.0de4a"]],"l":true},{"id":"7017a94c.4d4098","type":"mqtt in","z":"99fd6336.0f977","name":"","topic":"zigbee2mqtt/#","qos":"2","datatype":"auto","broker":"a5bf81ee.27852","x":170,"y":100,"wires":[["207aa376.18996c"]]},{"id":"823365d6.61be98","type":"inject","z":"99fd6336.0f977","name":"Toggle gate on/off","topic":"control","payload":"toggle","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":150,"y":60,"wires":[["207aa376.18996c"]]},{"id":"207aa376.18996c","type":"gate","z":"99fd6336.0f977","name":"","controlTopic":"control","defaultState":"open","openCmd":"open","closeCmd":"close","toggleCmd":"toggle","defaultCmd":"default","persist":false,"x":350,"y":60,"wires":[["6a133887.493e18"]]},{"id":"e58d7fa8.8e666","type":"debug","z":"99fd6336.0f977","name":"MQTT Everything","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":870,"y":20,"wires":[]},{"id":"e35a5d54.11663","type":"link out","z":"99fd6336.0f977","name":"Get DeviceID","links":["f469620b.9028f"],"x":2490,"y":60,"wires":[],"l":true},{"id":"ef19f7ac.577bf8","type":"debug","z":"99fd6336.0f977","name":"Catch Post change 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2320,"y":20,"wires":[]},{"id":"f469620b.9028f","type":"link in","z":"99fd6336.0f977","name":"Get DeviceID (Homekit, z2m)","links":["e35a5d54.11663"],"x":200,"y":300,"wires":[["d0ffc46b.a7e048"]],"l":true},{"id":"d0dbea7f.a87f98","type":"link in","z":"99fd6336.0f977","name":"Got DeviceID","links":["d3ce43f.cb611c"],"x":150,"y":380,"wires":[["9a1bf362.b6c5e"]],"l":true},{"id":"c8ec05d8.f45378","type":"change","z":"99fd6336.0f977","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"set","p":"exportableresults.DeviceID","pt":"msg","to":"value","tot":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1380,"y":300,"wires":[["a521f45b.b9ecc8","539f3aef.2f3944"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"406232b1.6b403c","type":"subflow:11c4fe96.587e41","z":"99fd6336.0f977","name":"","env":[],"x":1040,"y":300,"wires":[["c8ec05d8.f45378","db404e15.cbd6c"],["b6adabe2.167098"],["778b3cdc.6623e4"]]},{"id":"a521f45b.b9ecc8","type":"function","z":"99fd6336.0f977","name":"Move Data from searchfor to exportableresults","func":"//debugger\nlet foundKeys = Object.keys(msg.searchfor)\nlet foundValues = Object.values(msg.searchfor)\n//loop through all keys and a\nfor (index = 0; index < foundKeys.length; index++)\n{\n    if(foundValues[index]!== \"\")\n    {\n    msg.exportableresults[foundKeys[index]] = foundValues[index]\n    }\n}\ndelete msg.searchfor\nreturn msg","outputs":1,"noerr":0,"x":1740,"y":300,"wires":[["b5a4df09.8163d","d3ce43f.cb611c"]],"info":"This node moves each property under the msg.searchfor property to the msg.exportableresults property."},{"id":"d0ffc46b.a7e048","type":"change","z":"99fd6336.0f977","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"Z","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"1000","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":471,"y":300,"wires":[["93713fcd.caf9","2e0da78e.114458"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"93713fcd.caf9","type":"change","z":"99fd6336.0f977","name":"Devices Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"Devices","tot":"str"},{"t":"set","p":"keyvalues.Device","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"searchfor.DeviceID","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Floor","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Location","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Room","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.DeviceType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Manufacturer","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.AccessProtocol","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.PhysicalVirtualType","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.House","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.MQTTDeviceTopic","pt":"msg","to":"","tot":"str"},{"t":"set","p":"searchfor.Hub","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":750,"y":300,"wires":[["406232b1.6b403c","ff9e0ae6.b46b58"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"b842a9f7.e0a4b8","type":"link in","z":"99fd6336.0f977","name":"Get Measurement Name Update (All 3)","links":["9a1bf362.b6c5e"],"x":230,"y":500,"wires":[["59d73b63.255a54"]],"l":true},{"id":"9a1bf362.b6c5e","type":"link out","z":"99fd6336.0f977","name":"Get Measurement Name Update","links":["b842a9f7.e0a4b8"],"x":370,"y":380,"wires":[],"l":true},{"id":"884b5154.9bea4","type":"link in","z":"99fd6336.0f977","name":"Got Measurement Name Update","links":["28306b88.f518e4"],"x":210,"y":660,"wires":[["f291e951.4b0988"]],"l":true},{"id":"d3ce43f.cb611c","type":"link out","z":"99fd6336.0f977","name":"Got Device ID","links":["d0dbea7f.a87f98"],"x":2040,"y":300,"wires":[],"l":true},{"id":"82230a0f.27d8a8","type":"change","z":"99fd6336.0f977","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1980,"y":480,"wires":[["723f626d.60fcfc"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"6acbddcc.3e1cc4","type":"subflow:11c4fe96.587e41","z":"99fd6336.0f977","name":"","env":[],"x":1620,"y":500,"wires":[["82230a0f.27d8a8","4f199f30.9b198"],["e2c21c7f.3ae87"],["da57051a.8984b8","42db477b.0ade08","4f199f30.9b198"]]},{"id":"59d73b63.255a54","type":"change","z":"99fd6336.0f977","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"E","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"200","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":530,"y":500,"wires":[["68e878b8.802688","8b73d007.ce4d3"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"68e878b8.802688","type":"change","z":"99fd6336.0f977","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"MeasurementTranslations","tot":"str"},{"t":"set","p":"keyvalues.SourceDevice","pt":"msg","to":"exportableresults.DeviceName","tot":"msg"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.ChangeNameTo","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":860,"y":500,"wires":[["1e10a5bf.4e936a","d5411779.e03488"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"b5a4df09.8163d","type":"debug","z":"99fd6336.0f977","name":"1.1 DevID Lookup Success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2080,"y":260,"wires":[]},{"id":"e2c21c7f.3ae87","type":"debug","z":"99fd6336.0f977","name":"flow 2.2 temp no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1960,"y":520,"wires":[]},{"id":"da57051a.8984b8","type":"debug","z":"99fd6336.0f977","name":"2.3a Need to update MeasurementTranslations Table","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2060,"y":600,"wires":[]},{"id":"9e01db4d.8bbac8","type":"debug","z":"99fd6336.0f977","name":"2.1 rename lookup success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2980,"y":480,"wires":[]},{"id":"723f626d.60fcfc","type":"function","z":"99fd6336.0f977","name":"Move Name Change from searchfor to exportableresults","func":"msg.exportableresults.Measure = msg.searchfor.ChangeNameTo\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":2610,"y":480,"wires":[["9e01db4d.8bbac8","28306b88.f518e4"]]},{"id":"28306b88.f518e4","type":"link out","z":"99fd6336.0f977","name":"Got Measurement Name Update","links":["884b5154.9bea4"],"x":2990,"y":520,"wires":[],"l":true},{"id":"f291e951.4b0988","type":"link out","z":"99fd6336.0f977","name":"Get Potential Translation Update","links":["b254d6d2.381de8"],"x":490,"y":660,"wires":[],"l":true},{"id":"b254d6d2.381de8","type":"link in","z":"99fd6336.0f977","name":"Get Potential Translation Update (Homebridge Only)","links":["f291e951.4b0988"],"x":270,"y":740,"wires":[["972f03e9.17cfb"]],"l":true},{"id":"7d60027b.ccdb5c","type":"link in","z":"99fd6336.0f977","name":"Got Potential Translation Update","links":["e3e41c59.bd7ac","cbd7f353.da236","16212593.e8b00a","74241a73.4b2ef4","ab9ee629.2f0298","2bc697b6.28f1a8"],"x":190,"y":1600,"wires":[["a2c9efb7.4b51b","84049263.59c9f"]],"l":true},{"id":"e3e41c59.bd7ac","type":"link out","z":"99fd6336.0f977","name":"Got Potential Translation Update","links":["7d60027b.ccdb5c"],"x":830,"y":1000,"wires":[],"l":true},{"id":"9199361e.a93548","type":"function","z":"99fd6336.0f977","name":"Move Name Change from searchfor to exportableresults","func":"msg.TranslationType = msg.searchfor.TranslationType\ndelete msg.searchfor\nreturn msg;","outputs":1,"noerr":0,"x":2730,"y":720,"wires":[["b7aa2037.7163","14206cee.69f2a3"]]},{"id":"baaaaf4.a3c8a5","type":"change","z":"99fd6336.0f977","name":"Remove Excess Properties","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2240,"y":720,"wires":[["9199361e.a93548","d432e8b0.3afa98"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"68d2e7e6.599938","type":"change","z":"99fd6336.0f977","name":"Measurement Translation Lookup Settings","rules":[{"t":"set","p":"globalsource","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"keyvalues.DeviceID","pt":"msg","to":"exportableresults.DeviceID","tot":"msg"},{"t":"set","p":"keyvalues.Measurement","pt":"msg","to":"exportableresults.Measure","tot":"msg"},{"t":"set","p":"searchfor.TranslationType","pt":"msg","to":"","tot":"str"},{"t":"delete","p":"searchErrorCount","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":940,"y":740,"wires":[["22535735.948d28","ba8a74df.d6cfc8"]],"info":"## **inputs**\n### globalsource \nThe name of the global variable holding the table of data. In this case **\"Devices\"**\n### msg.keyvalues.Device\nThese components of the msg object are made up of key value pairs used to identify the row of data. The key corresponds to the column header identifying the column to look in and the value corresponds to what data value in that column qualifies as a matching row. In this case look in the **\"Device\"** column for the value pulled from the **msg.exportableresults.DeviceName** object.\n### msg.searchfor.DeviceID\nThese components of the msg object are made up of key value pairs used to retrieve the missing data. The key corresponds to the column header identifying the column to look in. In this case find the data in the **\"DeviceID\"** column.\n"},{"id":"972f03e9.17cfb","type":"change","z":"99fd6336.0f977","name":"Spreadsheet Lookup Settings","rules":[{"t":"set","p":"IgnoreEnvVar","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"SpreadsheetID","pt":"msg","to":"1gQZK2aV9LaQT23WInvlTiUUIX-vMVbBA_k1eCda7Kus","tot":"str"},{"t":"set","p":"Tab","pt":"msg","to":"DataTranslations","tot":"str"},{"t":"set","p":"ColStart","pt":"msg","to":"A","tot":"str"},{"t":"set","p":"ColEnd","pt":"msg","to":"C","tot":"str"},{"t":"set","p":"MinRow","pt":"msg","to":"1","tot":"str"},{"t":"set","p":"MaxRow","pt":"msg","to":"100","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":610,"y":740,"wires":[["68d2e7e6.599938","f711e467.0080e8"]],"info":"## **inputs**\n### IgnoreEnvVar \nThis boolean needs to be true to tell that Read Spreadsheet For Details subflow that it should use the specs passed in the msg to determine what spreadsheet to read from and what portion of data to read from.\n### msg.SpreadsheetID\nThis is the very long string that identifies a specific google spreadsheet.\n### msg.Tab\nSpecifies the tab name that contains the data.\n### msg.ColStart\nSpecifies the leftmost column containing the desired data.\n### msg.ColEnd\nSpecifies the rightmost column containing the desired data. \n### msg.MinRow\nSpecifies the top row containing the desired data \n### msg.MaxRow\nSpecifies the bottom row containing the desired data "},{"id":"42db477b.0ade08","type":"change","z":"99fd6336.0f977","name":"Remove Excess Properties when No Name Change Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2080,"y":560,"wires":[["28306b88.f518e4","4a5b955a.b5197c"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"6c53fb73.e35614","type":"change","z":"99fd6336.0f977","name":"Remove Excess Properties when No Data Translation Found","rules":[{"t":"delete","p":"globalsource","pt":"msg"},{"t":"delete","p":"keyname","pt":"msg"},{"t":"delete","p":"searchtarget","pt":"msg"},{"t":"delete","p":"datacolumnname","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"},{"t":"delete","p":"value","pt":"msg"},{"t":"delete","p":"keyvalues","pt":"msg"},{"t":"delete","p":"SpreadsheetID","pt":"msg"},{"t":"delete","p":"Tab","pt":"msg"},{"t":"delete","p":"ColStart","pt":"msg"},{"t":"delete","p":"ColEnd","pt":"msg"},{"t":"delete","p":"MinRow","pt":"msg"},{"t":"delete","p":"MaxRow","pt":"msg"},{"t":"delete","p":"IgnoreEnvVar","pt":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"LastPopulatedRow","pt":"msg"},{"t":"delete","p":"FirstEmptyRow","pt":"msg"},{"t":"delete","p":"LastPopulatedCol","pt":"msg"},{"t":"delete","p":"FirstEmptyCol","pt":"msg"},{"t":"delete","p":"SpreadsheetArray","pt":"msg"},{"t":"delete","p":"searchfor","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2340,"y":800,"wires":[["2bc697b6.28f1a8"]],"info":"This node is removing properties that were needed for the lookup, but not part of the results."},{"id":"29600810.a7e6a8","type":"switch","z":"99fd6336.0f977","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":600,"y":860,"wires":[["fed55d77.ce43d"],["8229dc0.2723a28"]],"outputLabels":["True","False"]},{"id":"fed55d77.ce43d","type":"change","z":"99fd6336.0f977","name":"Value True","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":770,"y":840,"wires":[["16212593.e8b00a"]]},{"id":"8229dc0.2723a28","type":"change","z":"99fd6336.0f977","name":"Value False","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"false","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":770,"y":880,"wires":[["16212593.e8b00a"]]},{"id":"e07ebf2.d29894","type":"change","z":"99fd6336.0f977","name":"CtoF Translate","rules":[{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"msg.exportableresults.Measure&\" F\"\t","tot":"jsonata"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"msg.exportableresults.Reading*9/5+32","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":600,"y":1000,"wires":[["e3e41c59.bd7ac"]]},{"id":"59302cbe.d18394","type":"switch","z":"99fd6336.0f977","name":"CurrentHeatingCoolingState Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"},{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":670,"y":1180,"wires":[["63669069.3f92c"],["cbf9efe3.92a21"],["295b1904.5f0ac6"],["aea7b698.5bba88"]],"outputLabels":["off","heat","cool","heat-cool"]},{"id":"63669069.3f92c","type":"change","z":"99fd6336.0f977","name":"Value Off","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"off","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":920,"y":1120,"wires":[["74241a73.4b2ef4"]]},{"id":"cbf9efe3.92a21","type":"change","z":"99fd6336.0f977","name":"Value Heat","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":1160,"wires":[["74241a73.4b2ef4"]]},{"id":"295b1904.5f0ac6","type":"change","z":"99fd6336.0f977","name":"Value Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":930,"y":1200,"wires":[["74241a73.4b2ef4"]]},{"id":"aea7b698.5bba88","type":"change","z":"99fd6336.0f977","name":"Value Heat-Cool","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"heat-cool","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":940,"y":1240,"wires":[["74241a73.4b2ef4"]]},{"id":"e9800add.104d18","type":"switch","z":"99fd6336.0f977","name":"","property":"TranslationType","propertyType":"msg","rules":[{"t":"eq","v":"10TF","vt":"str"},{"t":"eq","v":"C2F","vt":"str"},{"t":"eq","v":"NestThMap","vt":"str"},{"t":"eq","v":"012CF","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":390,"y":1040,"wires":[["29600810.a7e6a8"],["e07ebf2.d29894"],["59302cbe.d18394"],["6f7bb251.48dfbc"]],"outputLabels":["1 or 0 to True or False Map","Celcius to Fahrenheit Conversion","Nest Thermostat Map","Celcius or Fahrenheit Map"]},{"id":"6f7bb251.48dfbc","type":"switch","z":"99fd6336.0f977","name":"10TF Translate","property":"exportableresults.Reading","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":600,"y":1360,"wires":[["8d30fc18.08def"],["9c7d9afc.d0cdd8"]],"outputLabels":["True","False"]},{"id":"8d30fc18.08def","type":"change","z":"99fd6336.0f977","name":"Value Fahrenheit","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Fahrenheit","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":790,"y":1340,"wires":[["cbd7f353.da236"]]},{"id":"9c7d9afc.d0cdd8","type":"change","z":"99fd6336.0f977","name":"Value Celcius","rules":[{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"Celcius","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":780,"y":1380,"wires":[["cbd7f353.da236"]]},{"id":"b7aa2037.7163","type":"switch","z":"99fd6336.0f977","name":"Translation Needed?","property":"TranslationType","propertyType":"msg","rules":[{"t":"neq","v":"null","vt":"str"},{"t":"eq","v":"null","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":3080,"y":720,"wires":[["a2c3e2c5.ff494","737c74da.c7009c"],["ab9ee629.2f0298","9fea3a52.73f408"]]},{"id":"84049263.59c9f","type":"change","z":"99fd6336.0f977","name":"Excess Properties Removal","rules":[{"t":"delete","p":"searchErrorCount","pt":"msg"},{"t":"delete","p":"error","pt":"msg"},{"t":"delete","p":"TranslationType","pt":"msg"},{"t":"delete","p":"_event","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":480,"y":1600,"wires":[["5b5ab0d2.8cdc3","ae48c99c.559108"]]},{"id":"5b5ab0d2.8cdc3","type":"debug","z":"99fd6336.0f977","name":"Catch Excess Properties Removal","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":780,"y":1560,"wires":[]},{"id":"16212593.e8b00a","type":"link out","z":"99fd6336.0f977","name":"Got Potential Translation Update","links":["7d60027b.ccdb5c"],"x":990,"y":860,"wires":[],"l":true},{"id":"74241a73.4b2ef4","type":"link out","z":"99fd6336.0f977","name":"Got Potential Translation Update","links":["7d60027b.ccdb5c"],"x":1210,"y":1180,"wires":[],"l":true},{"id":"cbd7f353.da236","type":"link out","z":"99fd6336.0f977","name":"Got Potential Translation Update","links":["7d60027b.ccdb5c"],"x":1030,"y":1360,"wires":[],"l":true},{"id":"ab9ee629.2f0298","type":"link out","z":"99fd6336.0f977","name":"Got Potential Translation Update","links":["7d60027b.ccdb5c"],"x":3410,"y":800,"wires":[],"l":true},{"id":"ae48c99c.559108","type":"function","z":"99fd6336.0f977","name":"Format for InfluxDB & MQTT","func":"//Ref. TMS-000002\n/* This function takes input from a hubitat device node and data stored in config node which holds details about the device\n * and creates an properly formated object to be sent to InfluxDB node via output 1 which will in turn write to the InfluxDB\n * It also formats an MQTT topic and the data sending that to output 2 which in turn can be used by an MQTT node to send to \n * MQTT\n * \n * \n */\n//gather the name of the device which had a reading that triggered the flow to be included as a tag (index) sent to InfluxDB\n//note: this is the hubitat device ID\nvar deviceID = msg.exportableresults.DeviceID;\n//node.warn(\"11 \"+ deviceID)\n//gather the name of the measurement that was sent by the device to be included as a tag (index) for invalid measurements and as the fieldname for valid measurements sent to InfluxDB\nvar typeOfMeasurement = msg.exportableresults.Measure;\n\n//gather the actual measurement value that was sent by the device to be included as the data for the field (when the measurement is valid) sent to InfluxDB\nvar theData = msg.exportableresults.Reading;\n//initialize the measurements object\nvar measurementsObj = {};\n\n//initialize the tags (indices) object\nvar tagsObj = {};\n\n//create the object that will later be used to combine the measurementsObj and tagsObj\nvar combinedObj;\n\n//create the boolean that will be used to hold the evaluation of whether the measurement is valid or not\nvar validMeasurement;\n\n//create the booleans that will be used to hold whether the reason a measurement is invalid is because it is a non-standard type or\n// if the type of the measurement and the type passed from the device differ or\n// if the value (data) is null\nvar nonStandardType = false;\nvar measurementTypeMismatch = false;\nvar nullData = false;\n\n//create a boolean to keep track of if there are any tags (indices) that should be sent to the InfluxDB \n// it starts false but if any tag is valid then will become true. See below for what to send to InfluxDB based on valid measures and tags\nvar validTag = false;\nif (msg.exportableresults.hasOwnProperty('dataType'))\n{\n    if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    {\n        if (typeof theData == 'number')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched number\" });\n            if (!theData.isNaN)\n            {\n                validMeasurement = true;\n            }\n        }\n        else if (typeof theData == 'string')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched string\" });\n            if (theData.length >= 0)\n            {\n                validMeasurement = true;\n            }\n        } \n        else if (typeof theData == 'boolean')\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched boolean\" });\n            validMeasurement = true;\n        }\n        else if (msg.exportableresults.dataType == 'ENUM')\n        { //This is checking to make sure the value matches one of the values in the ENUM from the device \n            node.status({ fill: \"red\", shape: \"ring\", text: msg.exportableresults.dataType + \" matched ENUM\" });\n            msg.exportableresults.values.forEach(element => {\n                if (flow.get(deviceID + element) == theData)\n                {\n                    validMeasurement = true;\n                }\n            })\n        }\n        else if (theData === null)\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched null data\" });\n            nullData = true;\n        }\n        else\n        {\n            node.status({ fill: \"red\", shape: \"ring\", text: \"matched nonstandardtype\" });\n            nonStandardType = true;\n        }\n    } //if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n    else\n    {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"measurement type mismatch\" });\n        measurementTypeMismatch = true;\n    } //else  if ((typeof theData == msg.exportableresults.dataType.toLowerCase()) || (msg.exportableresults.dataType == 'ENUM') || (theData === null))\n}//if(msg.exportableresults.hasOwnProperty('dataType'))\nelse\n{\n    validMeasurement = true;\n}// else      if(msg.exportableresults.hasOwnProperty('dataType')) else\n\n//scanning all of the tags from the config node and creating a tag for that item if the entry on the config node has info\ncommonTags = [\"House\", \"Floor\", \"Room\", \"Location\", \"DeviceType\", \"Manufacturer\", \"AccessProtocol\", \"PhysicalVirtualType\", \"PhysicalDigitalRegular\"]\nfor (innerIndex = 0; innerIndex < commonTags.length; innerIndex++)\n{\n    if (msg.exportableresults.hasOwnProperty(commonTags[innerIndex]))\n    {\n        tagsObj[commonTags[innerIndex]] = msg.exportableresults[commonTags[innerIndex]]\n    } //if (requestedDataTable[outerIndex][searchKeyIndices[innerIndex]] == searchValues[innerIndex]) else\n} //for (innerIndex = 0; innerIndex < searchKeyIndices.length; innerIndex++)\n\n//Based on whether or not the measurement is \"valid\" it either adds the device id to the tags or it goes to the else portion\nif (validMeasurement) {\n    measurementsObj[typeOfMeasurement] = theData;\n    //node.warn(\"94 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID;\n        validTag = true;\n    }\n    if (validTag) {\n        combinedObj = [measurementsObj, tagsObj]\n    } else {\n        //skip tags if none would be valid\n        combinedObj = [measurementsObj]\n    }\n} else {\n\n    //if the measeurement was not \"valid\", then it puts in a Generic measurement of true and tag it as either Non-Standard Type of Measurement Type Mismatch\n    if (nonStandardType) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Non-Standard Type\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"113 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    if (measurementTypeMismatch) {\n        measurementsObj[\"Generic\"] = true\n        tagsObj[\"ReasonGeneric\"] = \"Measurement Type Mismatch\"\n        tagsObj[\"Measure\"] = typeOfMeasurement\n    }\n    //node.warn(\"123 length\")\n    if (deviceID.length > 0) {\n        tagsObj[\"DeviceID\"] = deviceID\n        validTag = true\n    }\n    combinedObj = [measurementsObj, tagsObj]\n}\n\n//put the object into the payload\nmsg.payload = combinedObj;\n\n//build the status to be shown on the status of the subnode\nmsg.status = msg.exportableresults.DeviceName + \": \" + typeOfMeasurement + \": \" + theData;\n\n/* MQTT section \n * \n * \n * \n */\n//create the placeholder object\nvar msg2 = {}\n//add the MQTT topic\nmsg2.topic = msg.exportableresults.MQTTname +\"/\"+msg.exportableresults.MQTTDeviceTopic+\"/\"+ msg.exportableresults.Measure\n//add the data to be recorded to MQTT\nmsg2.payload = theData\n\n\n\n//send the created combinedObj downstream (to the InfluxDB node), but only if the measurement is not null\nif (!nullData) {\n    return [msg, msg2]\n}","outputs":2,"noerr":0,"x":820,"y":1600,"wires":[["b875557b.8e7ab8","4b44ebb0.c99144","9d2d83fb.085ab"],["2b3b9c7a.e0dbb4","ea834a79.ea0ef8"]]},{"id":"b875557b.8e7ab8","type":"debug","z":"99fd6336.0f977","name":"4.1 Output 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1090,"y":1520,"wires":[]},{"id":"2b3b9c7a.e0dbb4","type":"debug","z":"99fd6336.0f977","name":"4.2 Output 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1090,"y":1700,"wires":[]},{"id":"4b44ebb0.c99144","type":"influxdb out","z":"99fd6336.0f977","influxdb":"82aca41a.30fed8","name":"","measurement":"Smarthome","precision":"","retentionPolicy":"","x":1210,"y":1560,"wires":[]},{"id":"9d2d83fb.085ab","type":"change","z":"99fd6336.0f977","name":"Move Status to Payload for Consumption by Status Node","rules":[{"t":"set","p":"payload","pt":"msg","to":"status","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1230,"y":1600,"wires":[["acc84db7.20b76"]]},{"id":"ea834a79.ea0ef8","type":"mqtt out","z":"99fd6336.0f977","name":"Write reading to MQTT","topic":"","qos":"1","retain":"true","broker":"a5bf81ee.27852","x":1120,"y":1640,"wires":[]},{"id":"acc84db7.20b76","type":"debug","z":"99fd6336.0f977","name":"4.3 Output  For Status node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1600,"y":1560,"wires":[]},{"id":"b6adabe2.167098","type":"debug","z":"99fd6336.0f977","name":"flow 1.2 temp no find","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1360,"y":340,"wires":[]},{"id":"778b3cdc.6623e4","type":"debug","z":"99fd6336.0f977","name":"flow 1.3 Need to update the Devices Table","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1420,"y":380,"wires":[]},{"id":"1e10a5bf.4e936a","type":"function","z":"99fd6336.0f977","name":"Optionally Simplify msg.keyvalues.Measurement","func":"if (msg.keyvalues.Measurement.includes(\"/\"))\n{msg.keyvalues.Measurement = msg.keyvalues.Measurement.substring(msg.keyvalues.Measurement.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":1260,"y":500,"wires":[["33e54bf2.355404","6acbddcc.3e1cc4"]]},{"id":"d5411779.e03488","type":"debug","z":"99fd6336.0f977","name":"before","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1130,"y":460,"wires":[]},{"id":"33e54bf2.355404","type":"debug","z":"99fd6336.0f977","name":"after","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1550,"y":440,"wires":[]},{"id":"4a5b955a.b5197c","type":"debug","z":"99fd6336.0f977","name":"flow 2.3b If translation desired fail, otherwise succes Table?","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3080,"y":560,"wires":[]},{"id":"a2c9efb7.4b51b","type":"debug","z":"99fd6336.0f977","name":"flow 3 output","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":430,"y":1560,"wires":[]},{"id":"2e0da78e.114458","type":"debug","z":"99fd6336.0f977","name":"Catch Spread Lookup","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":740,"y":260,"wires":[]},{"id":"ff9e0ae6.b46b58","type":"debug","z":"99fd6336.0f977","name":"Catch Devices Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1050,"y":240,"wires":[]},{"id":"db404e15.cbd6c","type":"debug","z":"99fd6336.0f977","name":"Catch Lookup Desired Data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1380,"y":260,"wires":[]},{"id":"539f3aef.2f3944","type":"debug","z":"99fd6336.0f977","name":"Catch Remove Excess Properties","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1700,"y":260,"wires":[]},{"id":"8b73d007.ce4d3","type":"debug","z":"99fd6336.0f977","name":"Catch Spreadsheet Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":870,"y":460,"wires":[]},{"id":"4f199f30.9b198","type":"debug","z":"99fd6336.0f977","name":"Catch Lookup Desired Data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1980,"y":440,"wires":[]},{"id":"f711e467.0080e8","type":"debug","z":"99fd6336.0f977","name":"Catch Spreadsheet Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":930,"y":700,"wires":[]},{"id":"22535735.948d28","type":"debug","z":"99fd6336.0f977","name":"Catch Measurement Translation Lookup Settings","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1320,"y":700,"wires":[]},{"id":"ba8a74df.d6cfc8","type":"function","z":"99fd6336.0f977","name":"Optionally Simplify msg.keyvalues.Measurement","func":"if (msg.keyvalues.Measurement.includes(\"/\"))\n{msg.keyvalues.Measurement = msg.keyvalues.Measurement.substring(msg.keyvalues.Measurement.lastIndexOf(\"/\") + 1);\n}\nreturn msg;","outputs":1,"noerr":0,"x":1320,"y":740,"wires":[["b6adbcaa.19874","35a7d2dd.d7a1de"]]},{"id":"97cd161e.912648","type":"debug","z":"99fd6336.0f977","name":"3.1 Catch Translation Lookup Success","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2270,"y":680,"wires":[]},{"id":"d8dd53eb.5b72","type":"debug","z":"99fd6336.0f977","name":"3.2 Catch Translation Lookup Partial Failure","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2290,"y":760,"wires":[]},{"id":"3a9884eb.d734bc","type":"debug","z":"99fd6336.0f977","name":"3.3 Catch Translation Lookup Repeated Failure","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2300,"y":840,"wires":[]},{"id":"b6adbcaa.19874","type":"debug","z":"99fd6336.0f977","name":"catch Optionally Simplify msg.keyvalues.Measurement","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1780,"y":680,"wires":[]},{"id":"d432e8b0.3afa98","type":"debug","z":"99fd6336.0f977","name":"Catch Remove Excess Properties","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":2660,"y":680,"wires":[]},{"id":"14206cee.69f2a3","type":"debug","z":"99fd6336.0f977","name":"Catch Move Name Change from searchfor to exportableresults","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3210,"y":680,"wires":[]},{"id":"a2c3e2c5.ff494","type":"debug","z":"99fd6336.0f977","name":"1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3330,"y":720,"wires":[]},{"id":"9fea3a52.73f408","type":"debug","z":"99fd6336.0f977","name":"2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":3330,"y":840,"wires":[]},{"id":"35a7d2dd.d7a1de","type":"subflow:11c4fe96.587e41","z":"99fd6336.0f977","name":"","env":[],"x":1720,"y":740,"wires":[["baaaaf4.a3c8a5","97cd161e.912648"],["d8dd53eb.5b72"],["6c53fb73.e35614","3a9884eb.d734bc"]]},{"id":"2bc697b6.28f1a8","type":"link out","z":"99fd6336.0f977","name":"Got Potential Translation Update","links":["7d60027b.ccdb5c"],"x":2710,"y":800,"wires":[],"l":true},{"id":"737c74da.c7009c","type":"link out","z":"99fd6336.0f977","name":"Go Do Translation","links":["ce868a9.9866978"],"x":3370,"y":760,"wires":[],"l":true},{"id":"ce868a9.9866978","type":"link in","z":"99fd6336.0f977","name":"Go Do Translation","links":["737c74da.c7009c"],"x":170,"y":1040,"wires":[["e9800add.104d18"]],"l":true},{"id":"6a133887.493e18","type":"string","z":"99fd6336.0f977","name":"Remove zigbee2mqtt/ from the topic","methods":[{"name":"chompLeft","params":[{"type":"str","value":"zigbee2mqtt/"}]}],"prop":"topic","propout":"topic","object":"msg","objectout":"msg","x":590,"y":60,"wires":[["e58d7fa8.8e666","c07d2231.76cd2"]]},{"id":"fec85b50.2b9fa8","type":"comment","z":"99fd6336.0f977","name":"z2m only steps","info":"","x":600,"y":20,"wires":[]},{"id":"d222fb76.e18a18","type":"change","z":"99fd6336.0f977","name":"Add MQTT Master (different per source)","rules":[{"t":"set","p":"MQTTName","pt":"msg","to":"zb2mqtt","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1420,"y":60,"wires":[["c76991aa.a51a5","c82c6c8d.e9d21"]]},{"id":"c07d2231.76cd2","type":"change","z":"99fd6336.0f977","name":"Put device ID into msg.deviceID and payload into payload.value","rules":[{"t":"set","p":"deviceID","pt":"msg","to":"topic","tot":"msg"},{"t":"set","p":"temp","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"},{"t":"set","p":"payload.value","pt":"msg","to":"temp","tot":"msg"},{"t":"delete","p":"temp","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1010,"y":60,"wires":[["d222fb76.e18a18"]]},{"id":"c76991aa.a51a5","type":"function","z":"99fd6336.0f977","name":"zMQTT version Split kv pairs (from value) into 1-n msg stream (ready for testing)","func":"/*\n * Main function node code \n * \n */\n//Check if there is any data. If not, stop processing. At the time this was created, the trackData sent from a Hubitat Elevation device node was always null\nif (msg.payload.value === null) {\n    return null;\n}\n//delete the currentValue portion of the object since it is deprecated\ndelete msg.payload.currentValue\n//initial call into the recursive function\nhandlemsg(msg)\n//send nothing from main code\nreturn\n\n/*\n * Main recursive function code\n *\n */\n\nfunction handlemsg(msg) {\n    //The evaluation part of this switch/case statement determines which type of entity is in the value\n    //  the key idea is that once the value is an atomic item (number, string, bool) then the message should be sent out\n    //  of the node to downstream, but if the value is a splittable, then it should be split into multiple messages. These\n    //  messages are then evaulated individually. They in turn are either found to have atomic entries in the value or have\n    //  values that are themselves splittable.\n    //  For example:\n    //  JSON - each key value pair will be used to create a new msg. The msg.payload.name will be changed to add \":\" and the key\n    //          from the key value pair. The msg.payload.value will become the value from the key value pair\n    //  Array - TBAdded\n    //  Object - TBAdded\n    msg.topic = msg.topic.substring(msg.topic.lastIndexOf(\"/\") + 1);\n    switch (typeofhubitatvalue(msg.payload.value, \"msg.payload.value\")) {\n        case \"number\":\n        case \"bigint\":\n            //numbers are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Number\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"boolean\":\n            //Booleans are an atomic type of value and should be sent to downstream nodes\n            msg.payload.dataType = \"Boolean\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"string\":\n            //Strings are an atomic type of value and should be sent to downstream nodes\n        if (msg.payload.hasOwnProperty('name'))\n            {}\n            else\n            {\n                if (msg.topic.includes(\"/\"))\n                {\n                    msg.payload.name = msg.topic.substring(msg.topic.lastIndexOf(\"/\") + 1);\n                }\n                else\n                {\n                    msg.payload.name = msg.topic\n                }\n            }\n            msg.payload.dataType = \"String\"\n            //send the version of the msg with an atomic value to downstream nodes\n            node.send(msg)\n            //do nothing more once msg has been sent\n            break;\n        case \"unsplittable array\":\n            //This case is where the item is an array, but with only a single entry. The idea is to move that single\n            //  value out of the array and into the value natively and then to call the recursive function to evaluate\n            //  what type of item it now is and then process (split or send or extract) appropriately\n            msg.payload.value = msg.payload.value[0]\n            handlemsg(msg)\n            break;\n        case \"splittable JSON\":\n            //This is for cases where the JSON is in the form of key:value where there is at least 1 pair\n            //  Examples of \"valid\" JSON that would not be coming to this case would be {} or 100\n            splitJSON(msg)\n            break;\n        case \"splittable array\":\n            //This is for cases where the Array is in the form [\"A\",\"B\",\"C\"] where there is are at least 2 members\n            //  SplitArray function not yet built. TBD\n            splitArray(msg)\n            break;\n        case \"unsplittable JSON\":\n            //This is for handling \"valid\" JSON that does not have key:value pairs.\n            //  Examples of \"valid\" JSON that are handed here are {} or 100 or \"100\"\n            //  This case either treats it as a string (no changes made) or a number where a number in\n            //  a string like \"100\" is changed into an actual number like 100\n\n            //by checking if NaN, if it is a number 100 or \"100\", the ++ followed by -- changes it to a number 100\n            //  without changing its actual value\n            if (isNaN(msg.payload.value)) { } else {\n                ++msg.payload.value;\n                --msg.payload.value;\n            }\n            //Sets the data type for downstream since the incoming message could have been a variety of types\n            //  before JSON, object or array was split\n            msg.payload.dataType = typeof (msg.payload.value)\n            //send the version of the msg with an atomic value to downstream nodes (could probably just recursively call\n            //  handlemsg, but I can't identify a circumstance where that would give a different result to downstream,\n            //  but this would be a place to investigate if downstream results are unexpected.)\n            node.send(msg)\n            break\n        case \"object\":\n            //This is for handling an object. It then calls splitObj to create multiple msgs with the object keys into the names\n            //  and the values from those keys moved into the value of the new object.\n            splitObj(msg)\n            break\n        default:\n            //This is just in case no valid process is found by the typeofhubitatvalue function.\n            //  If you encounter this then you will either need to investigate the function or contact tmichael in\n            //  Hubitat discourse forums https://community.hubitat.com/\n            return\n    }\n}\n\n/*\n * This function is used by the Main recursive function (handlemsg) to decide whether to send the msg on as\n *  the msg.payload.value is atomic or if it needs to split the value into multiple msgs\n *\n */\nfunction typeofhubitatvalue(value, source = \"\") {\n    switch (typeof (value)) {\n        case \"number\":\n            //atomic just return the result of typeof\n            return \"number\"\n            break;\n        case \"bigint\":\n            //atomic just return the result of typeof\n            return \"bigint\"\n            break;\n        case \"boolean\":\n            //atomic just return the result of typeof\n            return \"boolean\"\n            break;\n        case \"string\":\n            //most splittable values are encoded strictly as text and so may be identified as a string\n\n            //Fist check if the string is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then it is really just a string, so return string\n                    return \"string\"\n                }\n            }\n            break;\n        case \"object\":\n            //some  splittable values are identified as objects\n\n            //Fist check if the object is \"valid\" JSON\n            if (isvalidJSONstring(value)) {\n                //When it is \"valid\" JSON, check if it is splittable\n                if (issplittablevalidJSONstring(value)) {\n                    //When it is splittable, then return type as splittable JSON\n                    return \"splittable JSON\"\n                }\n                else {\n                    //if it is JSON, but not splittable ({}, \"100, 100) return unsplittable JSON\n                    return \"unsplittable JSON\"\n                }\n            }\n            else {\n                //When it isn't \"valid\" JSON, check if it is an array\n                if (isvalidarray(value)) {\n                    //When it is an array, check if it is splittable\n                    if (issplittablearray(value)) {\n                        //When it is splittable, return splittable Array\n                        return \"splittable Array\"\n                    }\n                    else {\n                        //if the array is not splittable ([\"apple\"]) return unsplittable array\n                        return \"unsplittable array\"\n                    }\n                }\n                else {\n                    //When it is neither JSON or Array, then I have not accounted for it. If you reach this point during an\n                    //  investigation, it might be worth using the example that triggered your investigation to see if the object\n                    //  is really just a string (without a triggering example I have not investigated)\n                    return \"object\"\n                }\n            }\n            break;\n        default:\n            //When the type is not one that I coded for then return unhandled because the situation is by definition unhandled\n            return \"unhandled\"\n            break;\n    }\n}\n\n//True False functions\n/*\n * This function was found on the internet to check if an input is valid JSON\n * There seems to be a belief that there should be some more elegant method that trying parse and the catching the error,\n * but no one seems to have demonstrated what that more elegant way would be\n */\nfunction isvalidJSONstring(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * This function decides where the JSON is made up of at least 1 key:value pair\n */\nfunction issplittablevalidJSONstring(str) {\n    if (str.includes(\":\")) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function is simply wrapping the Array.isArray, to align the function naming with the other true false functions\n */\nfunction isvalidarray(str) {\n    if (Array.isArray(str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/*\n * This function identifies if the array has only a single entry or multiple entries i.e. [\"Apple\"] not splittable,\n *  [\"Apple\",\"Pear\"] splittable\n */\nfunction issplittablearray(str) {\n    // If the length is more than 1, then the array has mutliple entries, but if it is just 1, then it is not splittable\n    if (str.length > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//Splitting functions\n/*\n * This function takes in a msg where msg.payload.value is splittable JSON and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message, \n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n */\nfunction splitJSON(latestMsg) {\n    //put the inputs value into a variable for easier access\n    var valueJSON = JSON.parse(latestMsg.payload.value);\n    //put the inputs name aside for multiple reuses\n    var name = latestMsg.payload.name\n    //Iterative loop\n    Object.keys(valueJSON).forEach(function (key) {\n        //concatenate the original name, a colon and the key from the pair\n        if (typeof name === 'undefined') \n        {\n            latestMsg.payload.name = key;\n        } \n        else \n        {\n            latestMsg.payload.name = name + \"/\" + key;\n        }\n        //move the value from the pair to payload.value\n        latestMsg.payload.value = valueJSON[key];\n        //recursively call this function in case the value is itself splittable\n        handlemsg(latestMsg)\n    }\n    )\n    return\n}\n\n/*\n * This function takes in a msg where msg.payload.value is splittable object\n *  and iterates through all key:value pairs and then\n *  recursively calls handlemsg with multiple messages. Each new message retains most of the details of the input message,\n *  but the name and value are changed.\n *  The name has the key from the key:value pair appended with a : as a seperator\n *  The value is replaced with the value from the key:value pair\n *  A new message is created for each key:value pair\n *  \n *  Note: While working on the splitArray function, I realized that I may not have tested this on an object value with multiple\n *  pairs, so it is possible that the function only handles the first pair\n */\nfunction splitObj(oMsg) {\n    //put the inputs name aside for multiple reuses\n    var name = oMsg.payload.name\n//Iterative loop\n    for (let [key, value] of Object.entries(oMsg.payload.value)) {\n        if ((value !== null) && (key !== null)) {\n            oMsg.payload.name = name + \"/\" + key;\n            oMsg.payload.value = value;\n            //recursively call this function in case the value is itself splittable\n            handlemsg(oMsg)\n        }\n    }\n}\n\n/*\n * Note: At the time of creation, I did not have a live example and had too many other things in the works to construct one.\n * \n * This function takes in a msg where msg.payload.value is splittable array\n *  and iterates through all entries and recursively calls handlemsg with multiple messages. \n *  Each new message retains most of the details of the input message,\n *  but the value is changed.\n *  The value is replaced with the value from the entry in the Array\n *  For example if the input value is [\"Apple\",\"Pear\"], then the first msg will have a value of \"Apple\"\n *  and the second will have a value of \"Pear\"\n */\nfunction splitArray(aMsg) {\n    //Iterative loop\n    for (index = 0; index < aMsg.payload.value.length; index++) {\n        (aMsg.payload.value = aMsg.payload.value[index]);\n        //recursively call this function in case the value is itself splittable\n        handlemsg(aMsg)\n    }\n}","outputs":1,"noerr":0,"x":1900,"y":60,"wires":[["7efc6ef4.52c13","ef19f7ac.577bf8"]]},{"id":"7efc6ef4.52c13","type":"change","z":"99fd6336.0f977","name":"","rules":[{"t":"delete","p":"qos","pt":"msg"},{"t":"delete","p":"retain","pt":"msg"},{"t":"delete","p":"payload.dataType","pt":"msg"},{"t":"delete","p":"deviceID","pt":"msg"},{"t":"set","p":"exportableresults.MQTTname","pt":"msg","to":"MQTTName","tot":"msg"},{"t":"delete","p":"MQTTName","pt":"msg"},{"t":"set","p":"exportableresults.DeviceName","pt":"msg","to":"topic","tot":"msg"},{"t":"delete","p":"topic","pt":"msg"},{"t":"set","p":"exportableresults.Measure","pt":"msg","to":"payload.name","tot":"msg"},{"t":"set","p":"exportableresults.Reading","pt":"msg","to":"payload.value","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":2300,"y":60,"wires":[["e35a5d54.11663"]]},{"id":"c82c6c8d.e9d21","type":"debug","z":"99fd6336.0f977","name":"Catch Post change a","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1720,"y":20,"wires":[]},{"id":"c2409854.f39c18","type":"debug","z":"f14b69ba.8b2da8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":820,"y":220,"wires":[]},{"id":"df201aab.b37668","type":"debug","z":"f14b69ba.8b2da8","name":"after","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1040,"y":280,"wires":[]},{"id":"a892cfb8.e6e4e","type":"debug","z":"b6874b18.031658","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1480,"y":80,"wires":[]},{"id":"6c7d8592.2e84bc","type":"comment","z":"99fd6336.0f977","name":"Common Steps","info":"","x":180,"y":220,"wires":[]},{"id":"297594cf.c7c06c","type":"comment","z":"1dc4f0f5.2a52bf","name":"Common Steps","info":"","x":1480,"y":240,"wires":[]},{"id":"b6cff3d5.2ce69","type":"comment","z":"1dc4f0f5.2a52bf","name":"Homebridge Only Version","info":"","x":1450,"y":20,"wires":[]}]